--- a/mt76x2/ap/ap_apcli.c
+++ b/mt76x2/ap/ap_apcli.c
@@ -629,6 +629,8 @@ BOOLEAN ApCliLinkUp(RTMP_ADAPTER *pAd, U
 #endif /*WPA_SUPPLICANT_SUPPORT*/
 				{
 					pMacEntry->PortSecured = WPA_802_1X_PORT_SECURED;
+					pApCliEntry->ConnectState = APCLI_NOT_TRIGGER_CONNECT;
+					pApCliEntry->FailReason = 0;
 #ifdef SMART_MESH
 				if(pApCliEntry &&
 				   pApCliEntry->MlmeAux.bSupportSmartMesh && 
@@ -3035,7 +3037,7 @@ VOID APCli_Init(RTMP_ADAPTER *pAd, RTMP_
 		IoctlIF = pAd->IoctlIF;
 #endif /* HOSTAPD_SUPPORT */
 
-	dev_name = get_dev_name_prefix(pAd, INT_APCLI);
+		dev_name = get_dev_name_prefix(pAd, INT_APCLI);
 		new_dev_p = RtmpOSNetDevCreate(MC_RowID, &IoctlIF, INT_APCLI, idx,
 									sizeof(struct mt_dev_priv), dev_name);
 		if (!new_dev_p) {
--- a/mt76x2/ap/ap_apcli_inf.c
+++ b/mt76x2/ap/ap_apcli_inf.c
@@ -86,6 +86,7 @@ VOID RT28xx_ApCli_Init(VOID *pAd, PNET_D
 	netDevOpHook.xmit = rt28xx_send_packets;
 	netDevOpHook.ioctl = rt28xx_ioctl;
 	netDevOpHook.get_stats = RT28xx_get_apcli_ether_stats64;
+    netDevOpHook.iw_handler = (struct iw_handler_def *) &rt28xx_ap_iw_handler_def;
 
 	RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_APC_INIT,
 						0, &netDevOpHook, 0);
--- a/mt76x2/ap/ap_cfg.c
+++ b/mt76x2/ap/ap_cfg.c
@@ -11088,7 +11088,115 @@ done:
 
 //#define ENHANCED_STAT_DISPLAY	// Display PER and PLR statistics
 
+VOID RTMPIoctlConnstatus(
+	IN PRTMP_ADAPTER pAd,
+	IN RTMP_IOCTL_INPUT_STRUCT *wrq)
+{
+	INT Status;
+	PSTRING msg;
+    	UCHAR idx = 0;
+	UCHAR i = 0;
+	ULONG txCount = 0;
+	UINT32 rxCount = 0;
+ 	POS_COOKIE pObj;
+ 	UCHAR ifIndex;
+	BOOLEAN bConnect=FALSE;
+	UINT32 MaxWcidNum = MAX_LEN_OF_MAC_TABLE;
+	STRING	ChStr[24] = {0};
+/*	msg = (PSTRING)kmalloc(sizeof(CHAR)*(2048), MEM_ALLOC_FLAG); */
+	os_alloc_mem(pAd, (UCHAR **)&msg, sizeof(CHAR)*(2048));
+	if (msg == NULL) {
+		return;
+	}
+
+
+    memset(msg, 0x00, 1600);
+    sprintf(msg, "\n");
+
+ 	pObj = (POS_COOKIE) pAd->OS_Cookie;
+
+ 	DBGPRINT(RT_DEBUG_TRACE, ("==>RTMPIoctlConnstatus\n"));
+
+ 	if (pObj->ioctl_if_type != INT_APCLI)
+ 		return;
+
+ 	ifIndex = pObj->ioctl_if;
+
+#ifdef MAC_REPEATER_SUPPORT
+	if (pAd->ApCfg.bMACRepeaterEn)
+		MaxWcidNum = MAX_MAC_TABLE_SIZE_WITH_REPEATER;
+#endif /* MAC_REPEATER_SUPPORT */
+
+ 	//DBGPRINT(RT_DEBUG_OFF, ("=============================================================\n"));
+ 	sprintf(msg+strlen(msg), "=============================================================\n");
+ 	if((pAd->ApCfg.ApCliTab[ifIndex].CtrlCurrState == APCLI_CTRL_CONNECTED)
+ 		&& (pAd->ApCfg.ApCliTab[ifIndex].SsidLen != 0))
+ 	{
+ 		for (i=0; i<MaxWcidNum; i++)
+ 		{
+ 			PMAC_TABLE_ENTRY pEntry = &pAd->MacTab.Content[i];
+
+ 			if ( IS_ENTRY_APCLI(pEntry)
+				&& (pEntry->Sst == SST_ASSOC)
+				&& (pEntry->PortSecured == WPA_802_1X_PORT_SECURED))
+ 				{
+				 	sprintf(msg+strlen(msg), "ApCli%d Connected AP : %02X:%02X:%02X:%02X:%02X:%02X   SSID:%s\n",ifIndex,
+				 						pEntry->Addr[0], pEntry->Addr[1], pEntry->Addr[2],
+				 						pEntry->Addr[3], pEntry->Addr[4], pEntry->Addr[5],
+				 						pAd->ApCfg.ApCliTab[ifIndex].Ssid);
+
+					bConnect=TRUE;
+ 				}
+ 		}
+
+		if (!bConnect)
+			 	sprintf(msg+strlen(msg), "ApCli%d Connected AP : Disconnect\n",ifIndex);
+
+ 	}
+ 	else
+ 	{
+
+		if (pAd->ApCfg.ApCliTab[ifIndex].ConnectState > APCLI_NOT_TRIGGER_CONNECT
+			&& pAd->ApCfg.ApCliTab[ifIndex].FailReason == 0)
+			sprintf(ChStr,"Connecting");
+		else if (pAd->ApCfg.ApCliTab[ifIndex].ConnectState == APCLI_NOT_TRIGGER_CONNECT
+			&& pAd->ApCfg.ApCliTab[ifIndex].FailReason == 0)
+			sprintf(ChStr,"Not trigger connect");
+		else if (pAd->ApCfg.ApCliTab[ifIndex].ConnectState == APCLI_NOT_TRIGGER_CONNECT
+			&& pAd->ApCfg.ApCliTab[ifIndex].FailReason != 0)
+		{
+			switch(pAd->ApCfg.ApCliTab[ifIndex].FailReason) {
+				case 1 :
+					sprintf(ChStr,"Probe timeout");
+					break;
+				case 2 :
+					sprintf(ChStr,"Auth fail");
+					break;
+				case 3 :
+					sprintf(ChStr,"Assoc fail");
+					break;
+				case 4 :
+					sprintf(ChStr,"4-way fail");
+					break;
+				case 5 :
+					sprintf(ChStr,"unknow");
+					break;
+			}
+
+		}
+
+
+		sprintf(msg+strlen(msg), "ApCli%d Connected AP : Disconnect reason = %s\n",ifIndex,ChStr);
 
+ 	}
+	sprintf(msg+strlen(msg), "=============================================================\n");
+	    wrq->u.data.length = strlen(msg);
+	    Status = copy_to_user(wrq->u.data.pointer, msg, wrq->u.data.length);
+
+	os_free_mem(NULL, msg);
+     	DBGPRINT(RT_DEBUG_TRACE, ("<==RTMPIoctlConnStatus\n"));
+ 	return;
+}
 /* 
     ==========================================================================
     Description:
@@ -11372,23 +11480,6 @@ VOID RTMPIoctlStatistics(RTMP_ADAPTER *p
 	sprintf(msg+strlen(msg), "\n");
 #endif /*TCSUPPORT_COMPILE*/
 
-/* 
- * Let "iwpriv ra0 stat" can print out Tx/Rx Packet and Byte count.
- * Therefore, we can parse them out in cfg_manager. --Trey */
-#ifdef BB_SOC
-	for (index = 0; index < pAd->ApCfg.BssidNum; index++){
-		rxPackets += (ULONG)pAd->ApCfg.MBSSID[index].RxCount;
-		txPackets += (ULONG)pAd->ApCfg.MBSSID[index].TxCount;
-		rxBytes += (ULONG)pAd->ApCfg.MBSSID[index].ReceivedByteCount;
-		txBytes += (ULONG)pAd->ApCfg.MBSSID[index].TransmittedByteCount;
-	}
-	sprintf(msg+strlen(msg), "Packets Received       = %lu\n", rxPackets);
-	sprintf(msg+strlen(msg), "Packets Sent           = %lu\n", txPackets);
-	sprintf(msg+strlen(msg), "Bytes Received         = %lu\n", rxBytes);
-	sprintf(msg+strlen(msg), "Bytes Sent             = %lu\n", txBytes);
-	sprintf(msg+strlen(msg), "\n");
-#endif
-
 #ifdef RTMP_EFUSE_SUPPORT
 	if (pAd->bUseEfuse == TRUE)
 	{
@@ -11744,6 +11835,9 @@ INT Set_ApCli_Bssid_Proc(
 		pAd->ApCfg.ApCliTab[ifIndex].CfgApCliBssid[5]));
 
 	pAd->ApCfg.ApCliTab[ifIndex].Enable = apcliEn;
+	pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_START_PROBE;
+	pAd->ApCfg.ApCliTab[ifIndex].FailReason = 0;
+	NdisGetSystemUpTime(&pAd->ApCfg.ApCliTab[ifIndex].LastTriggerTime);
 
 	return TRUE;
 }
@@ -15271,15 +15365,36 @@ INT RTMP_AP_IoctlHandle(
 		    break;
 
 #if defined (AP_SCAN_SUPPORT) || defined (CONFIG_STA_SUPPORT)
+		case CMD_RTPRIV_IOCTL_AP_SIOCSIWSCAN:
+		{
+			PNET_DEV pNetDev = (PNET_DEV)pData;
+			struct wifi_dev *wdev = RTMP_OS_NETDEV_GET_WDEV(pNetDev);
+
+			if (wdev->wdev_type == WDEV_TYPE_STA)
+				RTMPIoctlSetSiteSurvey(pAd,wrq);
+			else
+				return NDIS_STATUS_FAILURE;
+		}
+			break;
 		case CMD_RTPRIV_IOCTL_GSITESURVEY:
 			RTMPIoctlGetSiteSurvey(pAd,wrq);
 			break;
+		case CMD_RTPRIV_IOCTL_AP_SIOCGIWSCAN:
+			if (Data == INT_APCLI)
+			{
+				RtmpIoctl_rt_ioctl_giwscan(pAd, pData, Data);
+			}
+			else
+				return NDIS_STATUS_FAILURE;
+			break;
 #endif /* AP_SCAN_SUPPORT */
 
 		case CMD_RTPRIV_IOCTL_STATISTICS:
 			RTMPIoctlStatistics(pAd, wrq);
 			break;
-
+		case CMD_RTPRIV_IOCTL_CONNSTATUS:
+			RTMPIoctlConnstatus(pAd, wrq);
+			break;
 #ifdef WSC_AP_SUPPORT
 		case CMD_RTPRIV_IOCTL_WSC_PROFILE:
 		    RTMPIoctlWscProfile(pAd, wrq);
@@ -15534,8 +15649,46 @@ INT RTMP_AP_IoctlHandle(
 			RtmpHostapdSecuritySet(pAd, wrq);
 			break;
 #endif /* HOSTAPD_SUPPORT */
-		
 
+		case CMD_RTPRIV_IOCTL_AP_SIOCGIWENCODEEXT:
+			RtmpIoctl_rt_ioctl_giwencodeext(pAd, pData,Data);
+			break;
+		case CMD_RTPRIV_IOCTL_AP_SIOCGIWTXPOW:
+		{
+			UINT tmp = pAd->CommonCfg.TxPowerShow;
+			NdisCopyMemory(pData, &tmp, 4);
+			break;
+		}
+		case CMD_RTPRIV_IOCTL_AP_GET_PHYMODE:
+		{
+			UCHAR tmp = pAd->CommonCfg.PhyMode;
+			NdisCopyMemory(pData, &tmp, 1);
+			break;
+		}
+		case CMD_RTPRIV_IOCTL_AP_GET_SHORTGI:
+		{
+			UCHAR tmp = pAd->CommonCfg.RegTransmitSetting.field.ShortGI;
+			NdisCopyMemory(pData, &tmp, 1);
+			break;
+		}
+		case CMD_RTPRIV_IOCTL_AP_GET_BW:
+		{
+			UCHAR tmp = pAd->CommonCfg.RegTransmitSetting.field.BW;
+			NdisCopyMemory(pData, &tmp, 1);
+			break;
+		}
+		case CMD_RTPRIV_IOCTL_AP_GET_VHT_SHORTGI:
+		{
+			UCHAR tmp = pAd->CommonCfg.vht_sgi_80;
+			NdisCopyMemory(pData, &tmp, 1);
+			break;
+		}
+		case CMD_RTPRIV_IOCTL_AP_GET_VHT_BW:
+		{
+			UCHAR tmp = pAd->CommonCfg.BBPCurrentBW;
+			NdisCopyMemory(pData, &tmp, 1);
+			break;
+		}
 		default:
 			Status = RTMP_COM_IoctlHandle(pAd, wrq, cmd, subcmd, pData, Data);
 			break;
--- a/mt76x2/ap/ap_data.c
+++ b/mt76x2/ap/ap_data.c
@@ -1769,7 +1769,7 @@ VOID AP_AMPDU_Frame_Tx(RTMP_ADAPTER *pAd
 /* increment Tx counts and calculate Tx activity time */
 			if (IS_ENTRY_CLIENT(pMacEntry))
 			{
-				pMacEntry->TransmittedByteCount += pTxBlk->SrcBufLen;
+				pMacEntry->TransmittedByteCount.QuadPart += pTxBlk->SrcBufLen;
 				pMacEntry->TxCount++;
 			}
 #endif
@@ -1980,7 +1980,7 @@ VOID AP_AMPDU_Frame_Tx_Hdr_Trns(
 			/* increment Tx counts and calculate Tx activity time */
 			if (IS_ENTRY_CLIENT(pMacEntry))
 			{
-				pMacEntry->TransmittedByteCount += pTxBlk->SrcBufLen;
+				pMacEntry->TransmittedByteCount.QuadPart += pTxBlk->SrcBufLen;
 				pMacEntry->TxCount++;
 			}
 #endif
@@ -2249,7 +2249,7 @@ REPEATER_CLIENT_ENTRY *pReptEntry = NULL
 #ifdef MBSS_802_11_STATISTICS
 				if (IS_ENTRY_CLIENT(pTxBlk->pMacEntry))
 				{
-					pTxBlk->pMacEntry->TransmittedByteCount += totalMPDUSize;
+					pTxBlk->pMacEntry->TransmittedByteCount.QuadPart += totalMPDUSize;
 					pTxBlk->pMacEntry->TxCount++;
 				}
 #endif
@@ -2651,7 +2651,7 @@ VOID AP_Legacy_Frame_Tx(RTMP_ADAPTER *pA
 #ifdef MBSS_802_11_STATISTICS
 			if (pMacEntry && IS_ENTRY_CLIENT(pTxBlk->pMacEntry))
 			{
-				pTxBlk->pMacEntry->TransmittedByteCount += pTxBlk->SrcBufLen;
+				pTxBlk->pMacEntry->TransmittedByteCount.QuadPart += pTxBlk->SrcBufLen;
 				pTxBlk->pMacEntry->TxCount++;
 			}
 #endif
@@ -2837,7 +2837,7 @@ VOID AP_Legacy_Frame_Tx_Hdr_Trns(
 			/* increment Tx counts and calculate Tx activity time */
 			if (pMacEntry && IS_ENTRY_CLIENT(pMacEntry))
 			{
-				pMacEntry->TransmittedByteCount += pTxBlk->SrcBufLen;
+				pMacEntry->TransmittedByteCount.QuadPart += pTxBlk->SrcBufLen;
 				pMacEntry->TxCount++;
 			}
 #endif
@@ -3163,7 +3163,7 @@ VOID AP_Fragment_Frame_Tx(RTMP_ADAPTER *
 #ifdef MBSS_802_11_STATISTICS
 			if (IS_ENTRY_CLIENT(pTxBlk->pMacEntry))
 			{
-				pTxBlk->pMacEntry->TransmittedByteCount += pTxBlk->SrcBufLen;
+				pTxBlk->pMacEntry->TransmittedByteCount.QuadPart += pTxBlk->SrcBufLen;
 				pTxBlk->pMacEntry->TxCount++;
 			}
 #endif
@@ -3548,7 +3548,7 @@ VOID AP_ARalink_Frame_Tx(RTMP_ADAPTER *p
 #ifdef MBSS_802_11_STATISTICS
 				if (IS_ENTRY_CLIENT(pTxBlk->pMacEntry))
 				{
-					pTxBlk->pMacEntry->TransmittedByteCount += pTxBlk->SrcBufLen;
+					pTxBlk->pMacEntry->TransmittedByteCount.QuadPart += pTxBlk->SrcBufLen;
 					pTxBlk->pMacEntry->TxCount++;
 				}
 #endif
@@ -5043,7 +5043,7 @@ VOID APHandleRxDataFrame(RTMP_ADAPTER *p
 					if (pMbss != NULL)
 					{
 						pMbss->ReceivedByteCount.QuadPart += pRxBlk->MPDUtotalByteCnt;
-						pMbss->RxCount ++;
+						pMbss->RxCount++;
 					}
 				}
 				RX_BLK_SET_FLAG(pRxBlk, fRX_WDS);
@@ -5219,7 +5219,7 @@ VOID APHandleRxDataFrame(RTMP_ADAPTER *p
 				pApCliEntry->ApCliCounter.MulticastReceivedFrameCount++;
 #endif /* STATS_COUNT_SUPPORT */
 				/* Process the received broadcast frame for AP-Client. */
-				if (!ApCliHandleRxBroadcastFrame(pAd, pRxBlk, pEntry, FromWhichBSSID))			
+				if (!ApCliHandleRxBroadcastFrame(pAd, pRxBlk, pEntry, FromWhichBSSID))
 				{
 					RELEASE_NDIS_PACKET(pAd, pRxPacket, NDIS_STATUS_FAILURE);
 				}
@@ -5270,7 +5270,7 @@ VOID APHandleRxDataFrame(RTMP_ADAPTER *p
 					pMbss->ucPktsRx++;
 				if(pEntry->Sst == SST_ASSOC)
 				{
-					pEntry->ReceivedByteCount += pRxBlk->MPDUtotalByteCnt;
+					pEntry->ReceivedByteCount.QuadPart += pRxBlk->MPDUtotalByteCnt;
 					pEntry->RxCount++;
 				}
 				{
@@ -5675,7 +5675,7 @@ if (0 /*!(pRxInfo->Mcast || pRxInfo->Bca
 					if (pMbss != NULL)
 					{
 						pMbss->ReceivedByteCount.QuadPart += pRxBlk->MPDUtotalByteCnt;
-						pMbss->RxCount ++;
+						pMbss->RxCount++;
 					}
 				}
 				RX_BLK_SET_FLAG(pRxBlk, fRX_WDS);
@@ -5901,7 +5901,7 @@ if (0 /*!(pRxInfo->Mcast || pRxInfo->Bca
 					pMbss->ucPktsRx++;
 				if (pEntry->Sst == SST_ASSOC)
 				{
-					pEntry->ReceivedByteCount += pRxBlk->MPDUtotalByteCnt;
+					pEntry->ReceivedByteCount.QuadPart += pRxBlk->MPDUtotalByteCnt;
 					pEntry->RxCount++;
 				}
 				{
--- a/mt76x2/ap/ap_mlme.c
+++ b/mt76x2/ap/ap_mlme.c
@@ -284,6 +284,34 @@ VOID APMlmePeriodicExec(
 				/* update channel quality for Roaming and UI LinkQuality display */
 				MlmeCalculateChannelQuality(pAd,
 					&pAd->MacTab.Content[pApCliEntry->MacTabWCID], Now32);
+			//woody
+				if (pAd->ApCfg.ApCliTab[loop].ConnectState > APCLI_NOT_TRIGGER_CONNECT)
+				{
+					if (RTMP_TIME_AFTER(Now32, pAd->ApCfg.ApCliTab[loop].LastTriggerTime + (10*OS_HZ)))
+					{
+						switch(pAd->ApCfg.ApCliTab[loop].ConnectState)
+						{
+							case APCLI_START_PROBE:
+								pAd->ApCfg.ApCliTab[loop].FailReason=1;
+								break;
+							case APCLI_START_AUTH:
+								pAd->ApCfg.ApCliTab[loop].FailReason=2;
+								break;
+							case APCLI_START_ASSOC:
+								pAd->ApCfg.ApCliTab[loop].FailReason=3;
+								break;
+							case APCLI_START_4WAY:
+								pAd->ApCfg.ApCliTab[loop].FailReason=4;
+								break;
+							default:
+								pAd->ApCfg.ApCliTab[loop].FailReason=5;
+						}
+
+						pAd->ApCfg.ApCliTab[loop].ConnectState = APCLI_NOT_TRIGGER_CONNECT;
+					}
+					else
+						pAd->ApCfg.ApCliTab[loop].FailReason=0;
+				}
 				/* WPA MIC error should block association attempt for 60 seconds*/
 #ifdef APCLI_CERT_SUPPORT
 				if (pAd->bApCliCertTest == TRUE)
--- a/mt76x2/ap/ap_wds.c
+++ b/mt76x2/ap/ap_wds.c
@@ -1529,7 +1529,7 @@ VOID WDS_Remove(RTMP_ADAPTER *pAd)
 	{
 		wdev = &pAd->WdsTab.WdsEntry[index].wdev;
 		if (wdev->if_dev)
-	    {
+		{
 			RtmpOSNetDevProtect(1);
 			RtmpOSNetDevDetach(wdev->if_dev);
 			RtmpOSNetDevProtect(0);
@@ -1555,7 +1555,7 @@ BOOLEAN WDS_StatsGet(RTMP_ADAPTER *pAd,
 			break;
 		}
 	}
-		
+
 	if(index >= MAX_WDS_ENTRY)
 	{
 		DBGPRINT(RT_DEBUG_ERROR, ("%s(): can not find wds I/F\n", __FUNCTION__));
--- a/mt76x2/ap/apcli_assoc.c
+++ b/mt76x2/ap/apcli_assoc.c
@@ -651,6 +651,7 @@ static VOID ApCliMlmeAssocReqAction(
 #endif /* MAC_REPEATER_SUPPORT */
 			RTMPSetTimer(&apcli_entry->MlmeAux.ApCliAssocTimer, Timeout);
 		*pCurrState = APCLI_ASSOC_WAIT_RSP;
+		pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_START_ASSOC;
 	} 
 	else
 	{
--- a/mt76x2/ap/apcli_auth.c
+++ b/mt76x2/ap/apcli_auth.c
@@ -220,6 +220,7 @@ static VOID ApCliMlmeAuthReqAction(
 #endif /* MAC_REPEATER_SUPPORT */
 		RTMPSetTimer(&pAd->ApCfg.ApCliTab[ifIndex].MlmeAux.ApCliAuthTimer, AUTH_TIMEOUT);
 		*pCurrState = APCLI_AUTH_WAIT_SEQ2;
+		pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_START_AUTH;
 	} 
 	else
 	{
--- a/mt76x2/ap/apcli_ctrl.c
+++ b/mt76x2/ap/apcli_ctrl.c
@@ -944,8 +944,9 @@ static VOID ApCliCtrlAuthRspAction(
 		//TrialCh == 0 means trial has not been triggered.
 		if (pApCliEntry->TrialCh == 0) {
 #endif /* APCLI_CONNECTION_TRIAL */
-		MlmeEnqueue(pAd, APCLI_ASSOC_STATE_MACHINE, APCLI_MT2_MLME_ASSOC_REQ,
-			sizeof(MLME_ASSOC_REQ_STRUCT), &AssocReq, ifIndex);
+			pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_RECE_AUTH;
+			MlmeEnqueue(pAd, APCLI_ASSOC_STATE_MACHINE, APCLI_MT2_MLME_ASSOC_REQ,
+				sizeof(MLME_ASSOC_REQ_STRUCT), &AssocReq, ifIndex);
 #ifdef APCLI_CONNECTION_TRIAL
 		}
 #endif /* APCLI_CONNECTION_TRIAL */
@@ -1254,6 +1255,7 @@ static VOID ApCliCtrlAssocRspAction(
 		if (ApCliLinkUp(pAd, ifIndex))
 		{
 			*pCurrState = APCLI_CTRL_CONNECTED;
+			pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_RECE_ASSOC;
 #ifdef RT_CFG80211_P2P_CONCURRENT_DEVICE
 			CFG80211_checkScanTable(pAd);
 			RT_CFG80211_P2P_CLI_CONN_RESULT_INFORM(pAd, pApCliEntry->MlmeAux.Bssid,
--- a/mt76x2/chips/mt76x2.c
+++ b/mt76x2/chips/mt76x2.c
@@ -1004,6 +1004,7 @@ void mt76x2_tx_pwr_gain(RTMP_ADAPTER *ad
 
 static void mt76x2_switch_channel(RTMP_ADAPTER *ad, u8 channel, BOOLEAN scan)
 {
+	RTMP_CHIP_CAP *cap = &ad->chipCap;
 	unsigned int latch_band, band, bw, tx_rx_setting;
 	UINT32 i, value, value1, restore_value, loop = 0;
 	UINT16 e2p_value;
@@ -1189,7 +1190,7 @@ static void mt76x2_switch_channel(RTMP_A
 
 	/* per-rate power delta */
 	mt76x2_adjust_per_rate_pwr_delta(ad, channel, 0);
-			
+	ad->CommonCfg.TxPowerShow= 16 + (cap->tx_pwr_a_band_ofdm_48_54);
 	andes_switch_channel(ad, channel, scan, bw, tx_rx_setting, bbp_ch_idx);
 
 	eLNA_gain_from_e2p = ((ad->ALNAGain2 & 0xFF) << 24) | ((ad->ALNAGain1 & 0xFF) << 16) | ((ad->ALNAGain0 & 0xFF) << 8) | (ad->BLNAGain & 0xFF);
@@ -3634,6 +3635,8 @@ void percentage_delta_pwr(RTMP_ADAPTER *
 		mac_drop_pwr -= 12;
 	}
 
+	ad->CommonCfg.TxPowerShow += mac_drop_pwr;
+
 	RTMP_IO_READ32(ad, TX_ALC_CFG_0, &mac_val);
 	tx_alc_ch_init_0 = (mac_val & 0x3F) + mac_drop_pwr*2;
 	if (tx_alc_ch_init_0 <= 0)
--- a/mt76x2/chips/rt6352.c
+++ b/mt76x2/chips/rt6352.c
@@ -4743,6 +4743,7 @@ VOID RT6352_AsicAdjustTxPower(
 	CHAR		DeltaPowerByBbpR1 = 0; 
 	CHAR		TotalDeltaPower = 0; /* (non-positive number) including the transmit power controlled by the MAC and the BBP R1 */
 	CONFIGURATION_OF_TX_POWER_CONTROL_OVER_MAC CfgOfTxPwrCtrlOverMAC = {0};	
+	ULONG	ExtraPwrOverMAC = 0;
 
 
 #ifdef CONFIG_STA_SUPPORT
@@ -4879,6 +4880,9 @@ VOID RT6352_AsicAdjustTxPower(
 #endif /* RTMP_TEMPERATURE_CALIBRATION */
 		}
 
+		RTMP_IO_READ32(pAd, 0x1318, &ExtraPwrOverMAC);
+		pAd->CommonCfg.TxPowerShow = 16  + (TotalDeltaPower/2)+((ExtraPwrOverMAC & 0x0000FF00) >> 8);
+
 #ifdef SINGLE_SKU_V2
 		if (pAd->bOpenFileSuccess)
 		return;
--- a/mt76x2/common/cmm_cfg.c
+++ b/mt76x2/common/cmm_cfg.c
@@ -28,10 +28,770 @@
 
 #include "rt_config.h"
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,27)
+#define IWE_STREAM_ADD_EVENT(_A, _B, _C, _D, _E)                iwe_stream_add_event(_A, _B, _C, _D, _E)
+#define IWE_STREAM_ADD_POINT(_A, _B, _C, _D, _E)                iwe_stream_add_point(_A, _B, _C, _D, _E)
+#define IWE_STREAM_ADD_VALUE(_A, _B, _C, _D, _E, _F)    iwe_stream_add_value(_A, _B, _C, _D, _E, _F)
+#else
+#define IWE_STREAM_ADD_EVENT(_A, _B, _C, _D, _E)                iwe_stream_add_event(_B, _C, _D, _E)
+#define IWE_STREAM_ADD_POINT(_A, _B, _C, _D, _E)                iwe_stream_add_point(_B, _C, _D, _E)
+#define IWE_STREAM_ADD_VALUE(_A, _B, _C, _D, _E, _F)    iwe_stream_add_value(_B, _C, _D, _E, _F)
+#endif
+
 static BOOLEAN RT_isLegalCmdBeforeInfUp(
        IN PSTRING SetCmd);
 
 
+static void cal_quality(
+        IN RT_CMD_STA_IOCTL_BSS *pSignal,
+        IN BSS_ENTRY *pBssEntry)
+{
+        memcpy(pSignal->Bssid, pBssEntry->Bssid, MAC_ADDR_LEN);
+
+        /* Normalize Rssi */
+        if (pBssEntry->Rssi >= -50)
+        pSignal->ChannelQuality = 100;
+        else if (pBssEntry->Rssi >= -80) /* between -50 ~ -80dbm */
+                pSignal->ChannelQuality = (__u8)(24 + ((pBssEntry->Rssi + 80) * 26)/10);
+        else if (pBssEntry->Rssi >= -90)   /* between -80 ~ -90dbm */
+        pSignal->ChannelQuality = (__u8)((pBssEntry->Rssi + 90) * 26)/10;
+        else
+                pSignal->ChannelQuality = 0;
+
+    pSignal->Rssi = (__u8)(pBssEntry->Rssi);
+
+    if (pBssEntry->Rssi >= -70)
+                pSignal->Noise = -92;
+        else
+                pSignal->Noise = pBssEntry->Rssi - pBssEntry->MinSNR;
+}
+
+
+static void set_quality(
+                        struct iw_quality *iq,
+                        RT_CMD_STA_IOCTL_BSS *pBss)
+{
+        iq->qual = pBss->ChannelQuality;
+        iq->level = (__u8)(pBss->Rssi);
+        iq->noise = pBss->Noise;
+
+
+        iq->updated = 1;     /* Flags to know if updated */
+
+#if WIRELESS_EXT >= 17
+        iq->updated = IW_QUAL_QUAL_UPDATED | IW_QUAL_LEVEL_UPDATED | IW_QUAL_NOISE_UPDATED;
+#endif
+
+#if WIRELESS_EXT >= 19
+        iq->updated |= IW_QUAL_DBM;     /* Level + Noise are dBm */
+#endif
+}
+
+INT
+RtmpIoctl_rt_ioctl_giwscan(
+        IN      RTMP_ADAPTER                    *pAd,
+        IN      VOID                                    *pData,
+        IN      ULONG                                   Data)
+{
+
+        RT_CMD_STA_IOCTL_SCAN_TABLE *pIoctlScan = (RT_CMD_STA_IOCTL_SCAN_TABLE *)pData;
+        RT_CMD_STA_IOCTL_BSS_TABLE *pBssTable;
+        BSS_ENTRY *pBssEntry;
+        UINT32 IdBss;
+
+
+        pIoctlScan->BssNr = 0;
+
+#ifdef MESH_SUPPORT
+        if(pIoctlScan->priv_flags == INT_MESH)
+        {
+                DBGPRINT(RT_DEBUG_TRACE, ("Mesh do not support rt_ioctl_giwscan \n"));
+                        return NDIS_STATUS_FAILURE;
+        }
+
+        if (pAd->MeshTab.MeshOnly == TRUE)
+                return NDIS_STATUS_SUCCESS;
+#endif /* MESH_SUPPORT */
+
+#ifdef WPA_SUPPLICANT_SUPPORT
+        if ((pAd->StaCfg.wpa_supplicant_info.WpaSupplicantUP & 0x7F) == WPA_SUPPLICANT_ENABLE)
+        {
+                pAd->StaCfg.wpa_supplicant_info.WpaSupplicantScanCount = 0;
+        }
+#endif /* WPA_SUPPLICANT_SUPPORT */
+
+        pIoctlScan->BssNr = pAd->ScanTab.BssNr;
+        if (pIoctlScan->BssNr == 0)
+                return NDIS_STATUS_SUCCESS;
+
+        os_alloc_mem(NULL, (UCHAR **)&(pIoctlScan->pBssTable),
+                                pAd->ScanTab.BssNr * sizeof(RT_CMD_STA_IOCTL_BSS_TABLE));
+        if (pIoctlScan->pBssTable == NULL)
+        {
+                DBGPRINT(RT_DEBUG_ERROR, ("Allocate memory fail!\n"));
+                return NDIS_STATUS_FAILURE;
+        }
+
+        for(IdBss=0; IdBss<pAd->ScanTab.BssNr; IdBss++)
+        {
+                HT_CAP_INFO capInfo = pAd->ScanTab.BssEntry[IdBss].HtCapability.HtCapInfo;
+
+                pBssTable = pIoctlScan->pBssTable + IdBss;
+                pBssEntry = &pAd->ScanTab.BssEntry[IdBss];
+
+                memcpy(pBssTable->Bssid, pBssEntry->Bssid, ETH_ALEN);
+                pBssTable->Channel = pBssEntry->Channel;
+                pBssTable->BssType = pBssEntry->BssType;
+                pBssTable->HtCapabilityLen = pBssEntry->HtCapabilityLen;
+                memcpy(pBssTable->SupRate, pBssEntry->SupRate, 12);
+                pBssTable->SupRateLen = pBssEntry->SupRateLen;
+                memcpy(pBssTable->ExtRate, pBssEntry->ExtRate, 12);
+                pBssTable->ExtRateLen = pBssEntry->ExtRateLen;
+                pBssTable->SsidLen = pBssEntry->SsidLen;
+                memcpy(pBssTable->Ssid, pBssEntry->Ssid, 32);
+                pBssTable->CapabilityInfo = pBssEntry->CapabilityInfo;
+                pBssTable->ChannelWidth = capInfo.ChannelWidth;
+                pBssTable->ShortGIfor40 = capInfo.ShortGIfor40;
+                pBssTable->ShortGIfor20 = capInfo.ShortGIfor20;
+                pBssTable->MCSSet = pBssEntry->HtCapability.MCSSet[1];
+                pBssTable->WpaIeLen = pBssEntry->WpaIE.IELen;
+                pBssTable->pWpaIe = pBssEntry->WpaIE.IE;
+                pBssTable->RsnIeLen = pBssEntry->RsnIE.IELen;
+                pBssTable->pRsnIe = pBssEntry->RsnIE.IE;
+#ifdef CONFIG_STA_SUPPORT
+                pBssTable->WpsIeLen = pBssEntry->WpsIE.IELen;
+                pBssTable->pWpsIe = pBssEntry->WpsIE.IE;
+#endif /* CONFIG_STA_SUPPORT */
+                pBssTable->VHTCapabilityLen = pBssEntry->vht_cap_len;
+                pBssTable->FlgIsPrivacyOn = CAP_IS_PRIVACY_ON(pBssEntry->CapabilityInfo);
+                cal_quality(&pBssTable->Signal, pBssEntry);
+        }
+
+        memcpy(pIoctlScan->MainSharedKey[0], pAd->SharedKey[BSS0][0].Key, 16);
+        memcpy(pIoctlScan->MainSharedKey[1], pAd->SharedKey[BSS0][1].Key, 16);
+        memcpy(pIoctlScan->MainSharedKey[2], pAd->SharedKey[BSS0][2].Key, 16);
+        memcpy(pIoctlScan->MainSharedKey[3], pAd->SharedKey[BSS0][3].Key, 16);
+
+        return NDIS_STATUS_SUCCESS;
+}
+
+int rt_ioctl_giwscan(struct net_device *dev,
+			struct iw_request_info *info,
+			struct iw_point *data, char *extra)
+{
+	VOID *pAd = NULL;
+	int i=0, status = 0;
+	PSTRING current_ev = extra, previous_ev = extra;
+	PSTRING end_buf;
+	PSTRING current_val;
+	STRING custom[MAX_CUSTOM_LEN] = {0};
+#ifndef IWEVGENIE
+	unsigned char idx;
+#endif /* IWEVGENIE */
+	struct iw_event iwe;
+	RT_CMD_STA_IOCTL_SCAN_TABLE IoctlScan, *pIoctlScan = &IoctlScan;
+
+	GET_PAD_FROM_NET_DEV(pAd, dev);
+
+	/*check if the interface is down */
+/*    if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE)) */
+/* because android will set scan and get scan when interface down */
+#ifndef ANDROID_SUPPORT
+	if (RTMP_DRIVER_IOCTL_SANITY_CHECK(pAd, NULL) != NDIS_STATUS_SUCCESS)
+    {
+       	DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
+        return -ENETDOWN;
+	}
+#endif /* ANDROID_SUPPORT */
+
+
+	pIoctlScan->priv_flags = RT_DEV_PRIV_FLAGS_GET(dev);
+	pIoctlScan->pBssTable = NULL;
+
+#ifdef CONFIG_STA_SUPPORT
+	if (RTMP_STA_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_STA_SIOCGIWSCAN, 0,
+							pIoctlScan, 0,
+							RT_DEV_PRIV_FLAGS_GET(dev)) != NDIS_STATUS_SUCCESS)
+#else
+	if (ScanRunning(pAd))
+	{
+		status = -EAGAIN;
+		goto go_out;
+	}
+	if (RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_AP_SIOCGIWSCAN, 0,
+                                                        pIoctlScan,
+                                                        RT_DEV_PRIV_FLAGS_GET(dev)) != NDIS_STATUS_SUCCESS)
+#endif
+	{
+		status = -EINVAL;
+		goto go_out;
+	}
+
+	if (pIoctlScan->BssNr == 0)
+	{
+		data->length = 0;
+		status = 0;
+		goto go_out;
+	}
+
+#if WIRELESS_EXT >= 17
+    if (data->length > 0)
+        end_buf = extra + data->length;
+    else
+        end_buf = extra + IW_SCAN_MAX_DATA;
+#else
+    end_buf = extra + IW_SCAN_MAX_DATA;
+#endif
+
+	for (i = 0; i < pIoctlScan->BssNr; i++)
+	{
+		if (current_ev >= end_buf)
+        {
+#if WIRELESS_EXT >= 17
+			status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*MAC address */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWAP;
+		iwe.u.ap_addr.sa_family = ARPHRD_ETHER;
+				memcpy(iwe.u.ap_addr.sa_data, &pIoctlScan->pBssTable[i].Bssid, ETH_ALEN);
+
+        previous_ev = current_ev;
+		current_ev = IWE_STREAM_ADD_EVENT(info, current_ev,end_buf, &iwe, IW_EV_ADDR_LEN);
+        if (current_ev == previous_ev)
+        {
+#if WIRELESS_EXT >= 17
+            status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*
+		Protocol:
+			it will show scanned AP's WirelessMode .
+			it might be
+					802.11a
+					802.11a/n
+					802.11g/n
+					802.11b/g/n
+					802.11g
+					802.11b/g
+		*/
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWNAME;
+
+
+	{
+		RT_CMD_STA_IOCTL_BSS_TABLE *pBssEntry=&pIoctlScan->pBssTable[i];
+		BOOLEAN isGonly=FALSE;
+		int rateCnt=0;
+
+		if (pBssEntry->Channel>14)
+		{
+			if (pBssEntry->HtCapabilityLen!=0)
+				strcpy(iwe.u.name,"802.11a/n");
+			else
+				strcpy(iwe.u.name,"802.11a");
+		}
+		else
+		{
+			/*
+				if one of non B mode rate is set supported rate . it mean G only.
+			*/
+			for (rateCnt=0;rateCnt<pBssEntry->SupRateLen;rateCnt++)
+			{
+				/*
+					6Mbps(140) 9Mbps(146) and >=12Mbps(152) are supported rate , it mean G only.
+				*/
+				if (pBssEntry->SupRate[rateCnt]==140 || pBssEntry->SupRate[rateCnt]==146 || pBssEntry->SupRate[rateCnt]>=152)
+					isGonly=TRUE;
+			}
+
+			for (rateCnt=0;rateCnt<pBssEntry->ExtRateLen;rateCnt++)
+			{
+				if (pBssEntry->ExtRate[rateCnt]==140 || pBssEntry->ExtRate[rateCnt]==146 || pBssEntry->ExtRate[rateCnt]>=152)
+					isGonly=TRUE;
+			}
+
+
+			if (pBssEntry->HtCapabilityLen!=0)
+			{
+				if (isGonly==TRUE)
+					strcpy(iwe.u.name,"802.11g/n");
+				else
+					strcpy(iwe.u.name,"802.11b/g/n");
+			}
+			else
+			{
+				if (isGonly==TRUE)
+					strcpy(iwe.u.name,"802.11g");
+				else
+				{
+					if (pBssEntry->SupRateLen==4 && pBssEntry->ExtRateLen==0)
+						strcpy(iwe.u.name,"802.11b");
+					else
+						strcpy(iwe.u.name,"802.11b/g");
+				}
+			}
+		}
+	}
+
+		previous_ev = current_ev;
+		current_ev = IWE_STREAM_ADD_EVENT(info, current_ev,end_buf, &iwe, IW_EV_ADDR_LEN);
+		if (current_ev == previous_ev)
+		{
+#if WIRELESS_EXT >= 17
+	   		status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+		}
+
+		/*ESSID */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWESSID;
+		iwe.u.data.length = pIoctlScan->pBssTable[i].SsidLen;
+		iwe.u.data.flags = 1;
+
+        previous_ev = current_ev;
+	current_ev = IWE_STREAM_ADD_POINT(info, current_ev,end_buf, &iwe, (PSTRING) pIoctlScan->pBssTable[i].Ssid);
+        if (current_ev == previous_ev)
+        {
+#if WIRELESS_EXT >= 17
+            status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*Network Type */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWMODE;
+		if (pIoctlScan->pBssTable[i].BssType == Ndis802_11IBSS)
+		{
+			iwe.u.mode = IW_MODE_ADHOC;
+		}
+		else if (pIoctlScan->pBssTable[i].BssType == Ndis802_11Infrastructure)
+		{
+			iwe.u.mode = IW_MODE_INFRA;
+		}
+		else
+		{
+			iwe.u.mode = IW_MODE_AUTO;
+		}
+		iwe.len = IW_EV_UINT_LEN;
+
+        previous_ev = current_ev;
+		current_ev = IWE_STREAM_ADD_EVENT(info, current_ev, end_buf, &iwe,  IW_EV_UINT_LEN);
+        if (current_ev == previous_ev)
+        {
+#if WIRELESS_EXT >= 17
+            status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*Channel and Frequency */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWFREQ;
+		{
+			UCHAR ch = pIoctlScan->pBssTable[i].Channel;
+			ULONG	m = 0;
+#ifdef CONFIG_STA_SUPPORT
+			RTMP_STA_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_CHID_2_FREQ, 0,
+								(VOID *)&m, ch, RT_DEV_PRIV_FLAGS_GET(dev));
+#else
+			MAP_CHANNEL_ID_TO_KHZ(ch, m);
+#endif /* CONFIG_STA_SUPPORT */
+			iwe.u.freq.m = m * 100;
+			iwe.u.freq.e = 1;
+			iwe.u.freq.i = 0;
+			previous_ev = current_ev;
+			current_ev = IWE_STREAM_ADD_EVENT(info, current_ev,end_buf, &iwe, IW_EV_FREQ_LEN);
+        		if (current_ev == previous_ev)
+	        	{
+#if WIRELESS_EXT >= 17
+	            		status = -E2BIG;
+				goto go_out;
+#else
+				break;
+#endif
+			}
+		}
+
+	/*Add quality statistics */
+        /*================================ */
+        memset(&iwe, 0, sizeof(iwe));
+    	iwe.cmd = IWEVQUAL;
+    	iwe.u.qual.level = 0;
+    	iwe.u.qual.noise = 0;
+	set_quality(&iwe.u.qual, &pIoctlScan->pBssTable[i].Signal);
+    	current_ev = IWE_STREAM_ADD_EVENT(info, current_ev, end_buf, &iwe, IW_EV_QUAL_LEN);
+	if (current_ev == previous_ev)
+		{
+#if WIRELESS_EXT >= 17
+	            status = -E2BIG;
+				goto go_out;
+#else
+			break;
+#endif
+		}
+		/*Encyption key */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWENCODE;
+		if (pIoctlScan->pBssTable[i].FlgIsPrivacyOn)
+			iwe.u.data.flags =IW_ENCODE_ENABLED | IW_ENCODE_NOKEY;
+		else
+			iwe.u.data.flags = IW_ENCODE_DISABLED;
+
+        previous_ev = current_ev;
+        current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf,&iwe, (char *)pIoctlScan->MainSharedKey[(iwe.u.data.flags & IW_ENCODE_INDEX)]);
+        if (current_ev == previous_ev)
+        {
+#if WIRELESS_EXT >= 17
+            status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*Bit Rate */
+		/*================================ */
+		if (pIoctlScan->pBssTable[i].SupRateLen)
+        {
+            UCHAR tmpRate = pIoctlScan->pBssTable[i].SupRate[pIoctlScan->pBssTable[i].SupRateLen-1];
+			memset(&iwe, 0, sizeof(iwe));
+			iwe.cmd = SIOCGIWRATE;
+    		current_val = current_ev + IW_EV_LCP_LEN;
+            if (tmpRate == 0x82)
+                iwe.u.bitrate.value =  1 * 1000000;
+            else if (tmpRate == 0x84)
+                iwe.u.bitrate.value =  2 * 1000000;
+            else if (tmpRate == 0x8B)
+                iwe.u.bitrate.value =  5.5 * 1000000;
+            else if (tmpRate == 0x96)
+                iwe.u.bitrate.value =  11 * 1000000;
+            else
+    		    iwe.u.bitrate.value =  (tmpRate/2) * 1000000;
+
+			if (pIoctlScan->pBssTable[i].ExtRateLen)
+			{
+				UCHAR tmpSupRate =(pIoctlScan->pBssTable[i].SupRate[pIoctlScan->pBssTable[i].SupRateLen-1]& 0x7f);
+				UCHAR tmpExtRate =(pIoctlScan->pBssTable[i].ExtRate[pIoctlScan->pBssTable[i].ExtRateLen-1]& 0x7f);
+				iwe.u.bitrate.value = (tmpSupRate > tmpExtRate) ? (tmpSupRate)*500000 : (tmpExtRate)*500000;
+			}
+
+			if (tmpRate == 0x6c && pIoctlScan->pBssTable[i].HtCapabilityLen > 0)
+			{
+
+/*				HT_CAP_INFO capInfo = pIoctlScan->pBssTable[i].HtCapability.HtCapInfo; */
+				int shortGI = pIoctlScan->pBssTable[i].ChannelWidth ? pIoctlScan->pBssTable[i].ShortGIfor40 : pIoctlScan->pBssTable[i].ShortGIfor20;
+				int maxMCS = pIoctlScan->pBssTable[i].MCSSet ?  15 : 7;
+				//int maxMCS = 7;
+				#if 1
+				int rate_count = RT_RateSize/sizeof(__s32);
+				int rate_index = 12 + ((UCHAR)pIoctlScan->pBssTable[i].ChannelWidth * 24) +
+								((UCHAR)shortGI *48) + ((UCHAR)maxMCS);
+				if (rate_index < 0)
+					rate_index = 0;
+				if (rate_index >= rate_count)
+					rate_index = rate_count-1;
+				iwe.u.bitrate.value	=  ralinkrate[rate_index] * 500000;
+				#else
+				if(pIoctlScan->pBssTable[i].HtCapabilityLen > 0 && pIoctlScan->pBssTable[i].VHTCapabilityLen > 0)
+					RtmpDrvMaxRateGet(pAd, MODE_VHT, shortGI,
+                      pIoctlScan->pBssTable[i].ChannelWidth, maxMCS,
+                      newRateGetAntenna(maxMCS), &iwe.u.bitrate.value);
+				else if (pIoctlScan->pBssTable[i].HtCapabilityLen > 0)
+					RtmpDrvMaxRateGet(pAd, MODE_HTMIX, shortGI,
+                      pIoctlScan->pBssTable[i].ChannelWidth, maxMCS,
+                      newRateGetAntenna(maxMCS), &iwe.u.bitrate.value);
+				#endif
+			}
+
+			iwe.u.bitrate.disabled = 0;
+			current_val = IWE_STREAM_ADD_VALUE(info, current_ev,
+				current_val, end_buf, &iwe,
+    			IW_EV_PARAM_LEN);
+
+        	if((current_val-current_ev)>IW_EV_LCP_LEN)
+            	current_ev = current_val;
+        	else
+        	{
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+#ifdef IWEVGENIE
+        /*WPA IE */
+		if (pIoctlScan->pBssTable[i].WpaIeLen > 0)
+        {
+			memset(&iwe, 0, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+			memcpy(custom, &(pIoctlScan->pBssTable[i].pWpaIe[0]),
+						   pIoctlScan->pBssTable[i].WpaIeLen);
+			iwe.cmd = IWEVGENIE;
+			iwe.u.data.length = pIoctlScan->pBssTable[i].WpaIeLen;
+			current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe, custom);
+			if (current_ev == previous_ev)
+			{
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+		}
+		}
+
+		/*WPA2 IE */
+        if (pIoctlScan->pBssTable[i].RsnIeLen > 0)
+        {
+        	memset(&iwe, 0, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+			memcpy(custom, &(pIoctlScan->pBssTable[i].pRsnIe[0]),
+						   pIoctlScan->pBssTable[i].RsnIeLen);
+			iwe.cmd = IWEVGENIE;
+			iwe.u.data.length = pIoctlScan->pBssTable[i].RsnIeLen;
+			current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe, custom);
+			if (current_ev == previous_ev)
+			{
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+#ifdef CONFIG_STA_SUPPORT
+		/*WPS IE */
+		if (pIoctlScan->pBssTable[i].WpsIeLen > 0)
+        {
+        	memset(&iwe, 0, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+			memcpy(custom, &(pIoctlScan->pBssTable[i].pWpsIe[0]),
+						   pIoctlScan->pBssTable[i].WpsIeLen);
+			iwe.cmd = IWEVGENIE;
+			iwe.u.data.length = pIoctlScan->pBssTable[i].WpsIeLen;
+			current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe, custom);
+			if (current_ev == previous_ev)
+			{
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+#endif
+#else
+        /*WPA IE */
+		/*================================ */
+        if (pIoctlScan->pBssTable[i].WpaIeLen > 0)
+        {
+    		NdisZeroMemory(&iwe, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+    		iwe.cmd = IWEVCUSTOM;
+            iwe.u.data.length = (pIoctlScan->pBssTable[i].WpaIeLen * 2) + 7;
+            NdisMoveMemory(custom, "wpa_ie=", 7);
+            for (idx = 0; idx < pIoctlScan->pBssTable[i].WpaIeLen; idx++)
+                sprintf(custom, "%s%02x", custom, pIoctlScan->pBssTable[i].pWpaIe[idx]);
+            previous_ev = current_ev;
+    		current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe,  custom);
+            if (current_ev == previous_ev)
+            {
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+        /*WPA2 IE */
+        if (pIoctlScan->pBssTable[i].RsnIeLen > 0)
+        {
+    		NdisZeroMemory(&iwe, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+    		iwe.cmd = IWEVCUSTOM;
+            iwe.u.data.length = (pIoctlScan->pBssTable[i].RsnIeLen * 2) + 7;
+            NdisMoveMemory(custom, "rsn_ie=", 7);
+			for (idx = 0; idx < pIoctlScan->pBssTable[i].RsnIeLen; idx++)
+                sprintf(custom, "%s%02x", custom, pIoctlScan->pBssTable[i].pRsnIe[idx]);
+            previous_ev = current_ev;
+    		current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe,  custom);
+            if (current_ev == previous_ev)
+            {
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+#ifdef WSC_INCLUDED
+		/*WPS IE */
+		if (pIoctlScan->pBssTable[i].WpsIeLen > 0)
+        {
+    		NdisZeroMemory(&iwe, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+    		iwe.cmd = IWEVCUSTOM;
+            iwe.u.data.length = (pIoctlScan->pBssTable[i].WpsIeLen * 2) + 7;
+            NdisMoveMemory(custom, "wps_ie=", 7);
+			for (idx = 0; idx < pIoctlScan->pBssTable[i].WpsIeLen; idx++)
+                sprintf(custom, "%s%02x", custom, pIoctlScan->pBssTable[i].pWpsIe[idx]);
+            previous_ev = current_ev;
+    		current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe,  custom);
+            if (current_ev == previous_ev)
+            {
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+#endif /* WSC_INCLUDED */
+
+#endif /* IWEVGENIE */
+	}
+
+	data->length = current_ev - extra;
+/*    pAd->StaCfg.bScanReqIsFromWebUI = FALSE; */
+/*	DBGPRINT(RT_DEBUG_ERROR ,("===>rt_ioctl_giwscan. %d(%d) BSS returned, data->length = %d\n",i , pAd->ScanTab.BssNr, data->length)); */
+
+#ifdef CONFIG_STA_SUPPORT
+	RTMP_STA_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_STA_SCAN_END, 0,
+						NULL, data->length, RT_DEV_PRIV_FLAGS_GET(dev));
+#endif /* CONFIG_STA_SUPPORT */
+go_out:
+	if (pIoctlScan->pBssTable != NULL)
+		os_free_mem(NULL, pIoctlScan->pBssTable);
+
+	return status;
+}
+
+INT RtmpIoctl_rt_ioctl_giwencodeext(RTMP_ADAPTER *pAd, VOID *pData, ULONG Data)
+{
+        RT_CMD_STA_IOCTL_SECURITY *pIoctlSec = (RT_CMD_STA_IOCTL_SECURITY *)pData;
+        int idx;
+	struct wifi_dev *wdev = pIoctlSec->wdev;
+        //struct wifi_dev *wdev = &pAd->StaCfg.wdev;
+
+	if ((wdev->wdev_type != WDEV_TYPE_AP) &&
+           (wdev->wdev_type != WDEV_TYPE_STA))
+		return NDIS_STATUS_FAILURE;
+
+        idx = pIoctlSec->KeyIdx;
+        if (idx)
+        {
+                if (idx < 1 || idx > 4)
+                {
+                        pIoctlSec->Status = RTMP_IO_EINVAL;
+                        return NDIS_STATUS_FAILURE;
+                }
+                idx--;
+
+                if ((wdev->WepStatus == Ndis802_11TKIPEnable) ||
+                        (wdev->WepStatus == Ndis802_11AESEnable))
+                {
+                        if (idx != wdev->DefaultKeyId)
+                        {
+                                pIoctlSec->Status = 0;
+                                pIoctlSec->length = 0;
+                                return NDIS_STATUS_FAILURE;
+                        }
+                }
+        }
+        else
+                idx = wdev->DefaultKeyId;
+
+        pIoctlSec->KeyIdx = idx + 1;
+
+        pIoctlSec->length = 0;
+        switch(wdev->WepStatus) {
+                case Ndis802_11WEPDisabled:
+                        pIoctlSec->Alg = RT_CMD_STA_IOCTL_SECURITY_ALG_NONE;
+                        pIoctlSec->flags |= RT_CMD_STA_IOCTL_SECURITY_DISABLED;
+                        break;
+                case Ndis802_11WEPEnabled:
+                        pIoctlSec->Alg = RT_CMD_STA_IOCTL_SECURITY_ALG_WEP;
+                        if (pAd->SharedKey[BSS0][idx].KeyLen > pIoctlSec->MaxKeyLen)
+                        {
+                                pIoctlSec->Status = RTMP_IO_E2BIG;
+                                return NDIS_STATUS_FAILURE;
+                        }
+                        else
+                        {
+                                pIoctlSec->length = pAd->SharedKey[BSS0][idx].KeyLen;
+                                pIoctlSec->pData = (PCHAR)&(pAd->SharedKey[BSS0][idx].Key[0]);
+                        }
+                        break;
+                case Ndis802_11TKIPEnable:
+                case Ndis802_11AESEnable:
+                        if (wdev->WepStatus == Ndis802_11TKIPEnable)
+                                pIoctlSec->Alg = RT_CMD_STA_IOCTL_SECURITY_ALG_TKIP;
+                        else
+                                pIoctlSec->Alg = RT_CMD_STA_IOCTL_SECURITY_ALG_CCMP;
+
+                        if (pIoctlSec->MaxKeyLen < 32)
+                        {
+                                pIoctlSec->Status = RTMP_IO_E2BIG;
+                                return NDIS_STATUS_FAILURE;
+                        }
+                        else
+                        {
+                                pIoctlSec->length = 32;
+#ifdef CONFIG_AP_SUPPORT
+				if (wdev->wdev_type == WDEV_TYPE_AP)
+					pIoctlSec->pData = (PCHAR)&pAd->ApCfg.MBSSID[wdev->func_idx].PMK[0];
+#endif /* CONFIG_AP_SUPPORT */
+
+#ifdef CONFIG_STA_SUPPORT
+				if (wdev->wdev_type == WDEV_TYPE_STA)
+					pIoctlSec->pData = (PCHAR)&pAd->StaCfg.PMK[0];
+#endif /* CONFIG_STA_SUPPORT */
+                       }
+                        break;
+                default:
+                        pIoctlSec->Status = RTMP_IO_EINVAL;
+                        return NDIS_STATUS_FAILURE;
+        }
+
+        return NDIS_STATUS_SUCCESS;
+}
+
+
 INT ComputeChecksum(
 	IN UINT PIN)
 {
@@ -1347,11 +2107,19 @@ INT RTMP_COM_IoctlHandle(
 #ifdef CONFIG_AP_SUPPORT
 			if (CurOpMode == OPMODE_AP)
 			{
+				//pStats->level = ConvertToRssi(pAd, pAd->CommonCfg.TxPowerShow, RSSI_0);
 				if (pMacEntry != NULL)
+				{
 					pStats->level =
 						RTMPMaxRssi(pAd, pMacEntry->RssiSample.AvgRssi0,
 										pMacEntry->RssiSample.AvgRssi1,
 										pMacEntry->RssiSample.AvgRssi2);
+				} else {
+					if ((pStats->priv_flags != INT_APCLI))
+						pStats->level =RTMPMaxRssi(pAd, pAd->ApCfg.RssiSample.AvgRssi0,
+											pAd->ApCfg.RssiSample.AvgRssi1,
+											pAd->ApCfg.RssiSample.AvgRssi2);
+				}
 			}
 #endif /* CONFIG_AP_SUPPORT */
 
@@ -1470,10 +2238,10 @@ INT RTMP_COM_IoctlHandle(
 #endif /* WDS_SUPPORT */
 			{
 				memcpy(&HtPhyMode, &pAd->ApCfg.MBSSID[pObj->ioctl_if].wdev.HTPhyMode, sizeof(HTTRANSMIT_SETTING));
-#ifdef MBSS_SUPPORT
+//#ifdef MBSS_SUPPORT
 				/* reset phy mode for MBSS */
 				MBSS_PHY_MODE_RESET(pObj->ioctl_if, HtPhyMode);
-#endif /* MBSS_SUPPORT */
+//#endif /* MBSS_SUPPORT */
 			}
 
 #ifdef DOT11_VHT_AC
--- a/mt76x2/common/cmm_info.c
+++ b/mt76x2/common/cmm_info.c
@@ -3104,6 +3104,17 @@ VOID RTMPIoctlGetRadioStatsCount(
 #endif
 
 #if defined (AP_SCAN_SUPPORT) || defined (CONFIG_STA_SUPPORT)
+VOID RTMPIoctlSetSiteSurvey(
+	IN PRTMP_ADAPTER pAdapter,
+	IN RTMP_IOCTL_INPUT_STRUCT *wrq)
+{
+
+	NDIS_802_11_SSID Ssid;
+	NdisZeroMemory(&Ssid, sizeof(NDIS_802_11_SSID));
+
+	ApSiteSurvey(pAdapter, &Ssid, SCAN_ACTIVE, FALSE);
+}
+
 VOID RTMPIoctlGetSiteSurvey(
 	IN	PRTMP_ADAPTER	pAdapter, 
 	IN	RTMP_IOCTL_INPUT_STRUCT	*wrq)
@@ -3118,6 +3129,8 @@ VOID RTMPIoctlGetSiteSurvey(
 	UCHAR TargetSsid[MAX_LEN_OF_SSID+1];
 	UCHAR TargetSsidLen = 0;
 #endif /* AIRPLAY_SUPPORT */
+	BSS_TABLE *pScanTab;
+	pScanTab = &pAdapter->ScanTab;
 
 #ifdef CONFIG_STA_SUPPORT
 #ifdef WSC_STA_SUPPORT
@@ -3202,7 +3215,9 @@ VOID RTMPIoctlGetSiteSurvey(
 #endif /* CONFIG_STA_SUPPORT */
 
 	while ((ScanRunning(pAdapter) == TRUE) && (WaitCnt++ < 200))
-		OS_WAIT(500);	
+		OS_WAIT(500);
+
+	BssTableSortByRssi(pScanTab,FALSE);
 
 	for(i=0; i<pAdapter->ScanTab.BssNr ;i++)
 	{
--- a/mt76x2/common/cmm_profile.c
+++ b/mt76x2/common/cmm_profile.c
@@ -5713,6 +5713,30 @@ free_resource:
 
 #endif /* SINGLE_SKU_V2 */
 
+INT32 ralinkrate[] = {
+/* CCK */
+2, 4, 11, 22,
+/* OFDM */
+12, 18, 24, 36, 48, 72, 96, 108,
+/* 20MHz, 800ns GI, MCS: 0 ~ 15 */
+13, 26, 39, 52, 78, 104, 117, 130, 26, 52, 78, 104, 156, 208, 234, 260,
+/* 20MHz, 800ns GI, MCS: 16 ~ 23 */
+39, 78, 117, 156, 234, 312, 351, 390,
+/* 40MHz, 800ns GI, MCS: 0 ~ 15 */
+27, 54, 81, 108, 162, 216, 243, 270, 54, 108, 162, 216, 324, 432, 486, 540,
+/* 40MHz, 800ns GI, MCS: 16 ~ 23 */
+81, 162, 243, 324, 486, 648, 729, 810,
+/* 20MHz, 400ns GI, MCS: 0 ~ 15 */
+14, 29, 43, 57, 87, 115, 130, 144, 29, 59, 87, 115, 173, 230, 260, 288,
+/* 20MHz, 400ns GI, MCS: 16 ~ 23 */
+43, 87, 130, 173, 260, 317, 390, 433,
+/* 40MHz, 400ns GI, MCS: 0 ~ 15 */
+30, 60, 90, 120, 180, 240, 270, 300, 60, 120, 180, 240, 360, 480, 540, 600,
+/* 40MHz, 400ns GI, MCS: 16 ~ 23 */
+90, 180, 270, 360, 540, 720, 810, 900};
+
+UINT32 RT_RateSize = sizeof(ralinkrate);
+
 UINT32 RalinkRate_Legacy [] = {2, 4, 11, 22, 12, 18, 24, 36, 48, 72, 96, 108};
 UINT32 RalinkRate_HT_1NSS[Rate_BW_MAX][Rate_GI_MAX][Rate_MCS] = 
 {
--- a/mt76x2/common/cmm_wpa.c
+++ b/mt76x2/common/cmm_wpa.c
@@ -1189,6 +1189,7 @@ VOID PeerPairMsg1Action(
 			group_cipher = pAd->ApCfg.ApCliTab[IfIndex].GroupCipher;
 			rsnie_ptr = pAd->ApCfg.ApCliTab[IfIndex].RSN_IE;
 			rsnie_len = pAd->ApCfg.ApCliTab[IfIndex].RSNIE_Len;
+			pAd->ApCfg.ApCliTab[IfIndex].ConnectState = APCLI_START_4WAY;
 		}
 #endif /* APCLI_SUPPORT */			
 	}
@@ -1779,7 +1780,7 @@ VOID PeerPairMsg3Action(
 	USHORT ifIndex = (USHORT)(Elem->Priv);
 	UCHAR CliIdx = 0xFF;
 #endif /* MAC_REPEATER_SUPPORT */
-
+	UINT				IfIndex = 0;
 	DBGPRINT(RT_DEBUG_TRACE, ("===> PeerPairMsg3Action \n"));
 	
 	if ((!pEntry) || (!IS_ENTRY_CLIENT(pEntry) && !IS_ENTRY_APCLI(pEntry)))
@@ -1794,7 +1795,6 @@ VOID PeerPairMsg3Action(
 #ifdef APCLI_SUPPORT
 		if (IS_ENTRY_APCLI(pEntry))
 		{
-			UINT IfIndex = 0;
 		
 			IfIndex = pEntry->wdev_idx;
 #ifdef MAC_REPEATER_SUPPORT
@@ -1914,6 +1914,9 @@ VOID PeerPairMsg3Action(
 		IF_DEV_CONFIG_OPMODE_ON_AP(pAd)
 		{				
 #ifdef APCLI_SUPPORT
+			IfIndex = pEntry->wdev_idx;
+			pAd->ApCfg.ApCliTab[IfIndex].ConnectState = APCLI_NOT_TRIGGER_CONNECT;
+			pAd->ApCfg.ApCliTab[IfIndex].FailReason = 0;
 #ifdef APCLI_AUTO_CONNECT_SUPPORT
 			if((pAd->ApCfg.ApCliAutoConnectRunning == TRUE)
 #ifdef MAC_REPEATER_SUPPORT
@@ -2505,6 +2508,11 @@ VOID	PeerGroupMsg1Action(
 	IF_DEV_CONFIG_OPMODE_ON_AP(pAd)
 	{				
 #ifdef APCLI_SUPPORT
+		UINT				IfIndex = 0;
+
+		IfIndex = pEntry->wdev_idx;
+		pAd->ApCfg.ApCliTab[IfIndex].ConnectState = APCLI_NOT_TRIGGER_CONNECT;
+		pAd->ApCfg.ApCliTab[IfIndex].FailReason = 0;
 #ifdef APCLI_AUTO_CONNECT_SUPPORT
 		if ((pAd->ApCfg.ApCliAutoConnectRunning == TRUE)
 #ifdef MAC_REPEATER_SUPPORT
--- a/mt76x2/common/mlme.c
+++ b/mt76x2/common/mlme.c
@@ -3954,7 +3954,7 @@ VOID BssEntrySet(
 		pBss->WscDPIDFromWpsAP = 0xFFFF;
 #endif /* WSC_INCLUDED */
 
-#ifdef CONFIG_STA_SUPPORT
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
 		NdisZeroMemory(&pBss->WpaIE.IE[0], MAX_CUSTOM_LEN);
 		NdisZeroMemory(&pBss->RsnIE.IE[0], MAX_CUSTOM_LEN);
 		NdisZeroMemory(&pBss->WpsIE.IE[0], MAX_CUSTOM_LEN);
@@ -4029,7 +4029,7 @@ VOID BssEntrySet(
 						break;
 					}			
 #endif /* defined(SMART_MESH) */
-#ifdef CONFIG_STA_SUPPORT
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
 					if (NdisEqualMemory(pEid->Octet, WPA_OUI, 4))
 					{
 						if ((pEid->Len + 2) > MAX_CUSTOM_LEN)
@@ -4043,7 +4043,7 @@ VOID BssEntrySet(
 #endif /* CONFIG_STA_SUPPORT */
 					break;
 
-#ifdef CONFIG_STA_SUPPORT
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
 				case IE_RSN:
 					if (NdisEqualMemory(pEid->Octet + 2, RSN_OUI, 3))
 					{
--- a/mt76x2/common/rtmp_init.c
+++ b/mt76x2/common/rtmp_init.c
@@ -3125,6 +3125,7 @@ VOID UserCfgInit(RTMP_ADAPTER *pAd)
 	pAd->CommonCfg.PhyMode = 0xff;     /* unknown*/
 	pAd->CommonCfg.SavedPhyMode = pAd->CommonCfg.PhyMode;
 	pAd->CommonCfg.BandState = UNKNOWN_BAND;
+	pAd->CommonCfg.TxPowerShow = 0; /* mw */
 
 	pAd->wmm_cw_min = 4;
 	switch (pAd->OpMode)
--- a/mt76x2/include/ap_mbss.h
+++ b/mt76x2/include/ap_mbss.h
@@ -33,7 +33,7 @@
 	So MBSS_PHY_MODE_RESET() can help us to adjust the correct mode &
 	maximum MCS for the BSS.
 */
-#define MBSS_PHY_MODE_RESET(__BssId, __HtPhyMode)				\
+/*#define MBSS_PHY_MODE_RESET(__BssId, __HtPhyMode)				\
 	{															\
 		UCHAR __PhyMode = pAd->ApCfg.MBSSID[__BssId].wdev.PhyMode;	\
 		if ((__PhyMode == WMODE_B) &&							\
@@ -63,7 +63,7 @@
                         __HtPhyMode.field.MCS = 9;                                                      \
                }       \
 	}
-
+*/
 
 /* Public function list */
 INT	Show_MbssInfo_Display_Proc(RTMP_ADAPTER *pAd, PSTRING arg);
--- a/mt76x2/include/mlme.h
+++ b/mt76x2/include/mlme.h
@@ -892,14 +892,13 @@ typedef struct {
     UCHAR       EdcaUpdateCount;
 } QOS_CAPABILITY_PARM, *PQOS_CAPABILITY_PARM;
 
-#ifdef CONFIG_STA_SUPPORT
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
 typedef struct {
     UCHAR       IELen;
     UCHAR       IE[MAX_CUSTOM_LEN];
 } WPA_IE_;
 #endif /* CONFIG_STA_SUPPORT */
 
-
 typedef struct _BSS_ENTRY{
 	UCHAR MacAddr[MAC_ADDR_LEN];
 	UCHAR Bssid[MAC_ADDR_LEN];
@@ -996,8 +995,7 @@ typedef struct _BSS_ENTRY{
 	USHORT WscDPIDFromWpsAP;
 #endif /* WSC_INCLUDED */
 
-
-#ifdef CONFIG_STA_SUPPORT
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
 	WPA_IE_ WpaIE;
 	WPA_IE_ RsnIE;
 	WPA_IE_ WpsIE;
--- a/mt76x2/include/os/rt_linux.h
+++ b/mt76x2/include/os/rt_linux.h
@@ -162,7 +162,7 @@ extern const struct iw_handler_def rt28x
 
 #endif /* CONFIG_STA_SUPPORT */
 
-#ifdef CONFIG_APSTA_MIXED_SUPPORT
+#if 1
 extern	const struct iw_handler_def rt28xx_ap_iw_handler_def;
 #endif /* CONFIG_APSTA_MIXED_SUPPORT */
 
--- a/mt76x2/include/os/rt_os.h
+++ b/mt76x2/include/os/rt_os.h
@@ -107,7 +107,9 @@
 #define RTPRIV_IOCTL_SHOW							(SIOCIWFIRSTPRIV + 0x11)
 #define RTPRIV_IOCTL_WSC_PROFILE                    (SIOCIWFIRSTPRIV + 0x12)
 #define RTPRIV_IOCTL_QUERY_BATABLE                  (SIOCIWFIRSTPRIV + 0x16)
+#define RTPRIV_IOCTL_GET_APCLI_CONNSTATUS			(SIOCIWFIRSTPRIV + 0x17)
 #if defined(INF_AR9)  || defined(BB_SOC)
+#error Sorry! INF_AR9 or BB_SOC should not be defined due to IOCTL conflicts.
 #define RTPRIV_IOCTL_GET_AR9_SHOW   (SIOCIWFIRSTPRIV + 0x17)
 #endif/* INF_AR9 */
 #define RTPRIV_IOCTL_SET_WSCOOB	(SIOCIWFIRSTPRIV + 0x19)
--- a/mt76x2/include/rt_os_util.h
+++ b/mt76x2/include/rt_os_util.h
@@ -827,6 +827,9 @@ extern ULONG RTPktOffsetData, RTPktOffse
 
 extern ULONG OS_NumOfMemAlloc, OS_NumOfMemFree;
 
+extern INT32 ralinkrate[];
+extern UINT32 RT_RateSize;
+
 extern UINT32 RalinkRate_Legacy[];
 extern UINT32 RalinkRate_HT_1NSS[Rate_BW_MAX][Rate_GI_MAX][Rate_MCS];
 extern UINT32 RalinkRate_VHT_1NSS[Rate_BW_MAX][Rate_GI_MAX][Rate_MCS];
--- a/mt76x2/include/rtmp.h
+++ b/mt76x2/include/rtmp.h
@@ -2331,6 +2331,8 @@ typedef struct _COMMON_CONFIG {
 	UINT	TcpAck[TCP_ACK_BURST_LEVEL+1];	/* 0~TCP_ACK_BURST_LEVEL */
 #endif /* DELAYED_TCP_ACK */
 
+	UCHAR   TxPowerShow;
+
 	BOOLEAN bStopReadTemperature; /* avoid race condition between FW/driver */
 	
 #ifdef REDUCE_TCP_ACK_SUPPORT
@@ -3779,6 +3781,9 @@ typedef struct _APCLI_STRUCT {
 	REPEATER_CLIENT_ENTRY_MAP RepeaterCliMap[MAX_EXT_MAC_ADDR_SIZE];
 #endif /* MAC_REPEATER_SUPPORT */
 
+	UCHAR ConnectState;
+	UCHAR FailReason;
+	ULONG   LastTriggerTime;
 	APCLI_COUNTER ApCliCounter;
 #ifdef SMART_MESH
 	SMART_MESH_CFG  SmartMeshCfg;
@@ -10269,6 +10274,9 @@ PNDIS_PACKET RTMPDeFragmentDataFrame(
 VOID RTMPIoctlGetSiteSurvey(
 	IN	RTMP_ADAPTER *pAd, 
 	IN	RTMP_IOCTL_INPUT_STRUCT *wrq);
+VOID RTMPIoctlSetSiteSurvey(
+	IN 	RTMP_ADAPTER *pAd,
+	IN	RTMP_IOCTL_INPUT_STRUCT *wrq);
 #endif
 
 #ifdef CUSTOMER_DCC_FEATURE
@@ -11154,6 +11162,15 @@ INT Show_Diag_Proc(PRTMP_ADAPTER pAd, PS
 INT Show_Cal_Info(struct _RTMP_ADAPTER *pAd, PSTRING arg);
 #endif
 
+INT RtmpIoctl_rt_ioctl_giwencodeext(RTMP_ADAPTER *pAd, VOID *pData, ULONG Data);
+INT RtmpIoctl_rt_ioctl_giwscan(
+	IN      RTMP_ADAPTER *pAd,
+	IN      VOID *pData,
+	IN      ULONG Data);
+
+int rt_ioctl_giwscan(struct net_device *dev, struct iw_request_info *info,
+	struct iw_point *data, char *extra);
+
 #ifdef WSC_NFC_SUPPORT
 INT RtmpOSNotifyRawData(
 	IN PNET_DEV pNetDev,
--- a/mt76x2/include/rtmp_cmd.h
+++ b/mt76x2/include/rtmp_cmd.h
@@ -174,6 +174,16 @@ typedef enum _CMD_RTPRIV_IOCTL_AP {
 	CMD_RTPRIV_IOCTL_AP_SIOCGIWESSID,
 	CMD_RTPRIV_IOCTL_AP_SIOCGIWRATEQ,
 	CMD_RTPRIV_IOCTL_AP_SIOCSIWGENIE,
+	CMD_RTPRIV_IOCTL_AP_SIOCGIWENCODEEXT,
+	CMD_RTPRIV_IOCTL_AP_SIOCSIWSCAN,
+	CMD_RTPRIV_IOCTL_AP_SIOCGIWSCAN,
+	CMD_RTPRIV_IOCTL_CONNSTATUS,
+	CMD_RTPRIV_IOCTL_AP_SIOCGIWTXPOW,
+	CMD_RTPRIV_IOCTL_AP_GET_PHYMODE,
+	CMD_RTPRIV_IOCTL_AP_GET_BW,
+	CMD_RTPRIV_IOCTL_AP_GET_SHORTGI,
+	CMD_RTPRIV_IOCTL_AP_GET_VHT_BW,
+	CMD_RTPRIV_IOCTL_AP_GET_VHT_SHORTGI,
 
 	/* can not exceed 0x5000 */
 } CMD_RTPRIV_IOCTL_AP;
@@ -811,6 +821,7 @@ typedef struct __RT_CMD_STA_IOCTL_NICK_N
 } RT_CMD_STA_IOCTL_NICK_NAME;
 
 typedef struct __RT_CMD_STA_IOCTL_SECURITY {
+	struct wifi_dev *wdev;
 	INOUT CHAR *pData;
 	INOUT UINT16 length;
 	IN INT32 KeyIdx;
--- a/mt76x2/include/rtmp_comm.h
+++ b/mt76x2/include/rtmp_comm.h
@@ -403,6 +403,36 @@ enum Rate_GI
 };
 #define Rate_MCS 10
 
+#define MBSS_PHY_MODE_RESET(__BssId, __HtPhyMode)                               \
+        {                                                                                                                       \
+                UCHAR __PhyMode = pAd->ApCfg.MBSSID[__BssId].wdev.PhyMode;      \
+                if ((__PhyMode == WMODE_B) &&                                                   \
+                        (__HtPhyMode.field.MODE != MODE_CCK))                           \
+                {                                                                                                               \
+                        __HtPhyMode.field.MODE = MODE_CCK;                                      \
+                        __HtPhyMode.field.MCS = 3;                                                      \
+                }                                                                                                               \
+                else if ((!WMODE_CAP_N(__PhyMode)) &&                                           \
+                                (__PhyMode != WMODE_B) &&                                               \
+                                (__HtPhyMode.field.MODE != MODE_OFDM))                  \
+                {                                                                                                               \
+                        __HtPhyMode.field.MODE = MODE_OFDM;                                     \
+                        __HtPhyMode.field.MCS = 7;                                                      \
+                }                                                                                                               \
+                else if ((__PhyMode != WMODE_B) &&                                              \
+                                (__PhyMode != WMODE_G) &&                                               \
+                                (__PhyMode != WMODE_A) &&                                               \
+                                (!WMODE_CAP_AC(__PhyMode)) &&   \
+                                (WMODE_CAP_N(__PhyMode)))                 \
+                {                                                                                                               \
+                        __HtPhyMode.field.MODE = MODE_HTMIX;                                    \
+                }                                       \
+                else if (WMODE_CAP_AC(__PhyMode))     \
+                {       \
+                        __HtPhyMode.field.MODE = MODE_VHT;                                      \
+                        __HtPhyMode.field.MCS = 9;                                                      \
+               }       \
+        }
 
 #endif /* __RT_COMM_H__ */
 
--- a/mt76x2/include/rtmp_def.h
+++ b/mt76x2/include/rtmp_def.h
@@ -2221,4 +2221,13 @@ do{									\
 #define RTMP_OS_TASK_INIT(__pTask, __pTaskName, __pAd)		\
 	RtmpOSTaskInit(__pTask, __pTaskName, __pAd, &(__pAd)->RscTaskMemList, &(__pAd)->RscSemMemList);
 
+/*woody*/
+#define APCLI_NOT_TRIGGER_CONNECT	0	/* merge NO_BSS,IBSS_IDLE,IBSS_ACTIVE and BSS in to 1 state */
+#define APCLI_START_PROBE			1
+#define APCLI_START_AUTH			2
+#define APCLI_RECE_AUTH				3
+#define APCLI_START_ASSOC			4
+#define APCLI_RECE_ASSOC			5
+#define APCLI_START_4WAY			6
+
 #endif /* __RTMP_DEF_H__ */
--- a/mt76x2/os/linux/ap_ioctl.c
+++ b/mt76x2/os/linux/ap_ioctl.c
@@ -31,6 +31,11 @@
 #include "rt_os_net.h"
 #include <linux/wireless.h>
 
+extern
+int rt_ioctl_giwscan(struct net_device *dev,
+                        struct iw_request_info *info,
+                        struct iw_point *data, char *extra);
+
 struct iw_priv_args ap_privtab[] = {
 { RTPRIV_IOCTL_SET, 
 /* 1024 --> 1024 + 512 */
@@ -88,14 +93,24 @@ struct iw_priv_args ap_privtab[] = {
   "get_ba_table"},
 { RTPRIV_IOCTL_STATISTICS,
   IW_PRIV_TYPE_CHAR | 1024, IW_PRIV_TYPE_CHAR | 1024,
-  "stat"}
+  "stat"},
+  { RTPRIV_IOCTL_GET_APCLI_CONNSTATUS,
+  IW_PRIV_TYPE_CHAR | 1024, IW_PRIV_TYPE_CHAR | 1024,
+  "Connstatus"}
 };
 
+#if 1//def CONFIG_APSTA_MIXED_SUPPORT
+static const iw_handler rt_ap_handler[]=
+{
+	[(SIOCGIWSCAN-SIOCSIWCOMMIT)] = (iw_handler) rt_ioctl_giwscan,
+//	[(SIOCSIWSCAN-SIOCSIWCOMMIT)] = (iw_handler) rt_ioctl_ap_siwscan,
+};
 
-#ifdef CONFIG_APSTA_MIXED_SUPPORT
 const struct iw_handler_def rt28xx_ap_iw_handler_def =
 {
+	.standard = (iw_handler *) rt_ap_handler,
 #define	N(a)	(sizeof (a) / sizeof (a[0]))
+	.num_standard = sizeof(rt_ap_handler) / sizeof(iw_handler),
 	.private_args	= (struct iw_priv_args *) ap_privtab,
 	.num_private_args	= N(ap_privtab),
 #if IW_HANDLER_VERSION >= 7
@@ -241,7 +256,59 @@ INT rt28xx_ap_ioctl(struct net_device *n
 		case SIOCSIWRTS:  /*set RTS/CTS threshold (bytes) */
 		case SIOCGIWFRAG:  /*get fragmentation thr (bytes) */
 		case SIOCSIWFRAG:  /*set fragmentation thr (bytes) */
+			Status = RTMP_IO_EOPNOTSUPP;
+			break;
 		case SIOCGIWENCODE:  /*get encoding token & mode */
+		{
+
+			RT_CMD_STA_IOCTL_SECURITY IoctlSec, *pIoctlSec = &IoctlSec;
+			int max_key_len;
+			struct iw_point *encoding = &wrqin->u.encoding;
+
+			 max_key_len = encoding->length /*- sizeof(*ext)*/;
+			 if (max_key_len < 0)
+                	 {
+				Status = RTMP_IO_EOPNOTSUPP;
+			 	break;
+			 }
+
+			 memset(pIoctlSec, 0, sizeof(RT_CMD_STA_IOCTL_SECURITY));
+			 pIoctlSec->KeyIdx = encoding->flags & IW_ENCODE_INDEX;
+			 pIoctlSec->MaxKeyLen = max_key_len;
+			 pIoctlSec->wdev = pIoctlConfig->wdev;
+
+			if (RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_AP_SIOCGIWENCODEEXT, 0,
+                                pIoctlSec, RT_DEV_PRIV_FLAGS_GET(net_dev)) != NDIS_STATUS_SUCCESS)
+        		{
+                		//ext->key_len = 0;
+                		//RT_CMD_STATUS_TRANSLATE(pIoctlSec->Status);
+                		//return pIoctlSec->Status;
+				Status = RTMP_IO_EOPNOTSUPP;
+				break;
+        		}
+
+			encoding->flags = pIoctlSec->KeyIdx;
+			encoding->length = pIoctlSec->length;
+
+			if (pIoctlSec->Alg == RT_CMD_STA_IOCTL_SECURITY_ALG_NONE)
+                		encoding->flags |= IW_ENCODE_ALG_NONE;
+        		else if (pIoctlSec->Alg == RT_CMD_STA_IOCTL_SECURITY_ALG_WEP)
+                		encoding->flags |= IW_ENCODE_ALG_WEP;
+        		else if (pIoctlSec->Alg == RT_CMD_STA_IOCTL_SECURITY_ALG_TKIP)
+                		encoding->flags |= IW_ENCODE_ALG_TKIP;
+        		else if (pIoctlSec->Alg == RT_CMD_STA_IOCTL_SECURITY_ALG_CCMP)
+                		encoding->flags |= IW_ENCODE_ALG_CCMP;
+
+        		if (pIoctlSec->flags & RT_CMD_STA_IOCTL_SECURITY_DISABLED)
+                		encoding->flags |= IW_ENCODE_DISABLED;
+
+			if (pIoctlSec->length && pIoctlSec->pData)
+			{
+				encoding->flags |= IW_ENCODE_ENABLED;
+				memcpy(encoding->pointer, pIoctlSec->pData, encoding->length);
+			}
+		}
+			break;
 		case SIOCSIWENCODE:  /*set encoding token & mode */
 			Status = RTMP_IO_EOPNOTSUPP;
 			break;
@@ -263,17 +330,121 @@ INT rt28xx_ap_ioctl(struct net_device *n
 		case SIOCSIWMODE:  /*set operation mode */
 		case SIOCGIWSENS:   /*get sensitivity (dBm) */
 		case SIOCSIWSENS:	/*set sensitivity (dBm) */
+			break;
 		case SIOCGIWPOWER:  /*get Power Management settings */
+		{
+			DBGPRINT(RT_DEBUG_TRACE,("SIOCGIWPOWER\n"));
+                        break;
+		}
 		case SIOCSIWPOWER:  /*set Power Management settings */
+						Status = RTMP_IO_EOPNOTSUPP;
+			break;
 		case SIOCGIWTXPOW:  /*get transmit power (dBm) */
+		{
+			DBGPRINT(RT_DEBUG_TRACE,("SIOCGIWTXPOW\n"));
+			int len;
+			UINT power;
+	              wrqin->u.txpower.value = 0;
+                     wrqin->u.txpower.fixed = 1;
+	              wrqin->u.txpower.disabled = 0;
+                     wrqin->u.txpower.flags = IW_TXPOW_DBM;
+
+			RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_SIOCGIWTXPOW, 0,
+								&(power), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
+			wrqin->u.txpower.value = power;
+				//len = copy_to_user(wrqin->u.data.pointer, prange, sizeof(struct iw_range));
+                        break;
+		}
 		case SIOCSIWTXPOW:  /*set transmit power (dBm) */
-		/*case SIOCGIWRANGE:	//Get range of parameters */
 		case SIOCGIWRETRY:	/*get retry limits and lifetime */
 		case SIOCSIWRETRY:	/*set retry limits and lifetime */
 			Status = RTMP_IO_EOPNOTSUPP;
 			break;
+		case SIOCGIWSTATS:
+		{
+					DBGPRINT(RT_DEBUG_ERROR,("SIOCGIWSTATS\n"));
+					struct iw_statistics *pStats;
+					RT_CMD_IW_STATS DrvIwStats, *pDrvIwStats = &DrvIwStats;
+					int len;
+
+					GET_PAD_FROM_NET_DEV(pAd, net_dev);
+
+
+					pDrvIwStats->priv_flags = RT_DEV_PRIV_FLAGS_GET(net_dev);
+					pDrvIwStats->dev_addr = (PUCHAR)net_dev->dev_addr;
+
+					if (RTMP_DRIVER_IW_STATS_GET(pAd, pDrvIwStats) != NDIS_STATUS_SUCCESS)
+					{
+						Status = RTMP_IO_EOPNOTSUPP;
+						break;
+					}
+
+					pStats = (struct iw_statistics *)(pDrvIwStats->pStats);
+					pStats->status = 0; /* Status - device dependent for now */
+
+
+					pStats->qual.updated = 1;     /* Flags to know if updated */
+					pStats->qual.qual = pDrvIwStats->qual;
+					pStats->qual.level = pDrvIwStats->level;
+					pStats->qual.noise = pDrvIwStats->noise;
+					pStats->discard.nwid = 0;     /* Rx : Wrong nwid/essid */
+					pStats->miss.beacon = 0;      /* Missed beacons/superframe */
+					len = copy_to_user(wrqin->u.data.pointer, pStats, sizeof(struct iw_statistics));
+		                        break;
+				}
 		case SIOCGIWRANGE:	/*Get range of parameters */
 		    {
+
+				enum WIFI_MODE{
+					WMODE_INVALID = 0,
+					WMODE_A = 1 << 0,
+					WMODE_B = 1 << 1,
+					WMODE_G = 1 << 2,
+					WMODE_GN = 1 << 3,
+					WMODE_AN = 1 << 4,
+					WMODE_AC = 1 << 5,
+					WMODE_COMP = 6,	/* total types of supported wireless mode, add this value once yow add new type */
+				};
+
+#define WMODE_CAP_N(_x)			(((_x) & (WMODE_GN | WMODE_AN)) != 0)
+#define WMODE_CAP_AC(_x)		(((_x) & (WMODE_AC)) != 0)
+
+
+				UINT power;
+				int i,bw,shortGI,vht_bw,vht_shortGI;
+				UCHAR phymode;
+
+				INT OFDM_RateTable[] ={2,  4,   11,  22, 12, 18,   24,  36, 48, 72, 96, 108,};
+				INT HT20_LongGI[] ={13, 26,   39,  52,  78, 104, 117, 130, 26,  52,  78, 104, 156, 208, 234, 260,};
+				INT HT40_LongGI[] ={27, 54,   81, 108, 162, 216, 243, 270, 54, 108, 162, 216, 324, 432, 486, 540,};
+				INT HT20_ShortGI[] ={14, 29,   43,  57,  87, 115, 130, 144, 29, 59,   87, 115, 173, 230, 260, 288,};
+				INT HT40_ShortGI[] ={30, 60,   90, 120, 180, 240, 270, 300, 60, 120, 180, 240, 360, 480, 540, 600,};
+
+				INT AC20_LongGI[] ={13, 26,   39,  52,  78, 104, 117, 130, 156,};
+				INT AC40_LongGI[] ={27, 54,   81, 108, 162, 216, 243, 270, 324, 360,};
+				INT AC80_LongGI[] ={59, 117, 176, 234, 351, 468, 527, 585, 702, 780,};
+				INT AC20_ShortGI[] ={14, 29,   43,  57,  87, 115, 130, 144, 173,};
+				INT AC40_ShortGI[] ={30, 60,   90, 120, 180, 240, 270, 300, 360, 400,};
+				INT AC80_ShortGI[] ={65, 130, 195, 260, 390, 520, 585, 650, 780, 867,};
+
+				//DBGPRINT(RT_DEBUG_ERROR,("SIOCGIWRANGE:\n"));
+
+				RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_GET_PHYMODE, 0,
+												&(phymode), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
+				RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_GET_BW, 0,
+												&(bw), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
+				RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_GET_SHORTGI, 0,
+												&(shortGI), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
+				RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_GET_VHT_BW, 0,
+												&(vht_bw), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
+				RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_GET_VHT_SHORTGI, 0,
+												&(vht_shortGI), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
 /*				struct iw_range range; */
 				struct iw_range *prange = NULL;
 
@@ -289,6 +460,8 @@ INT rt28xx_ap_ioctl(struct net_device *n
 				prange->we_version_compiled = WIRELESS_EXT;
 				prange->we_version_source = 14;
 
+				 prange->throughput = 27 * 1000 * 1000;
+
 				/*
 					what is correct max? This was not
 					documented exactly. At least
@@ -297,11 +470,149 @@ INT rt28xx_ap_ioctl(struct net_device *n
 				prange->max_qual.qual = 100;
 				prange->max_qual.level = 0; /* dB */
 				prange->max_qual.noise = 0; /* dB */
-				copy_to_user(wrq->u.data.pointer, prange, sizeof(struct iw_range));
+				prange->max_qual.updated = 7;
+
+				prange->avg_qual.qual = 70;
+				prange->avg_qual.level = 0;
+				prange->avg_qual.noise = 0;
+				prange->avg_qual.updated = 7;
+
+				if (WMODE_CAP_AC(phymode))
+				{
+					if (bw == 0) {
+						if (vht_shortGI ==0 )
+						{
+							prange->num_bitrates = sizeof(AC20_LongGI)/sizeof(AC20_LongGI[0]);
+							for (i = 0; i < prange->num_bitrates; i++)
+											prange->bitrate[i] = (AC20_LongGI[i]) *
+								 			500000;
+						} else {
+							prange->num_bitrates = sizeof(AC20_ShortGI)/sizeof(AC20_ShortGI[0]);
+							for (i = 0; i < prange->num_bitrates; i++)
+											prange->bitrate[i] = (AC20_ShortGI[i]) *
+											500000;
+						}
+					}
+					else if (bw == 1) {
+						if (vht_shortGI ==0 )
+						{
+							prange->num_bitrates = sizeof(AC40_LongGI)/sizeof(AC40_LongGI[0]);
+							for (i = 0; i < prange->num_bitrates; i++)
+											prange->bitrate[i] = (AC40_LongGI[i]) *
+											500000;
+						} else {
+							prange->num_bitrates = sizeof(AC40_ShortGI)/sizeof(AC40_ShortGI[0]);
+							for (i = 0; i < prange->num_bitrates; i++)
+											prange->bitrate[i] = (AC40_ShortGI[i]) *
+											500000;
+						}
+					}
+					else {
+						if (vht_shortGI ==0 )
+						{
+							prange->num_bitrates = sizeof(AC80_LongGI)/sizeof(AC80_LongGI[0]);
+							for (i = 0; i < prange->num_bitrates; i++)
+											prange->bitrate[i] = (AC80_LongGI[i]) *
+											500000;
+						} else {
+							prange->num_bitrates = sizeof(AC80_ShortGI)/sizeof(AC80_ShortGI[0]);
+							 for (i = 0; i < prange->num_bitrates; i++)
+											prange->bitrate[i] = (AC80_ShortGI[i]) *
+											500000;
+						}
+				 	}
+				 } else if (WMODE_CAP_N(phymode)) {
+					if (bw == 0)
+					{
+						if (shortGI ==0 )
+						{
+							prange->num_bitrates = sizeof(HT20_LongGI)/sizeof(HT20_LongGI[0]);
+							for (i = 0; i < prange->num_bitrates; i++)
+											prange->bitrate[i] = (HT20_LongGI[i]) *
+											500000;
+						} else {
+							prange->num_bitrates = sizeof(HT20_ShortGI)/sizeof(HT20_ShortGI[0]);
+							for (i = 0; i < prange->num_bitrates; i++)
+											prange->bitrate[i] = (HT20_ShortGI[i]) *
+											500000;
+						}
+					} else {
+						if (shortGI ==0 )
+						{
+							prange->num_bitrates = sizeof(HT40_LongGI)/sizeof(HT40_LongGI[0]);
+							 for (i = 0; i < prange->num_bitrates; i++)
+			                				 prange->bitrate[i] = (HT40_LongGI[i]) *
+			                     			500000;
+						} else {
+							prange->num_bitrates = sizeof(HT40_ShortGI)/sizeof(HT40_ShortGI[0]);
+							 for (i = 0; i < prange->num_bitrates; i++)
+			                				 prange->bitrate[i] = (HT40_ShortGI[i]) *
+			                     			500000;
+						}
+					}
+				 } else {
+					prange->num_bitrates = 12;
+					 for (i = 0; i < prange->num_bitrates; i++)
+	                				 prange->bitrate[i] = (OFDM_RateTable[i]) *
+	                     			500000;
+				 }
+
+				prange->max_rts = 2347;
+				prange->min_frag = MIN_FRAG_THRESHOLD;
+				prange->max_frag = MAX_FRAG_THRESHOLD;
+
+				prange->encoding_size[0] = 5;
+        		prange->encoding_size[1] = 13;
+         		prange->num_encoding_sizes = 2;
+         		prange->max_encoding_tokens = 4;
+if ((phymode & WMODE_GN) != 0) {
+				INT bg[] ={2412, 2417, 2422, 2427, 2432, 2437, 2442, 2447, 2452, 2457, 2462, 2467, 2472,2477,2482,2487};
+			        i = 0;
+			        {
+			                 for (i = 1; i <14; i ++) {
+
+			                         prange->freq[i-1].i = i;
+			                         prange->freq[i-1].m = bg[i-1] * 100000;
+			                        prange->freq[i-1].e = 1;
+			                 }
+					prange->num_channels =14;
+					prange->num_frequency = 14;
+			         }
+} else {
+				INT a_channel[]={36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165};
+				INT a_freq[] = {5180, 5200, 5220, 5240, 5260,5280,5300, 5320, 5500, 5520, 5540,5560,5580, 5600, 5620, 5640, 5660, 5680, 5700, 5745, 5765, 5785, 5805, 5825};
+			        i = 0;
+			        {
+			                 for (i = 0; i <24; i ++) {
+
+			                         prange->freq[i].i = a_channel[i];
+			                         prange->freq[i].m = a_freq[i] * 100000;
+			                        prange->freq[i].e = 1;
+			                 }
+			         }
+					prange->num_channels =24;
+					prange->num_frequency = 24;
+	}
+				prange->event_capa[0] = (IW_EVENT_CAPA_K_0 |
+                                 IW_EVENT_CAPA_MASK(SIOCGIWTHRSPY) |
+                                 IW_EVENT_CAPA_MASK(SIOCGIWAP) |
+                                 IW_EVENT_CAPA_MASK(SIOCGIWSCAN));
+				prange->event_capa[1] = IW_EVENT_CAPA_K_1;
+
+				prange->enc_capa = IW_ENC_CAPA_WPA | IW_ENC_CAPA_WPA2 |
+					IW_ENC_CAPA_CIPHER_TKIP | IW_ENC_CAPA_CIPHER_CCMP;
+
+				prange->scan_capa = IW_SCAN_CAPA_ESSID | IW_SCAN_CAPA_TYPE;
+
+ 				prange->num_txpower = 2;
+     				prange->txpower_capa = IW_TXPOW_DBM|IW_TXPOW_RANGE;
+				prange->txpower[0] = -20;
+				prange->txpower[0] = -90;
+				copy_to_user(wrqin->u.data.pointer, prange, sizeof(struct iw_range));
 				os_free_mem(NULL, prange);
 		    }
 		    break;
-		    
+
 		case RT_PRIV_IOCTL:
 		case RT_PRIV_IOCTL_EXT:
 		{
@@ -387,6 +698,10 @@ INT rt28xx_ap_ioctl(struct net_device *n
 			RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_STATISTICS, 0, NULL, 0);
 			break;
 
+		case RTPRIV_IOCTL_GET_APCLI_CONNSTATUS:
+			RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_CONNSTATUS, 0, NULL, 0);
+			break;
+
 #ifdef WSC_AP_SUPPORT
 		case RTPRIV_IOCTL_WSC_PROFILE:
 			RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_WSC_PROFILE, 0, NULL, 0);
@@ -416,7 +731,15 @@ INT rt28xx_ap_ioctl(struct net_device *n
 			break;
 #endif /* RTMP_RF_RW_SUPPORT */
 #endif /* defined(DBG) ||(defined(BB_SOC)&&defined(RALINK_ATE)) */
+		case SIOCSIWSCAN:
+			if (RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_SIOCSIWSCAN, 0,
+			          net_dev, pIoctlConfig->priv_flags) != NDIS_STATUS_SUCCESS)
+                        {
+                                Status = RTMP_IO_EOPNOTSUPP;
+                                break;
+                        }
 
+			break;
 		default:
 /*			DBGPRINT(RT_DEBUG_ERROR, ("IOCTL::unknown IOCTL's cmd = 0x%08x\n", cmd)); */
 			Status = RTMP_IO_EOPNOTSUPP;
--- a/mt76x2/os/linux/rt_linux.c
+++ b/mt76x2/os/linux/rt_linux.c
@@ -1702,7 +1702,7 @@ int RtmpOSNetDevAttach(
 #endif /*WIRELESS_EXT >= 12 */
 #endif /* CONFIG_STA_SUPPORT */
 
-#ifdef CONFIG_APSTA_MIXED_SUPPORT
+#if 1
 #if WIRELESS_EXT >= 12
 		if (OpMode == OPMODE_AP) {
 /*			pNetDev->wireless_handlers = &rt28xx_ap_iw_handler_def; */
--- a/mt76x2/os/linux/rt_main_dev.c
+++ b/mt76x2/os/linux/rt_main_dev.c
@@ -451,7 +451,7 @@ PNET_DEV RtmpPhyNetDevInit(VOID *pAd, RT
 #endif /*WIRELESS_EXT >= 12 */
 #endif /* CONFIG_STA_SUPPORT */
 
-#ifdef CONFIG_APSTA_MIXED_SUPPORT
+#if 1
 #if WIRELESS_EXT >= 12
 	if (OpMode == OPMODE_AP)
 	{
