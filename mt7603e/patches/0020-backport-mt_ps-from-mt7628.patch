diff --git a/mt76x3/common/cmm_cfg.c b/mt76x3/common/cmm_cfg.c
index 50ca807..a47635b 100644
--- a/mt76x3/common/cmm_cfg.c
+++ b/mt76x3/common/cmm_cfg.c
@@ -1763,6 +1763,79 @@ INT SetPSEWatchDog_Proc(RTMP_ADAPTER *pAd, RTMP_STRING *arg)
 	return TRUE;
 }
 
+INT SetPsmWatchDog_Proc(RTMP_ADAPTER *pAd, RTMP_STRING *arg)
+{
+	UINT32 val = 0;
+	val = simple_strtol(arg, 0, 10);
+
+	pAd->PsmWatchDogDisabled = val;
+
+	return TRUE;
+}
+
+INT SetPsmDbg_Proc(RTMP_ADAPTER *pAd, RTMP_STRING *arg)
+{
+        UINT32 wcid = 0, Value = 0;
+	MAC_TABLE_ENTRY *pEntry = NULL;
+        STA_TR_ENTRY *tr_entry = NULL;
+	struct wtbl_entry tb_entry;
+        union WTBL_1_DW3 *dw3 = (union WTBL_1_DW3 *)&tb_entry.wtbl_1.wtbl_1_d3.word;
+
+    	wcid = simple_strtol(arg, 0, 10);
+	if (wcid < MAX_LEN_OF_MAC_TABLE)
+	{ 
+		pEntry = &pAd->MacTab.Content[wcid];
+        	tr_entry = &pAd->MacTab.tr_entry[wcid];
+	
+		if (IS_ENTRY_CLIENT(pEntry) && (pEntry->Sst == SST_ASSOC))
+                {
+			 NdisZeroMemory(&tb_entry, sizeof(tb_entry));
+                         if (mt_wtbl_get_entry234(pAd, wcid, &tb_entry) == FALSE)
+                         {
+                         	DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS,("%s():Cannot found WTBL2/3/4\n",__FUNCTION__));
+                         	goto err;
+                         }
+                         RTMP_IO_READ32(pAd, tb_entry.wtbl_addr[0]+12, &dw3->word);
+
+                         RTMP_IO_READ32(pAd, WTBL1OR, &Value);
+                         Value |= PSM_W_FLAG;
+                         RTMP_IO_WRITE32(pAd, WTBL1OR, Value);
+
+                         dw3->field.psm = 0;
+                         RTMP_IO_WRITE32(pAd, tb_entry.wtbl_addr[0] + 12, dw3->word);
+
+                         pEntry->PsMode = 0;
+                         tr_entry->PsMode = 0;
+
+                         RTMP_IO_READ32(pAd, WTBL1OR, &Value);
+                         Value &= ~PSM_W_FLAG;
+                         RTMP_IO_WRITE32(pAd, WTBL1OR, Value);
+                         pEntry->PsmResetCount++;
+
+			 NdisZeroMemory(&tb_entry, sizeof(tb_entry));
+                         if (mt_wtbl_get_entry234(pAd, wcid, &tb_entry) == FALSE)
+                         {
+                         	DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS, ("%s():Cannot found WTBL2/3/4\n",__FUNCTION__));
+                                goto err;
+                         }
+
+                         RTMP_IO_READ32(pAd, tb_entry.wtbl_addr[0]+12, &dw3->word);
+                         DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS, ("wcid %d on PSM RES ==> %d\n", wcid, dw3->field.psm));
+		}
+		else
+			goto err;	
+
+	}
+	else
+		goto err;
+
+        return TRUE;
+err:
+	 DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS,(":%s: can't set the psm dbg\n", __FUNCTION__));
+
+	return TRUE;
+}
+
 #ifdef TXRXCR_DEBUG_SUPPORT
 INT SetTxRxCr_Proc(RTMP_ADAPTER *pAd, RTMP_STRING *arg)
 {
diff --git a/mt76x3/common/cmm_info.c b/mt76x3/common/cmm_info.c
index 3da5d5e..abb2f1f 100644
--- a/mt76x3/common/cmm_info.c
+++ b/mt76x3/common/cmm_info.c
@@ -5482,6 +5482,7 @@ static INT dump_ps_table(RTMP_ADAPTER *pAd, UINT32 ent_type, BOOLEAN bReptCli)
 
 		for (i=MAX_LEN_OF_MAC_TABLE; i<MAX_LEN_OF_TR_TABLE; i++)
 		{
+			   PMAC_TABLE_ENTRY pEntry = &pAd->MacTab.Content[i];
 	           STA_TR_ENTRY *tr_entry = &pAd->MacTab.tr_entry[i];
 	           Total_Packet_Number = 0 ;
 
@@ -5536,11 +5537,11 @@ static INT dump_ps_table(RTMP_ADAPTER *pAd, UINT32 ent_type, BOOLEAN bReptCli)
 			printk("\t%-6u", 0);
 			printk("\t%-6u", 0);
 #endif /* !DATA_QUEUE_RESERVE */
-
 #ifdef UAPSD_SUPPORT
-			printk("\t%d,%d,%d,%d", 
-				(int)0, 0, 0, 0);
+		printk("\t%d,%d,%d,%d",
+			(int)pEntry->bAPSDCapablePerAC[QID_AC_BE], pEntry->bAPSDCapablePerAC[QID_AC_BK], pEntry->bAPSDCapablePerAC[QID_AC_VI], pEntry->bAPSDCapablePerAC[QID_AC_VO]);
 #endif /* UAPSD_SUPPORT */
+		DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS,("\t%-6d", (int)pEntry->PsmResetCount));
 	 		printk("\n");
 		}
 
diff --git a/mt76x3/common/mlme.c b/mt76x3/common/mlme.c
index 2db8835..1d6208a 100644
--- a/mt76x3/common/mlme.c
+++ b/mt76x3/common/mlme.c
@@ -1509,7 +1509,11 @@ NTSTATUS MlmePeriodicExec(IN PRTMP_ADAPTER pAd, IN PCmdQElmt CMDQelmt)
 #endif /* CONFIG_AP_SUPPORT */
 #endif /* DFS_SUPPORT */
 
-
+#ifdef CONFIG_AP_SUPPORT
+	 IF_DEV_CONFIG_OPMODE_ON_AP(pAd) {
+         MtPsWatchDog(pAd);
+	 }
+#endif /* CONFIG_AP_SUPPORT */
 
 	/* Normal 1 second Mlme PeriodicExec.*/
 	if (pAd->Mlme.PeriodicRound %MLME_TASK_EXEC_MULTIPLE == 0)
diff --git a/mt76x3/common/mt_ps.c b/mt76x3/common/mt_ps.c
index 37ebc3c..6a87d69 100644
--- a/mt76x3/common/mt_ps.c
+++ b/mt76x3/common/mt_ps.c
@@ -209,10 +209,10 @@ VOID MtHandleRxPsPoll(RTMP_ADAPTER *pAd, UCHAR *pAddr, USHORT wcid, BOOLEAN isAc
 #ifdef MT_PS
 		if (tr_entry->ps_state == APPS_RETRIEVE_DONE) /*state is finish(sleep)*/
 		{				
-			if (pMacEntry->i_psm == I_PSM_DISABLE)
-			{
+// 			if (pMacEntry->i_psm == I_PSM_DISABLE)
+// 			{
 				MT_SET_IGNORE_PSM(pAd, pMacEntry, I_PSM_ENABLE);
-			}
+// 			}
 		}
 
 		if(tr_entry->ps_state == APPS_RETRIEVE_DONE || tr_entry->ps_state == APPS_RETRIEVE_IDLE)
@@ -284,10 +284,10 @@ VOID MtHandleRxPsPoll(RTMP_ADAPTER *pAd, UCHAR *pAddr, USHORT wcid, BOOLEAN isAc
 	{
 		WLAN_MR_TIM_BIT_CLEAR(pAd, tr_entry->func_tb_idx, tr_entry->wcid);
 #ifdef MT_PS
-		if (pMacEntry->i_psm == I_PSM_ENABLE)
-		{
+// 		if (pMacEntry->i_psm == I_PSM_ENABLE)
+// 		{
 			MT_SET_IGNORE_PSM(pAd, pMacEntry, I_PSM_DISABLE);
-		}
+// 		}
 #endif /*Power bit is 1 and ifndef MT_PS */
 
 		DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS, ("RtmpHandleRxPsPoll null0/1 wcid = %x mt_ps_queue.Number = %d\n",
@@ -307,14 +307,14 @@ VOID MtHandleRxPsPoll(RTMP_ADAPTER *pAd, UCHAR *pAddr, USHORT wcid, BOOLEAN isAc
 			tr_entry->TokenCount[QID_AC_VO]));
 
 #ifdef UAPSD_SUPPORT
-		if (CLIENT_STATUS_TEST_FLAG(pMacEntry, fCLIENT_STATUS_APSD_CAPABLE))
-		{
+// 		if (CLIENT_STATUS_TEST_FLAG(pMacEntry, fCLIENT_STATUS_APSD_CAPABLE))
+// 		{
 			/* deliver all queued UAPSD packets */
 			UAPSD_AllPacketDeliver(pAd, pMacEntry);
 
 			/* end the SP if exists */
 			UAPSD_MR_ENTRY_RESET(pAd, pMacEntry);
-		}
+// 		}
 #endif /* UAPSD_SUPPORT */
 
 		if (tr_entry->enqCount > 0) 
@@ -343,6 +343,86 @@ VOID MtHandleRxPsPoll(RTMP_ADAPTER *pAd, UCHAR *pAddr, USHORT wcid, BOOLEAN isAc
 #endif /* CONFIG_AP_SUPPORT */
 }
 
+#define MT_PS_WATCHDOG_THRES 20
+
+VOID MtPsWatchDog(RTMP_ADAPTER *pAd)
+{
+	MAC_TABLE_ENTRY *pEntry = NULL;
+	STA_TR_ENTRY *tr_entry = NULL;
+	INT i = 0;
+	UINT32 Value=0;
+	struct wtbl_entry tb_entry;
+        union WTBL_1_DW3 *dw3 = (union WTBL_1_DW3 *)&tb_entry.wtbl_1.wtbl_1_d3.word;
+
+	if(pAd->PsmWatchDogDisabled)
+	{
+		DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS, ("%s(): DISABLED THE PSM WATCHDOG BY CMD \n",__FUNCTION__));
+		return;
+	}		
+
+	for (i = 1; i< MAX_LEN_OF_MAC_TABLE; i++)   
+        {
+		pEntry = &pAd->MacTab.Content[i];
+		tr_entry = &pAd->MacTab.tr_entry[i];
+
+		if (IS_ENTRY_CLIENT(pEntry) && (pEntry->Sst == SST_ASSOC))
+		{
+			if ((pEntry->PsMode == 0) && (pEntry->PsmPktCount == 0))
+			{
+				NdisZeroMemory(&tb_entry, sizeof(tb_entry));
+                        	if (mt_wtbl_get_entry234(pAd, i, &tb_entry) == FALSE)
+                        	{
+                                	DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS, ("%s():Cannot found WTBL2/3/4\n",__FUNCTION__));
+                                	continue;
+                        	}
+				RTMP_IO_READ32(pAd, tb_entry.wtbl_addr[0]+12, &dw3->word);
+
+				if (dw3->field.psm == 1)
+				{
+					pEntry->PsmUpDuration++;
+					DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS, ("%s(): HIT PsmPktCount/Dur: %d/%d on Wcid %d (SW_PSM:[%d|%d])\n\n\n\n\n",
+                                        	__FUNCTION__, pEntry->PsmPktCount, pEntry->PsmUpDuration, pEntry->wcid, pEntry->PsMode, 
+						tr_entry->PsMode));
+
+		                        if (pEntry->PsmUpDuration >= MT_PS_WATCHDOG_THRES)
+                		        {
+                                		DBGPRINT(RT_DEBUG_INFO | DBG_FUNC_PS, ("%s():Hit the PSM Case > %d x 100ms with Wcid %d (SW_PSM:[%d|%d])\n\n\n\n\n",
+                                        		__FUNCTION__, MT_PS_WATCHDOG_THRES, pEntry->wcid, pEntry->PsMode, tr_entry->PsMode));
+
+
+		                                RTMP_IO_READ32(pAd, WTBL1OR, &Value);
+                		                Value |= PSM_W_FLAG;
+                                		RTMP_IO_WRITE32(pAd, WTBL1OR, Value);
+
+		                                dw3->field.psm = 0;
+                		                RTMP_IO_WRITE32(pAd, tb_entry.wtbl_addr[0] + 12, dw3->word);
+
+                                		pEntry->PsMode = 0;
+                                		tr_entry->PsMode = 0;
+
+		                                RTMP_IO_READ32(pAd, WTBL1OR, &Value);
+                		                Value &= ~PSM_W_FLAG;
+                                		RTMP_IO_WRITE32(pAd, WTBL1OR, Value);
+                                		pEntry->PsmResetCount++;
+
+                		        }
+				}
+				else
+				{
+					pEntry->PsmPktCount = 0;
+                                	pEntry->PsmUpDuration = 0;
+				}
+
+			}
+			else
+			{
+				pEntry->PsmPktCount = 0;
+				pEntry->PsmUpDuration = 0;
+			}
+		}
+	}
+
+}
 
 /*
 	==========================================================================
@@ -614,17 +694,17 @@ VOID MtEnqTxSwqFromPsQueue(RTMP_ADAPTER *pAd, UCHAR qidx, STA_TR_ENTRY *tr_entry
 #endif /* UAPSD_SUPPORT */
 	{
 		/*check and insert PS Token queue*/
-		if(pAcPsQue->Number > 0  && tr_entry->wcid > 0 && tr_entry->wcid < MAX_LEN_OF_TR_TABLE)
-		{
-			rtmp_ps_enq(pAd,tr_entry);
-			DBGPRINT(RT_DEBUG_TRACE | DBG_FUNC_PS, ("pAcPsQue->Number=%d,PS:%d\n",pAcPsQue->Number,tr_entry->PsTokenFlag));			
-		}
+// 		if(pAcPsQue->Number > 0  && tr_entry->wcid > 0 && tr_entry->wcid < MAX_LEN_OF_TR_TABLE)
+// 		{
+// 			rtmp_ps_enq(pAd,tr_entry);
+// 			DBGPRINT(RT_DEBUG_TRACE | DBG_FUNC_PS, ("pAcPsQue->Number=%d,PS:%d\n",pAcPsQue->Number,tr_entry->PsTokenFlag));			
+// 		}
 
 		while(pAcPsQue->Head)
 		{
 			pQEntry = RemoveTailQueue(pAcPsQue);
 			if(tr_entry->enqCount > SQ_ENQ_NORMAL_MAX) {
-			RELEASE_NDIS_PACKET(pAd, QUEUE_ENTRY_TO_PACKET(pQEntry), NDIS_STATUS_FAILURE);
+				RELEASE_NDIS_PACKET(pAd, pQEntry, NDIS_STATUS_FAILURE);
 			continue;
                         }
 		InsertHeadQueue(pAcTxQue, pQEntry); 			
diff --git a/mt76x3/include/rtmp.h b/mt76x3/include/rtmp.h
index da77ddb..7418ce1 100644
--- a/mt76x3/include/rtmp.h
+++ b/mt76x3/include/rtmp.h
@@ -2802,6 +2802,9 @@ typedef struct _MAC_TABLE_ENTRY {
 #endif /* WSC_INCLUDED */
 #endif /* MT_MAC */
 
+	UINT   PsmUpDuration;
+	UINT32 PsmPktCount; 
+	UINT32 PsmResetCount;
 } MAC_TABLE_ENTRY, *PMAC_TABLE_ENTRY;
 
 
@@ -4713,6 +4716,7 @@ MONITOR_STRUCT monitor_ctrl;
 	ULONG PSETriggerType2Count;
 	ULONG PSEResetFailCount;
 	BOOLEAN pse_reset_exclude_flag;	
+	BOOLEAN PsmWatchDogDisabled;
 #ifdef DMA_RESET_SUPPORT
 	UINT32 bcn_didx_val;
 	UCHAR bcn_not_idle_tx_dma_busy;
@@ -7596,6 +7600,8 @@ INT SetPSEWatchDog_Proc(RTMP_ADAPTER *pAd, RTMP_STRING *arg);
 INT SetTxRxCr_Proc(RTMP_ADAPTER *pAd, RTMP_STRING *arg);
 #endif /* TXRXCR_DEBUG_SUPPORT */
 
+INT SetPsmDbg_Proc(RTMP_ADAPTER *pAd, RTMP_STRING *arg);
+INT SetPsmWatchDog_Proc(RTMP_ADAPTER *pAd, RTMP_STRING *arg);
 
 NDIS_STATUS RTMPWPARemoveKeyProc(
 	IN  RTMP_ADAPTER *pAd,
@@ -9510,6 +9516,8 @@ BOOLEAN Monitor_Open(RTMP_ADAPTER *pAd, PNET_DEV dev_p);
 BOOLEAN Monitor_Close(RTMP_ADAPTER *pAd, PNET_DEV dev_p);
 #endif /* CONFIG_SNIFFER_SUPPORT */
 
+VOID MtPsWatchDog(RTMP_ADAPTER *pAd);
+
 #if defined(MT_MAC) && defined(WSC_INCLUDED) && defined(CONFIG_AP_SUPPORT)
 VOID WscEapReqIdRetryTimeout(
 	IN PVOID SystemSpecific1,
diff --git a/mt76x3/mgmt/mgmt_entrytb.c b/mt76x3/mgmt/mgmt_entrytb.c
index 0ec6e89..87c8b68 100644
--- a/mt76x3/mgmt/mgmt_entrytb.c
+++ b/mt76x3/mgmt/mgmt_entrytb.c
@@ -417,6 +417,11 @@ MAC_TABLE_ENTRY *MacTableInsertEntry(
 			pEntry->LockEntryTx = FALSE;
 #endif /* WDS_SUPPORT */
 			pEntry->TimeStamp_toTxRing = 0;
+			
+            pEntry->PsmPktCount = 0;
+            pEntry->PsmUpDuration = 0;
+			pEntry->PsmResetCount = 0;
+			
 			// TODO: shiang-usw,  remove upper setting becasue we need to migrate to tr_entry!
 			pAd->MacTab.tr_entry[i].PsMode = PWR_ACTIVE;
 			pAd->MacTab.tr_entry[i].NoDataIdleCount = 0;
