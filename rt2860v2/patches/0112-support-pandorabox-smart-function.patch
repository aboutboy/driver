diff --git a/rt2860v2/ap/ap_cfg.c b/rt2860v2/ap/ap_cfg.c
old mode 100644
new mode 100755
index 745625a..501bde2
--- a/rt2860v2/ap/ap_cfg.c
+++ b/rt2860v2/ap/ap_cfg.c
@@ -157,6 +157,11 @@ COUNTRY_CODE_TO_COUNTRY_REGION allCountry[] = {
 #define NUM_OF_COUNTRIES	(sizeof(allCountry)/sizeof(COUNTRY_CODE_TO_COUNTRY_REGION))
 
 
+INT Set_PandoraBoxSmartEnable(
+	IN	PRTMP_ADAPTER	pAd,
+	IN	PSTRING 		arg);
+
+
 INT Set_CountryString_Proc(
 	IN	PRTMP_ADAPTER	pAd, 
 	IN	PSTRING			arg);
@@ -769,6 +774,7 @@ static struct {
 	INT (*set_proc)(PRTMP_ADAPTER pAdapter, PSTRING arg);
 } *PRTMP_PRIVATE_SET_PROC, RTMP_PRIVATE_SUPPORT_PROC[] = {
 	{"RateAlg",						Set_RateAlg_Proc},
+	{"PandoraBoxSmart",		Set_PandoraBoxSmartEnable},
 #ifdef NEW_RATE_ADAPT_SUPPORT
 	{"PerThrdAdj",					Set_PerThrdAdj_Proc},
 	{"LowTrafficThrd",				Set_LowTrafficThrd_Proc},
@@ -1543,6 +1549,30 @@ INT RTMPAPPrivIoctlAR9Show(
 #endif /*AR9_MAPI_SUPPORT*/
 #endif/*AR9_INF*/
 
+#if 1
+INT Set_PandoraBoxSmartEnable(
+	IN	PRTMP_ADAPTER	pAd,
+	IN	PSTRING 		arg)
+{
+	UINT	enable = 0/*, apidx = 0*/;
+
+   enable = simple_strtol(arg, 0, 16);
+
+   if (enable==0x1)
+   {
+       pAd->bPandoraBoxSmartEn = 1;
+       DBGPRINT(RT_DEBUG_TRACE, ("###Set to PandoraBoxSmart Function Enable..\n"));
+   }
+   else /* Disable Airplay*/
+   {
+      pAd->bPandoraBoxSmartEn = 0;
+      DBGPRINT(RT_DEBUG_TRACE, ("###Set to PandoraBoxSmart Function Disable...\n"));
+   }
+
+   return TRUE;
+}
+#endif
+
 INT RTMPAPSetInformation(
 	IN	PRTMP_ADAPTER pAd,
 	IN	OUT	RTMP_IOCTL_INPUT_STRUCT	*rq,
diff --git a/rt2860v2/common/cmm_profile.c b/rt2860v2/common/cmm_profile.c
old mode 100644
new mode 100755
index a0e47f2..0e230fb
--- a/rt2860v2/common/cmm_profile.c
+++ b/rt2860v2/common/cmm_profile.c
@@ -2572,6 +2572,18 @@ NDIS_STATUS	RTMPSetProfileParameters(
 			retval = RT_CfgSetCountryRegion(pAd, tmpbuf, BAND_24G);
 			DBGPRINT(RT_DEBUG_TRACE, ("CountryRegion=%d\n", pAd->CommonCfg.CountryRegion));
 		}
+
+#if 1
+		if(RTMPGetKeyParameter("PandoraBoxSmart", tmpbuf, 10, pBuffer, TRUE))
+		{
+			if(simple_strtol(tmpbuf, 0, 10) != 0)  /*Enable*/
+				pAd->bPandoraBoxSmartEn = TRUE;
+			else /*Disable*/
+				pAd->bPandoraBoxSmartEn = FALSE;
+			DBGPRINT(RT_DEBUG_TRACE, ("PandoraBox SmartFunction is %s!!!\n", pAd->bPandoraBoxSmartEn?"enabled":"disabled"));
+		}
+#endif
+
 		/*CountryRegionABand*/
 		if(RTMPGetKeyParameter("CountryRegionABand", tmpbuf, 25, pBuffer, TRUE))
 		{
diff --git a/rt2860v2/include/rtmp.h b/rt2860v2/include/rtmp.h
index d716b66..faf41df 100755
--- a/rt2860v2/include/rtmp.h
+++ b/rt2860v2/include/rtmp.h
@@ -3549,6 +3549,7 @@ struct _RTMP_ADAPTER {
 	RTMP_CHIP_OP chipOps;
 	RTMP_CHIP_CAP chipCap;
 
+	BOOLEAN 		bPandoraBoxSmartEn;
 #ifdef CONFIG_STA_SUPPORT
 	USHORT ThisTbttNumToNextWakeUp;
 #endif /* CONFIG_STA_SUPPORT */
diff --git a/rt2860v2/rate_ctrl/alg_grp.c b/rt2860v2/rate_ctrl/alg_grp.c
index 698736a..df31c87 100755
--- a/rt2860v2/rate_ctrl/alg_grp.c
+++ b/rt2860v2/rate_ctrl/alg_grp.c
@@ -754,8 +754,31 @@ VOID MlmeNewRateAdapt(
 #endif /*  TXBF_SUPPORT */
 		if (CurrRateIdx != DownRateIdx)
  		{
-			RTMP_TX_RATE_SWITCH *pDownTxRate = PTX_RATE_SWITCH_ENTRY(pTable, DownRateIdx);
-
+//			RTMP_TX_RATE_SWITCH *pDownTxRate = PTX_RATE_SWITCH_ENTRY(pTable, DownRateIdx);
+#if 1
+			if(pAd->bPandoraBoxSmartEn) {
+						UCHAR *pTable = pEntry->pTable;
+						CHAR Rssi;
+						RTMP_TX_RATE_SWITCH *pCurrTxRate; //RTMP_RA_LEGACY_TB *pCurrTxRate;
+
+						Rssi = RTMPAvgRssi(pAd, &pEntry->RssiSample);
+						pCurrTxRate = PTX_RATE_SWITCH_ENTRY(pTable, CurrRateIdx); //pCurrTxRate = PTX_RA_LEGACY_ENTRY(pTable, CurrRateIdx);
+
+						if(Rssi > -60 && pCurrTxRate->CurrMCS == 3)
+						{
+							pEntry->LastSecTxRateChangeAction = RATE_NO_CHANGE;
+							printk("%s;%d;fix lowest mcs=3;pCurrTxRate->CurrMCS=%d=\n",__FUNCTION__,__LINE__,pCurrTxRate->CurrMCS);
+						}
+						else
+						{
+						pEntry->CurrTxRateIndex = DownRateIdx;
+						pEntry->LastSecTxRateChangeAction = RATE_DOWN;
+						}
+			} else {
+						pEntry->CurrTxRateIndex = DownRateIdx;
+						pEntry->LastSecTxRateChangeAction = RATE_DOWN;
+			}
+#else
 			/*If MODE_HTMIX Mode but pCurrTxRate == MCS_3,not drop*/
 			if( (Rssi > -65) && ( pCurrTxRate->Mode >= MODE_HTMIX ) && ( CurrRateIdx == NearStaLimitDownMCS) )
 			{
@@ -789,6 +812,7 @@ VOID MlmeNewRateAdapt(
 				pEntry->CurrTxRateIndex = DownRateIdx;
 				pEntry->LastSecTxRateChangeAction = RATE_DOWN;
 			}
+#endif
  		}
 	}
 	else
diff --git a/rt2860v2/rate_ctrl/alg_legacy.c b/rt2860v2/rate_ctrl/alg_legacy.c
index 30e3408..d80b3c5 100755
--- a/rt2860v2/rate_ctrl/alg_legacy.c
+++ b/rt2860v2/rate_ctrl/alg_legacy.c
@@ -1734,8 +1734,27 @@ VOID MlmeOldRateAdapt(
 #endif /* TXBF_SUPPORT */
 		if (CurrRateIdx != DownRateIdx)
 		{
-			pEntry->CurrTxRateIndex = DownRateIdx;
-			pEntry->LastSecTxRateChangeAction = RATE_DOWN;
+			if(pAd->bPandoraBoxSmartEn) {
+						UCHAR *pTable = pEntry->pTable;
+						CHAR Rssi;
+						RTMP_TX_RATE_SWITCH *pCurrTxRate;
+
+						Rssi = RTMPAvgRssi(pAd, &pEntry->RssiSample);
+						pCurrTxRate = PTX_RATE_SWITCH_ENTRY(pTable, CurrRateIdx);
+
+						if((Rssi > -60) && (pCurrTxRate->CurrMCS == 3))
+						{
+							pEntry->LastSecTxRateChangeAction = RATE_NO_CHANGE;
+						}
+						else
+						{
+							pEntry->CurrTxRateIndex = DownRateIdx;
+							pEntry->LastSecTxRateChangeAction = RATE_DOWN;
+						}
+			} else {
+						pEntry->CurrTxRateIndex = DownRateIdx;
+						pEntry->LastSecTxRateChangeAction = RATE_DOWN;
+			}
 		}
 	}
 	else
