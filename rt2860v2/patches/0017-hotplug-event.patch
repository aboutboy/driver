diff --git a/rt2860v2/common/cmm_data.c b/rt2860v2/common/cmm_data.c
old mode 100644
new mode 100755
index 8ffd9ae..6875eb3
--- a/rt2860v2/common/cmm_data.c
+++ b/rt2860v2/common/cmm_data.c
@@ -51,6 +51,8 @@ UCHAR	 RxwiMCSToOfdmRate[12] = {
 
 UCHAR MapUserPriorityToAccessCategory[8] = {QID_AC_BE, QID_AC_BK, QID_AC_BK, QID_AC_BE, QID_AC_VI, QID_AC_VI, QID_AC_VO, QID_AC_VO};
 
+extern void port_link_hotplug_work(char name[], int link_status, unsigned char MAC[], unsigned int speed, int signal);
+extern int get_rate(MACHTTRANSMIT_SETTING TxRate);
 
 /*
 	========================================================================
@@ -3302,6 +3304,30 @@ BOOLEAN MacTableDeleteEntry(
 
 	if (pEntry && !IS_ENTRY_NONE(pEntry))
 	{
+#if 1
+// Filename: sync.c ; 
+// Function: PeerBeaconAtJoinAction();
+
+int signal=0;
+unsigned char mac_addr[24]={0};
+MACHTTRANSMIT_SETTING tx_parameter;
+sprintf(mac_addr, "%02x:%02x:%02x:%02x:%02x:%02x",  \
+		pAd->MacTab.Content[wcid].Addr[0], pAd->MacTab.Content[wcid].Addr[1],\
+		pAd->MacTab.Content[wcid].Addr[2], pAd->MacTab.Content[wcid].Addr[3],\
+		pAd->MacTab.Content[wcid].Addr[4], pAd->MacTab.Content[wcid].Addr[5]);
+
+tx_parameter.word          = pAd->MacTab.Content[wcid].HTPhyMode.word;
+tx_parameter.field.MODE    = pAd->MacTab.Content[wcid].HTPhyMode.field.MODE;
+tx_parameter.field.BW      = pAd->MacTab.Content[wcid].HTPhyMode.field.BW;
+tx_parameter.field.MCS     = pAd->MacTab.Content[wcid].HTPhyMode.field.MCS;
+tx_parameter.field.ShortGI = pAd->MacTab.Content[wcid].HTPhyMode.field.ShortGI;
+
+signal = ((int)(pAd->MacTab.Content[wcid].RssiSample.LastRssi0) + \
+	  (int)(pAd->MacTab.Content[wcid].RssiSample.LastRssi1))/2;
+
+printk("WLAN:STA %s(dev:%s rate:%dMbps singnal:%ddBm) disconnect!\n", mac_addr, pAd->net_dev->name,get_rate(tx_parameter), signal);
+port_link_hotplug_work(pAd->net_dev->name, 0, mac_addr, get_rate(tx_parameter), signal);
+#endif
 		/* ENTRY PREEMPTION: Cancel all timers */
 		RTMPCancelTimer(&pEntry->RetryTimer, &Cancelled);
 		RTMPCancelTimer(&pEntry->Start2WayGroupHSTimer, &Cancelled);
@@ -4095,7 +4121,8 @@ VOID Update_Rssi_Sample(
 	UCHAR snr1 = pRxWI->SNR1;
 	CHAR Phymode = pRxWI->PHYMODE;
 	BOOLEAN bInitial = FALSE;
- 
+
+
 	if (!(pRssi->AvgRssi0 | pRssi->AvgRssi0X8 | pRssi->LastRssi0))
 	{
 		bInitial = TRUE;
diff --git a/rt2860v2/common/wifi_netlink.c b/rt2860v2/common/wifi_netlink.c
new file mode 100644
index 0000000..de17e70
--- /dev/null
+++ b/rt2860v2/common/wifi_netlink.c
@@ -0,0 +1,182 @@
+#include "rt_config.h"
+
+#define PORT_SKB_SIZE	2048
+
+#if 1
+int MCSMappingRateTable[] =
+{
+	 2,  4,   11,  22,								// CCK
+
+	12,  18,  24,  36,  48,  72,  96, 108,						// OFDM
+
+	13,  26,  39,  52,  78, 104, 117, 130, 26,  52,  78, 104, 156, 208, 234, 260,	// 11n: 20MHz, 800ns GI, MCS: 0 ~ 15
+	39,  78, 117, 156, 234, 312, 351, 390,						// 11n: 20MHz, 800ns GI, MCS: 16 ~ 23
+	27,  54,  81, 108, 162, 216, 243, 270, 54, 108, 162, 216, 324, 432, 486, 540,	// 11n: 40MHz, 800ns GI, MCS: 0 ~ 15
+	81, 162, 243, 324, 486, 648, 729, 810,						// 11n: 40MHz, 800ns GI, MCS: 16 ~ 23
+	14,  29,  43,  57,  87, 115, 130, 144, 29, 59,   87, 115, 173, 230, 260, 288,	// 11n: 20MHz, 400ns GI, MCS: 0 ~ 15
+	43,  87, 130, 173, 260, 317, 390, 433,						// 11n: 20MHz, 400ns GI, MCS: 16 ~ 23
+	30,  60,  90, 120, 180, 240, 270, 300, 60, 120, 180, 240, 360, 480, 540, 600,	// 11n: 40MHz, 400ns GI, MCS: 0 ~ 15
+	90, 180, 270, 360, 540, 720, 810, 900,
+
+	13,  26,  39,  52,  78, 104, 117, 130, 156,					// 11ac: 20Mhz, 800ns GI, MCS: 0~8
+	27,  54,  81, 108, 162, 216, 243, 270, 324, 360,				// 11ac: 40Mhz, 800ns GI, MCS: 0~9
+	59, 117, 176, 234, 351, 468, 527, 585, 702, 780,				// 11ac: 80Mhz, 800ns GI, MCS: 0~9
+	14,  29,  43,  57,  87, 115, 130, 144, 173,					// 11ac: 20Mhz, 400ns GI, MCS: 0~8
+	30,  60,  90, 120, 180, 240, 270, 300, 360, 400,				// 11ac: 40Mhz, 400ns GI, MCS: 0~9
+	65, 130, 195, 260, 390, 520, 585, 650, 780, 867					// 11ac: 80Mhz, 400ns GI, MCS: 0~9
+};
+
+
+int get_rate(MACHTTRANSMIT_SETTING TxRate)
+{
+	int rate_count = sizeof(MCSMappingRateTable)/sizeof(int);
+	int rate_index = 0;
+	int num_ss_vht = 1;
+
+	if (TxRate.field.MODE >= MODE_HTMIX)
+		rate_index = 12 + ((unsigned char)TxRate.field.BW * 24) + ((unsigned char)TxRate.field.ShortGI * 48) + ((unsigned char)TxRate.field.MCS);
+	else if (TxRate.field.MODE == MODE_OFDM)
+		rate_index = (unsigned char)(TxRate.field.MCS) + 4;
+	else if (TxRate.field.MODE == MODE_CCK)
+		rate_index = (unsigned char)(TxRate.field.MCS);
+
+	if (rate_index < 0)
+		rate_index = 0;
+
+	if (rate_index >= rate_count)
+		rate_index = rate_count-1;
+
+	return (MCSMappingRateTable[rate_index] * num_ss_vht * 5)/10;
+}
+#endif
+
+struct port_event {
+	char	name[8];
+	char		*type;
+	unsigned char	MAC[32]; // MAC address
+	unsigned int	speed;   //300MHz
+	unsigned long	timer;   //60min
+	int signal;
+	char		*action; // clinet CONNECT:DISCONNECT
+	
+	struct work_struct	working; // 定义相关数据 work
+	struct sk_buff	*skb;
+};
+
+/* -------------------port netlink------------------------------------*/
+static int port_event_add_var(struct port_event *event, int argv,
+		const char *format, ...)
+{
+	static char buf[128];
+	char *s;
+	va_list args;
+	int len;
+
+	if (argv)
+		return 0;
+
+	va_start(args, format);
+	len = vsnprintf(buf, sizeof(buf), format, args);
+	va_end(args);
+
+	if (len >= sizeof(buf)) {
+		printk("buffer size too small\n");
+		WARN_ON(1);
+		return -ENOMEM;
+	}
+
+	s = skb_put(event->skb, len + 1);
+	strcpy(s, buf);
+
+ 	//printk("[hotplug]added variable '%s'\n", s);
+
+	return 0;
+}
+
+
+ // 编写要提交到工作队列中的函数
+static void port_link_hotplug(struct work_struct *work)
+{
+	int ret;
+	struct port_event *event = container_of(work, struct port_event, working); // 获取event的地址
+
+	event->skb = alloc_skb(PORT_SKB_SIZE, GFP_ATOMIC);
+	
+	if (!event->skb)
+		goto out_free_event;
+
+	ret = port_event_add_var(event, 0, "%s@", event->action);
+	if (ret)
+		goto out_free_skb;
+
+	ret = port_event_add_var(event, 0, "HOME=%s", "/");
+	if (ret)
+		goto out_free_skb;
+
+	ret = port_event_add_var(event, 0, "PATH=%s",
+					"/sbin:/bin:/usr/sbin:/usr/bin");
+	if (ret)
+		goto out_free_skb;
+
+	ret = port_event_add_var(event, 0, "SUBSYSTEM=%s", event->type);
+	if (ret)
+		goto out_free_skb;
+
+	ret = port_event_add_var(event, 0, "WIFIDEV=%s", event->name);
+	if (ret)
+		goto out_free_skb;
+
+	ret = port_event_add_var(event, 0, "ACTION=%s", event->action);
+	if (ret)
+		goto out_free_skb;
+
+	ret = port_event_add_var(event, 0, "MAC=%s", event->MAC);
+	if (ret)
+		goto out_free_skb;
+
+	ret = port_event_add_var(event, 0, "SPEED=%d", event->speed);
+	if (ret)
+		goto out_free_skb;
+
+	ret = port_event_add_var(event, 0, "SIGNAL=%d", event->signal);
+	if (ret)
+		goto out_free_skb;
+
+//	ret = port_event_add_var(event, 0, "TIME=%d", time);
+//	if (ret)
+//		goto out_free_skb;
+
+	NETLINK_CB(event->skb).dst_group = 1;
+	broadcast_uevent(event->skb, 0, 1, GFP_KERNEL);  //自己会释放skb_buff
+
+ out_free_skb:
+	if (ret) {
+		printk("work error %d\n", ret);
+		kfree_skb(event->skb);
+	}
+
+ out_free_event:
+	kfree(event); // 释放event
+	return;
+}
+
+
+void port_link_hotplug_work(char name[], int link_status, unsigned char MAC[], unsigned int speed, int signal)
+{
+
+	struct port_event *event;
+
+	event = kzalloc(sizeof(*event), GFP_ATOMIC);
+	memset(event->name, 0, sizeof(event->name));
+	memset(event->MAC, 0, sizeof(event->MAC));
+
+	event->type = "wifi";
+	memcpy(event->name, name, strlen(name));
+	memcpy(event->MAC, MAC, strlen(MAC));
+	event->speed = speed;
+	event->action = link_status? "CONNECT":"DISCONNECT";
+	event->signal = signal;
+
+	INIT_WORK(&event->working, (void *)(void *)port_link_hotplug); // 完成数据的初始化工作
+	schedule_work(&event->working); // 将任务提交到工作队列
+}
diff --git a/rt2860v2/os/linux/rbus_main_dev.c b/rt2860v2/os/linux/rbus_main_dev.c
index 504445e..2724c41 100644
--- a/rt2860v2/os/linux/rbus_main_dev.c
+++ b/rt2860v2/os/linux/rbus_main_dev.c
@@ -196,4 +196,4 @@ VOID rt2880_module_exit(VOID)
 }
 
 
-MODULE_LICENSE("Proprietary");
+MODULE_LICENSE("GPL");
diff --git a/rt2860v2/os/linux/rt_profile.c b/rt2860v2/os/linux/rt_profile.c
old mode 100644
new mode 100755
index 6f75ef5..5d3659f
--- a/rt2860v2/os/linux/rt_profile.c
+++ b/rt2860v2/os/linux/rt_profile.c
@@ -277,6 +277,10 @@ NDIS_STATUS	RTMPReadParametersHook(
 
 	========================================================================
 */
+
+extern void port_link_hotplug_work(char name[], int link_status, unsigned char MAC[], unsigned int speed, int signal);
+extern int get_rate(MACHTTRANSMIT_SETTING TxRate);
+
 VOID RtmpDrvSendWirelessEvent(
 	IN	VOID					*pAdSrc,
 	IN	USHORT					Event_flag,
@@ -342,8 +346,7 @@ VOID RtmpDrvSendWirelessEvent(
 		/*Prepare the payload */
 		memset(pBuf, 0, IW_CUSTOM_MAX_LEN);
 
-		pBufPtr = pBuf;		
-
+		pBufPtr = pBuf;
 		if (pAddr)
 			pBufPtr += sprintf(pBufPtr, "(RT2860) STA(%02x:%02x:%02x:%02x:%02x:%02x) ", PRINT_MAC(pAddr));				
 		else if (BssIdx < MAX_MBSSID_NUM(pAd))
@@ -352,13 +355,105 @@ VOID RtmpDrvSendWirelessEvent(
 			pBufPtr += sprintf(pBufPtr, "(RT2860) ");
 
 		if (type == IW_SYS_EVENT_FLAG_START)
-        {
+		{
 			pBufPtr += sprintf(pBufPtr, "%s", pWirelessSysEventText[event]);
 		    
             if (Event_flag == IW_CHANNEL_CHANGE_EVENT_FLAG)
 		  	{
 			 	pBufPtr += sprintf(pBufPtr, "%3d", Rssi);
-			}			
+			}
+#if 1
+			int signal=0, wcid=-1, switch_mac_flag=1;
+			unsigned char mac_addr[24]={0}, mac_in_list[24]={0};
+			MACHTTRANSMIT_SETTING tx_parameter;
+			MAC_TABLE_ENTRY *pEntry;
+			UINT16 i;
+			//union WTBL_2_DW13 wtbl_2_d13;
+			//INT32 Rssi0 = 0, Rssi1 = 0, Rssi2 = 0;
+			//INT32 TotalRssi0 = 0, TotalRssi1 = 0, TotalRssi2 = 0;
+			
+			POS_COOKIE pObj = (POS_COOKIE) pAd->OS_Cookie;
+			NDIS_802_11_AUTHENTICATION_MODE AuthMode = Ndis802_11AuthModeMax;
+
+			AuthMode=pAd->ApCfg.MBSSID[pObj->ioctl_if].AuthMode;
+			if(AuthMode != Ndis802_11AuthModeMax)
+			{
+				if(AuthMode >= Ndis802_11AuthModeWPA)
+				{
+					if((event != 13) && (event != 14)) // WPA/PSK,	WPA2/PSK
+					{
+						goto if_end;
+					}
+				}
+			}
+
+			if (pAddr)
+				sprintf(mac_in_list, "%02x:%02x:%02x:%02x:%02x:%02x", PRINT_MAC(pAddr));
+
+			// get signal;
+			// signal RSSI;  "Elem->Wcid" or "wcid";
+			/*	signal = ((int)(pAd->MacTab.Content[Elem->Wcid].RssiSample.LastRssi[0]) + \
+					(int)(pAd->MacTab.Content[Elem->Wcid].RssiSample.LastRssi[1]))/2;
+				signal = ((int)(pAd->MacTab.Content[wcid].RssiSample.LastRssi0) + \
+					(int)(pAd->MacTab.Content[wcid].RssiSample.LastRssi1))/2;
+			*/	
+			signal =((pAd->ApCfg.RssiSample.LastRssi0 - pAd->BbpRssiToDbmDelta) + \
+				(pAd->ApCfg.RssiSample.LastRssi1 - pAd->BbpRssiToDbmDelta)) / 2;
+			
+			/* FIXME: first client  connect this AP, RSSI=0 */
+			if(signal >= 0)
+			{
+				// signal = pAd->CommonCfg.TxPowerShow; // case CMD_RTPRIV_IOCTL_AP_SIOCGIWTXPOW:   SIOCGIWSTATS
+				signal = -40; // Update_Rssi_Sample();
+			}
+			
+			for (i = 1; i < MAX_LEN_OF_MAC_TABLE; i++)
+			{
+				pEntry = &pAd->MacTab.Content[i];
+				if (pEntry)
+				{
+					if(switch_mac_flag)
+					{
+						sprintf(mac_addr, "%02x:%02x:%02x:%02x:%02x:%02x",	\
+								pAd->MacTab.Content[i].Addr[0], pAd->MacTab.Content[i].Addr[1],\
+								pAd->MacTab.Content[i].Addr[2], pAd->MacTab.Content[i].Addr[3],\
+								pAd->MacTab.Content[i].Addr[4], pAd->MacTab.Content[i].Addr[5]);
+			
+						if(!strcmp(mac_addr, mac_in_list) && strcmp(mac_addr, "00:00:00:00:00:00"))
+						{
+							switch_mac_flag = 0;
+							wcid = i;
+						}
+					}
+				}
+			}
+
+			if(wcid > 0)
+			{
+				// 802.11n.
+				tx_parameter.word		= pAd->MacTab.Content[wcid].HTPhyMode.word;
+				tx_parameter.field.MODE	= pAd->MacTab.Content[wcid].HTPhyMode.field.MODE;
+				tx_parameter.field.BW		= pAd->MacTab.Content[wcid].HTPhyMode.field.BW;
+				tx_parameter.field.MCS	= pAd->MacTab.Content[wcid].HTPhyMode.field.MCS;
+				tx_parameter.field.ShortGI	= pAd->MacTab.Content[wcid].HTPhyMode.field.ShortGI;
+				//  802.11g , 54Mbps.
+				if(tx_parameter.word == 0)
+				{
+					tx_parameter.field.MODE	= pAd->ApCfg.MBSSID[wcid].HTPhyMode.field.MODE;;
+					tx_parameter.field.BW		= pAd->ApCfg.MBSSID[wcid].HTPhyMode.field.BW;
+					tx_parameter.field.MCS	= pAd->ApCfg.MBSSID[wcid].HTPhyMode.field.MCS;
+					tx_parameter.field.ShortGI	= pAd->ApCfg.MBSSID[wcid].HTPhyMode.field.ShortGI;
+				}
+
+				// pWirelessSysEventText[0]="had associated successfully";
+				// 13:WPAPSK; 14:WPA2PSK;
+				if((event == 0) || (event == 13) || (event == 14))
+				{
+					printk("WLAN:STA %s(dev:%s rate:%dMbps RSSI:%ddBm) associated! \n", mac_addr, pAd->net_dev->name,get_rate(tx_parameter), signal);
+					port_link_hotplug_work(pAd->net_dev->name, 1, mac_addr, get_rate(tx_parameter), signal);
+				}
+			}
+#endif
 		}
 #ifdef IDS_SUPPORT		
 		else if (type == IW_SPOOF_EVENT_FLAG_START)
@@ -378,7 +473,8 @@ VOID RtmpDrvSendWirelessEvent(
 #endif /* CONFIG_STA_SUPPORT */
 		else
 			pBufPtr += sprintf(pBufPtr, "%s", "unknown event");
-		
+
+if_end:
 		pBufPtr[pBufPtr - pBuf] = '\0';
 		BufLen = pBufPtr - pBuf;
 		
diff --git a/rt2860v2_ap/Makefile b/rt2860v2_ap/Makefile
index 57ec3f6..f7d94f1 100644
--- a/rt2860v2_ap/Makefile
+++ b/rt2860v2_ap/Makefile
@@ -40,6 +40,7 @@ rt2860v2_ap-objs += ../rt2860v2/common/cmm_cmd.o
 rt2860v2_ap-objs += ../rt2860v2/common/rtmp_swmcu.o
 rt2860v2_ap-objs += ../rt2860v2/common/rt_os_util.o
 rt2860v2_ap-objs += ../rt2860v2/common/eeprom.o
+rt2860v2_ap-objs += ../rt2860v2/common/wifi_netlink.o
 rt2860v2_ap-objs += ../rt2860v2/common/ee_flash.o
 rt2860v2_ap-objs += ../rt2860v2/common/cmm_mac_pci.o
 rt2860v2_ap-objs += ../rt2860v2/common/cmm_data_pci.o
