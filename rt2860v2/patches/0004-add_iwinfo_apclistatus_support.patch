--- a/rt2860v2/ap/ap.c
+++ b/rt2860v2/ap/ap.c
@@ -1303,13 +1303,9 @@ VOID MacTableMaintenance(
 			pEntry->PsQIdleCount ++;  
 			if (pEntry->PsQIdleCount > 2) 
 			{
-#ifdef RTMP_MAC_PCI
 				RTMP_IRQ_LOCK(&pAd->irq_lock, IrqFlags);
-#endif /* RTMP_MAC_PCI */
 				APCleanupPsQueue(pAd, &pEntry->PsQueue);
-#ifdef RTMP_MAC_PCI
 				RTMP_IRQ_UNLOCK(&pAd->irq_lock, IrqFlags);
-#endif /* RTMP_MAC_PCI */
 				pEntry->PsQIdleCount = 0;
 				WLAN_MR_TIM_BIT_CLEAR(pAd, pEntry->apidx, pEntry->Aid);
 			}
--- a/rt2860v2/ap/ap_apcli.c
+++ b/rt2860v2/ap/ap_apcli.c
@@ -439,8 +439,11 @@ BOOLEAN ApCliLinkUp(
 						pMacEntry->PortSecured = WPA_802_1X_PORT_NOT_SECURED;
 				else
 #endif /*APCLI_WPA_SUPPLICANT_SUPPORT*/
-
-				pMacEntry->PortSecured = WPA_802_1X_PORT_SECURED;
+				{
+					pMacEntry->PortSecured = WPA_802_1X_PORT_SECURED;
+					pApCliEntry->ConnectState = APCLI_NOT_TRIGGER_CONNECT;
+					pApCliEntry->FailReason = 0;
+				}
 #ifdef MAC_REPEATER_SUPPORT
 				if (CliIdx != 0xFF)
 					pAd->ApCfg.ApCliTab[ifIndex].RepeaterCli[CliIdx].CliConnectState = 2;
--- a/rt2860v2/ap/ap_apcli_inf.c
+++ b/rt2860v2/ap/ap_apcli_inf.c
@@ -88,7 +88,8 @@ VOID RT28xx_ApCli_Init(
 	netDevOpHook.stop = ApCli_VirtualIF_Close;
 	netDevOpHook.xmit = ApCli_VirtualIF_PacketSend;
 	netDevOpHook.ioctl = ApCli_VirtualIF_Ioctl;
-	netDevOpHook.get_stats = RT28xx_get_apcli_ether_stats64;
+ 	netDevOpHook.get_stats = RT28xx_get_apcli_ether_stats64;
+	netDevOpHook.iw_handler = (struct iw_handler_def *) &rt28xx_ap_iw_handler_def;
 
 	RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_APC_INIT,
 						0, &netDevOpHook, 0);
--- a/rt2860v2/ap/ap_cfg.c
+++ b/rt2860v2/ap/ap_cfg.c
@@ -9145,7 +9145,117 @@ done:
 extern VOID eFuseGetFreeBlockCount(PRTMP_ADAPTER pAd, PUINT EfuseFreeBlock);
 #endif /* RTMP_EFUSE_SUPPORT */
 
+VOID RTMPIoctlConnstatus(
+	IN PRTMP_ADAPTER pAd,
+	IN RTMP_IOCTL_INPUT_STRUCT *wrq)
+{
+	INT Status;
+	PSTRING msg;
+//     	UCHAR idx = 0;
+	UCHAR i = 0;
+// 	ULONG txCount = 0;
+// 	UINT32 rxCount = 0;
+ 	POS_COOKIE pObj;
+ 	UCHAR ifIndex;
+	BOOLEAN bConnect=FALSE;
+	UINT32 MaxWcidNum = MAX_LEN_OF_MAC_TABLE;
+	STRING	ChStr[24] = {0};
+/*	msg = (PSTRING)kmalloc(sizeof(CHAR)*(2048), MEM_ALLOC_FLAG); */
+	os_alloc_mem(pAd, (UCHAR **)&msg, sizeof(CHAR)*(2048));
+	if (msg == NULL) {
+		return;
+	}
+
+
+    memset(msg, 0x00, 1600);
+    sprintf(msg, "\n");
+
+ 	pObj = (POS_COOKIE) pAd->OS_Cookie;
+
+ 	DBGPRINT(RT_DEBUG_TRACE, ("==>RTMPIoctlConnstatus\n"));
+
+ 	if (pObj->ioctl_if_type != INT_APCLI)
+ 		return;
 
+ 	ifIndex = pObj->ioctl_if;
+
+#ifdef MAC_REPEATER_SUPPORT
+	if (pAd->ApCfg.bMACRepeaterEn)
+		MaxWcidNum = MAX_MAC_TABLE_SIZE_WITH_REPEATER;
+#endif /* MAC_REPEATER_SUPPORT */
+
+ 	//DBGPRINT(RT_DEBUG_OFF, ("=============================================================\n"));
+ 	sprintf(msg+strlen(msg), "=============================================================\n");
+ 	if((pAd->ApCfg.ApCliTab[ifIndex].CtrlCurrState == APCLI_CTRL_CONNECTED)
+ 		&& (pAd->ApCfg.ApCliTab[ifIndex].SsidLen != 0))
+ 	{
+ 		for (i=0; i<MaxWcidNum; i++)
+ 		{
+ 			PMAC_TABLE_ENTRY pEntry = &pAd->MacTab.Content[i];
+
+ 			if ( IS_ENTRY_APCLI(pEntry)
+				&& (pEntry->Sst == SST_ASSOC)
+				&& (pEntry->PortSecured == WPA_802_1X_PORT_SECURED))
+ 				{
+				 	sprintf(msg+strlen(msg), "ApCli%d Connected AP : %02X:%02X:%02X:%02X:%02X:%02X   SSID:%s\n",ifIndex,
+				 						pEntry->Addr[0], pEntry->Addr[1], pEntry->Addr[2],
+				 						pEntry->Addr[3], pEntry->Addr[4], pEntry->Addr[5],
+				 						pAd->ApCfg.ApCliTab[ifIndex].Ssid);
+
+					bConnect=TRUE;
+ 				}
+ 		}
+
+		if (!bConnect)
+			 	sprintf(msg+strlen(msg), "ApCli%d Connected AP : Disconnect\n",ifIndex);
+
+ 	}
+ 	else
+ 	{
+
+		if (pAd->ApCfg.ApCliTab[ifIndex].ConnectState > APCLI_NOT_TRIGGER_CONNECT
+			&& pAd->ApCfg.ApCliTab[ifIndex].FailReason == 0)
+			sprintf(ChStr,"Connecting");
+		else if (pAd->ApCfg.ApCliTab[ifIndex].ConnectState == APCLI_NOT_TRIGGER_CONNECT
+			&& pAd->ApCfg.ApCliTab[ifIndex].FailReason == 0)
+			sprintf(ChStr,"Not trigger connect");
+		else if (pAd->ApCfg.ApCliTab[ifIndex].ConnectState == APCLI_NOT_TRIGGER_CONNECT
+			&& pAd->ApCfg.ApCliTab[ifIndex].FailReason != 0)
+		{
+			switch(pAd->ApCfg.ApCliTab[ifIndex].FailReason) {
+				case 1 :
+					sprintf(ChStr,"Probe timeout");
+					break;
+				case 2 :
+					sprintf(ChStr,"Auth fail");
+					break;
+				case 3 :
+					sprintf(ChStr,"Assoc fail");
+					break;
+				case 4 :
+					sprintf(ChStr,"4-way fail");
+					break;
+				case 5 :
+					sprintf(ChStr,"unknow");
+					break;
+			}
+
+		}
+
+
+		sprintf(msg+strlen(msg), "ApCli%d Connected AP : Disconnect reason = %s\n",ifIndex,ChStr);
+
+ 	}
+	sprintf(msg+strlen(msg), "=============================================================\n");
+
+	    wrq->u.data.length = strlen(msg);
+	    Status = copy_to_user(wrq->u.data.pointer, msg, wrq->u.data.length);
+
+	os_free_mem(NULL, msg);
+
+     	DBGPRINT(RT_DEBUG_TRACE, ("<==RTMPIoctlConnStatus\n"));
+ 	return;
+}
 /* 
     ==========================================================================
     Description:
@@ -9354,6 +9464,7 @@ VOID RTMPIoctlStatistics(
     }
     sprintf(msg+strlen(msg), "\n");
 #endif /* APCLI_SUPPORT */
+	sprintf(msg+strlen(msg), "WscLatestMacAddr=%02x:%02x:%02x:%02x:%02x:%02x\n", PRINT_MAC(pAd->CommonCfg.LatestWSCMacAddr));
 #endif /* WSC_AP_SUPPORT */
 #ifdef RTMP_EFUSE_SUPPORT
 	if (pAd->bUseEfuse == FALSE && pAd->bFroceEEPROMBuffer == FALSE)
@@ -9614,6 +9725,10 @@ INT Set_ApCli_Ssid_Proc(
 			pAd->ApCfg.ApCliTab[ifIndex].CfgSsidLen, pAd->ApCfg.ApCliTab[ifIndex].CfgSsid));
 
 		pAd->ApCfg.ApCliTab[ifIndex].Enable = apcliEn;
+
+		pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_START_PROBE;
+		pAd->ApCfg.ApCliTab[ifIndex].FailReason = 0;
+		NdisGetSystemUpTime(&pAd->ApCfg.ApCliTab[ifIndex].LastTriggerTime);
 	}
 	else
 		success = FALSE;
@@ -13113,9 +13228,34 @@ INT RTMP_AP_IoctlHandle(
 		    break;
 
 #if defined (AP_SCAN_SUPPORT) || defined (CONFIG_STA_SUPPORT)
+		case CMD_RTPRIV_IOCTL_AP_SIOCSIWSCAN:
+		{
+			//PNET_DEV pNetDev = (PNET_DEV)pData;
+#ifdef AP_SCAN_SUPPORT
+			if (pObj->ioctl_if_type == INT_APCLI)
+				RTMPIoctlSetSiteSurvey(pAd,wrq);
+			else
+				return NDIS_STATUS_FAILURE;
+#endif
+#ifdef CONFIG_STA_SUPPORT
+				RTMPIoctlSetSiteSurvey(pAd,wrq);
+#endif
+
+		}
+			break;
+
 		case CMD_RTPRIV_IOCTL_GSITESURVEY:
 			RTMPIoctlGetSiteSurvey(pAd,wrq);
 			break;
+
+		case CMD_RTPRIV_IOCTL_AP_SIOCGIWSCAN:
+		        if (Data == INT_APCLI)
+                        {
+                                RtmpIoctl_rt_ioctl_giwscan(pAd, pData, Data);
+                        }
+                        else
+                                return NDIS_STATUS_FAILURE;
+                        break;
 #endif /* AP_SCAN_SUPPORT */
 
 		case CMD_RTPRIV_IOCTL_STATISTICS:
@@ -13374,7 +13514,34 @@ INT RTMP_AP_IoctlHandle(
 			RtmpHostapdSecuritySet(pAd, wrq);
 			break;
 #endif /* HOSTAPD_SUPPORT */
-
+		case CMD_RTPRIV_IOCTL_AP_SIOCGIWENCODEEXT:
+			RtmpIoctl_rt_ioctl_giwencodeext(pAd, pData,Data);
+			break;
+		case CMD_RTPRIV_IOCTL_AP_SIOCGIWTXPOW:
+		{
+			UINT tmp = pAd->CommonCfg.TxPowerShow;
+			NdisCopyMemory(pData, &tmp, 4);
+			//(UINT)*(pData) =  pAd->ApCfg.RssiSample.LastRssi0 - pAd->BbpRssiToDbmDelta;
+			break;
+		}
+		case CMD_RTPRIV_IOCTL_AP_GET_PHYMODE:
+		{
+			UCHAR tmp = pAd->CommonCfg.PhyMode;
+			NdisCopyMemory(pData, &tmp, 1);
+			break;
+		}
+		case CMD_RTPRIV_IOCTL_AP_GET_SHORTGI:
+		{
+			UCHAR tmp = pAd->CommonCfg.RegTransmitSetting.field.ShortGI;
+			NdisCopyMemory(pData, &tmp, 1);
+			break;
+		}
+		case CMD_RTPRIV_IOCTL_AP_GET_BW:
+		{
+			UCHAR tmp = pAd->CommonCfg.RegTransmitSetting.field.BW;
+			NdisCopyMemory(pData, &tmp, 1);
+			break;
+		}
 		default:
 			Status = RTMP_COM_IoctlHandle(pAd, wrq, cmd, subcmd, pData, Data);
 			break;
--- a/rt2860v2/ap/ap_mlme.c
+++ b/rt2860v2/ap/ap_mlme.c
@@ -247,6 +247,35 @@ VOID APMlmePeriodicExec(
 				/* update channel quality for Roaming and UI LinkQuality display */
 				MlmeCalculateChannelQuality(pAd,
 					&pAd->MacTab.Content[pApCliEntry->MacTabWCID], Now32);
+			//woody
+				if (pAd->ApCfg.ApCliTab[loop].ConnectState > APCLI_NOT_TRIGGER_CONNECT)
+				{
+					if (RTMP_TIME_AFTER(Now32, pAd->ApCfg.ApCliTab[loop].LastTriggerTime + (10*OS_HZ)))
+					{
+						switch(pAd->ApCfg.ApCliTab[loop].ConnectState)
+						{
+							case APCLI_START_PROBE:
+								pAd->ApCfg.ApCliTab[loop].FailReason=1;
+								break;
+							case APCLI_START_AUTH:
+								pAd->ApCfg.ApCliTab[loop].FailReason=2;
+								break;
+							case APCLI_START_ASSOC:
+								pAd->ApCfg.ApCliTab[loop].FailReason=3;
+								break;
+							case APCLI_START_4WAY:
+								pAd->ApCfg.ApCliTab[loop].FailReason=4;
+								break;
+							default:
+								pAd->ApCfg.ApCliTab[loop].FailReason=5;
+						}
+
+						pAd->ApCfg.ApCliTab[loop].ConnectState = APCLI_NOT_TRIGGER_CONNECT;
+					}
+					else
+						pAd->ApCfg.ApCliTab[loop].FailReason=0;
+				}
+
 
 #ifdef APCLI_CERT_SUPPORT
 				/* WPA MIC error should block association attempt for 60 seconds*/
--- a/rt2860v2/ap/apcli_assoc.c
+++ b/rt2860v2/ap/apcli_assoc.c
@@ -666,6 +666,7 @@ static VOID ApCliMlmeAssocReqAction(
 #endif /* MAC_REPEATER_SUPPORT */
 		RTMPSetTimer(&pApCliEntry->ApCliMlmeAux.ApCliAssocTimer, Timeout);
 		*pCurrState = APCLI_ASSOC_WAIT_RSP;
+		pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_START_ASSOC;
 	} 
 	else
 	{
--- a/rt2860v2/ap/apcli_auth.c
+++ b/rt2860v2/ap/apcli_auth.c
@@ -313,6 +313,8 @@ static VOID ApCliMlmeAuthReqAction(
 #endif /* MAC_REPEATER_SUPPORT */
 		RTMPSetTimer(&pAd->ApCfg.ApCliTab[ifIndex].ApCliMlmeAux.ApCliAuthTimer, AUTH_TIMEOUT);
 		*pCurrState = APCLI_AUTH_WAIT_SEQ2;
+
+		pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_START_AUTH;
 	} 
 	else
 	{
--- a/rt2860v2/ap/apcli_ctrl.c
+++ b/rt2860v2/ap/apcli_ctrl.c
@@ -751,7 +751,7 @@ static VOID ApCliCtrlAuthRspAction(
 #ifdef MAC_REPEATER_SUPPORT
 		ifIndex = (USHORT)(Elem->Priv);
 #endif /* MAC_REPEATER_SUPPORT */
-
+		pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_RECE_AUTH;
 		MlmeEnqueue(pAd, APCLI_ASSOC_STATE_MACHINE, APCLI_MT2_MLME_ASSOC_REQ,
 			sizeof(MLME_ASSOC_REQ_STRUCT), &AssocReq, ifIndex);
 	} 
@@ -1064,6 +1064,7 @@ static VOID ApCliCtrlAssocRspAction(
 		if (ApCliLinkUp(pAd, ifIndex))
 		{
 			*pCurrState = APCLI_CTRL_CONNECTED;
+			pAd->ApCfg.ApCliTab[ifIndex].ConnectState = APCLI_RECE_ASSOC;
 		}
 		else
 		{
--- a/rt2860v2/ate/chips/rt6352_ate.c
+++ b/rt2860v2/ate/chips/rt6352_ate.c
@@ -979,7 +979,8 @@ VOID RT635xATEAsicSwitchChannel(
 	IN PRTMP_ADAPTER pAd)
 {
 	PATE_INFO 	pATEInfo = &(pAd->ate);
-	UINT32	 	Value = 0, reg_index = 0; /* BbpReg, Value; */
+// 	UINT32	 	Value = 0;
+	UINT32	 	reg_index = 0; /* BbpReg, Value; */
 	CHAR	    TxPwer = 0, TxPwer2 = DEFAULT_RF_TX_POWER; /* Bbp94 = BBPR94_DEFAULT, TxPwer2 = DEFAULT_RF_TX_POWER; */
 	UCHAR		index, RFValue, Channel = 0;
 	UCHAR		BBPValue;
--- a/rt2860v2/ate/common/rt_ate.c
+++ b/rt2860v2/ate/common/rt_ate.c
@@ -2050,7 +2050,7 @@ static NDIS_STATUS ATESTOP(
 			{
 				SysRegValue |= 0x100000;
 				RTMP_SYS_IO_WRITE32(0xb0000060, SysRegValue);
-				DBGPRINT(RT_DEBUG_ERROR,("Change as GPIO Mode(0x%x)\n", SysRegValue));
+				DBGPRINT(RT_DEBUG_ERROR,("Change as GPIO Mode(0x%lx)\n", SysRegValue));
 			}
 		}
 
@@ -2107,7 +2107,7 @@ static NDIS_STATUS ATESTOP(
 			{
 				SysRegValue &= (~0x100000);
 				RTMP_SYS_IO_WRITE32(0xb0000060, SysRegValue);
-				DBGPRINT(RT_DEBUG_ERROR,("Change as Normal Mode(0x%x)\n", SysRegValue));
+				DBGPRINT(RT_DEBUG_ERROR,("Change as Normal Mode(0x%lx)\n", SysRegValue));
 			}
 		}
 
@@ -4824,7 +4824,7 @@ INT	Set_ATE_TEMP_SENSOR_Proc(
 {
 	PATE_INFO pATEInfo = &(pAd->ate);
 	BOOLEAN value = simple_strtol(arg, 0, 10);
-	UINT32 MacValue;
+// 	UINT32 MacValue;
 
 	if (value > 0)
 	{
--- a/rt2860v2/chips/rt6352.c
+++ b/rt2860v2/chips/rt6352.c
@@ -4649,7 +4649,7 @@ VOID RT6352_AsicAdjustTxPower(
 	CHAR		DeltaPowerByBbpR1 = 0; 
 	CHAR		TotalDeltaPower = 0; /* (non-positive number) including the transmit power controlled by the MAC and the BBP R1 */
 	CONFIGURATION_OF_TX_POWER_CONTROL_OVER_MAC CfgOfTxPwrCtrlOverMAC = {0};	
-
+	ULONG	ExtraPwrOverMAC = 0;
 
 #ifdef CONFIG_STA_SUPPORT
 	if (RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_IDLE_RADIO_OFF))
@@ -4820,6 +4820,9 @@ VOID RT6352_AsicAdjustTxPower(
 			DBGPRINT(RT_DEBUG_TRACE, ("TotalDeltaPower=%d, Mac 0x13B4 is 0x%08x\n", TotalDeltaPower, MacValue));
 		}
 
+		RTMP_IO_READ32(pAd, 0x1318, &ExtraPwrOverMAC);
+		pAd->CommonCfg.TxPowerShow = 16  + (TotalDeltaPower/2)+((ExtraPwrOverMAC & 0x0000FF00) >> 8);
+
 		/* Extra set MAC registers to compensate Tx power if any */
 		RTMP_CHIP_ASIC_EXTRA_POWER_OVER_MAC(pAd);
 	}
@@ -5159,9 +5162,9 @@ VOID RT6352_Init_ExtPA_ExtLNA(
 		GpioMode &= (~0x100000);
 		RTMP_SYS_IO_WRITE32(0xb0000060, GpioMode);
 	
-		DBGPRINT(RT_DEBUG_ERROR,("Change as Normal Mode(0x%x)\n", GpioMode));
+		DBGPRINT(RT_DEBUG_ERROR,("Change as Normal Mode(0x%lx)\n", GpioMode));
 		RTMP_SYS_IO_READ32(0xb0000060, &GpioMode);
-		DBGPRINT(RT_DEBUG_ERROR,("After Change, now GPIO_MODE value is 0x%x\n", GpioMode));
+		DBGPRINT(RT_DEBUG_ERROR,("After Change, now GPIO_MODE value is 0x%lx\n", GpioMode));
 	}
 
 #ifdef RT6352_EP_SUPPORT
--- a/rt2860v2/common/ba_action.c
+++ b/rt2860v2/common/ba_action.c
@@ -1523,11 +1523,20 @@ VOID PeerDelBAAction(
 	/*DELBA Request from unknown peer, ignore this.*/
 	if (PeerDelBAActionSanity(pAd, Elem->Wcid, Elem->Msg, Elem->MsgLen))
 	{
+#ifdef PEER_DELBA_TX_ADAPT
+		MAC_TABLE_ENTRY *pEntry = NULL;
+#endif /* PEER_DELBA_TX_ADAPT */
+
 		pDelFrame = (PFRAME_DELBA_REQ)(&Elem->Msg[0]);
 
 #ifdef PEER_DELBA_TX_ADAPT
-			if (pDelFrame->DelbaParm.TID == 0)
-				Peer_DelBA_Tx_Adapt_Enable(pAd, &pAd->MacTab.Content[Elem->Wcid]);
+		pEntry = &pAd->MacTab.Content[Elem->Wcid];
+
+		if ((pAd->CommonCfg.bBADecline == FALSE) && (pDelFrame->DelbaParm.TID == 0)
+			&& (!CLIENT_STATUS_TEST_FLAG(pEntry, fCLIENT_STATUS_RALINK_CHIPSET)))
+		{
+			Peer_DelBA_Tx_Adapt_Enable(pAd, &pAd->MacTab.Content[Elem->Wcid]);
+		}
 #endif /* PEER_DELBA_TX_ADAPT */
 
 		if (pDelFrame->DelbaParm.Initiator == ORIGINATOR)
--- a/rt2860v2/common/cmm_asic.c
+++ b/rt2860v2/common/cmm_asic.c
@@ -1728,7 +1728,7 @@ VOID AsicAdjustTxPower(
 	RTMP_CHIP_ASIC_AUTO_AGC_OFFSET_GET(
 		pAd, &DeltaPwr, &TotalDeltaPower, &TxAgcCompensate, &DeltaPowerByBbpR1);
 
-	DBGPRINT(RT_DEBUG_INFO, ("%s: DeltaPwr=%d, TotalDeltaPower=%d, TxAgcCompensate=%d, DeltaPowerByBbpR1=%d\n",
+	DBGPRINT(RT_DEBUG_TRACE, ("%s: DeltaPwr=%d, TotalDeltaPower=%d, TxAgcCompensate=%d, DeltaPowerByBbpR1=%d\n",
 			__FUNCTION__,
 			DeltaPwr,
 			TotalDeltaPower,
@@ -1759,6 +1759,7 @@ VOID AsicAdjustTxPower(
 	/* The transmit power controlled by the MAC */
 	TotalDeltaPower += DeltaPwr; 	
 
+	DBGPRINT(RT_DEBUG_TRACE, ("TotalDeltaPower = %d\n",TotalDeltaPower));
 #ifdef SINGLE_SKU
 	if (pAd->CommonCfg.bSKUMode == TRUE)
 	{
--- a/rt2860v2/common/cmm_cfg.c
+++ b/rt2860v2/common/cmm_cfg.c
@@ -27,10 +27,782 @@
 
 
 #include "rt_config.h"
-
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,27)
+#define IWE_STREAM_ADD_EVENT(_A, _B, _C, _D, _E)                iwe_stream_add_event(_A, _B, _C, _D, _E)
+#define IWE_STREAM_ADD_POINT(_A, _B, _C, _D, _E)                iwe_stream_add_point(_A, _B, _C, _D, _E)
+#define IWE_STREAM_ADD_VALUE(_A, _B, _C, _D, _E, _F)    iwe_stream_add_value(_A, _B, _C, _D, _E, _F)
+#else
+#define IWE_STREAM_ADD_EVENT(_A, _B, _C, _D, _E)                iwe_stream_add_event(_B, _C, _D, _E)
+#define IWE_STREAM_ADD_POINT(_A, _B, _C, _D, _E)                iwe_stream_add_point(_B, _C, _D, _E)
+#define IWE_STREAM_ADD_VALUE(_A, _B, _C, _D, _E, _F)    iwe_stream_add_value(_B, _C, _D, _E, _F)
+#endif
 static BOOLEAN RT_isLegalCmdBeforeInfUp(
        IN PSTRING SetCmd);
 
+static void cal_quality(
+        IN RT_CMD_STA_IOCTL_BSS *pSignal,
+        IN BSS_ENTRY *pBssEntry)
+{
+        memcpy(pSignal->Bssid, pBssEntry->Bssid, MAC_ADDR_LEN);
+
+        /* Normalize Rssi */
+        if (pBssEntry->Rssi >= -50)
+        pSignal->ChannelQuality = 100;
+        else if (pBssEntry->Rssi >= -80) /* between -50 ~ -80dbm */
+                pSignal->ChannelQuality = (__u8)(24 + ((pBssEntry->Rssi + 80) * 26)/10);
+        else if (pBssEntry->Rssi >= -90)   /* between -80 ~ -90dbm */
+        pSignal->ChannelQuality = (__u8)((pBssEntry->Rssi + 90) * 26)/10;
+        else
+                pSignal->ChannelQuality = 0;
+
+    pSignal->Rssi = (__u8)(pBssEntry->Rssi);
+
+    if (pBssEntry->Rssi >= -70)
+                pSignal->Noise = -92;
+        else
+                pSignal->Noise = pBssEntry->Rssi - pBssEntry->MinSNR;
+}
+
+
+static void set_quality(
+                        struct iw_quality *iq,
+                        RT_CMD_STA_IOCTL_BSS *pBss)
+{
+        iq->qual = pBss->ChannelQuality;
+        iq->level = (__u8)(pBss->Rssi);
+        iq->noise = pBss->Noise;
+
+
+        iq->updated = 1;     /* Flags to know if updated */
+
+#if WIRELESS_EXT >= 17
+        iq->updated = IW_QUAL_QUAL_UPDATED | IW_QUAL_LEVEL_UPDATED | IW_QUAL_NOISE_UPDATED;
+#endif
+
+#if WIRELESS_EXT >= 19
+        iq->updated |= IW_QUAL_DBM;     /* Level + Noise are dBm */
+#endif
+}
+
+INT
+RtmpIoctl_rt_ioctl_giwscan(
+        IN      RTMP_ADAPTER                    *pAd,
+        IN      VOID                                    *pData,
+        IN      ULONG                                   Data)
+{
+
+        RT_CMD_STA_IOCTL_SCAN_TABLE *pIoctlScan = (RT_CMD_STA_IOCTL_SCAN_TABLE *)pData;
+        RT_CMD_STA_IOCTL_BSS_TABLE *pBssTable;
+        BSS_ENTRY *pBssEntry;
+        UINT32 IdBss;
+
+
+        pIoctlScan->BssNr = 0;
+
+#ifdef MESH_SUPPORT
+        if(pIoctlScan->priv_flags == INT_MESH)
+        {
+                DBGPRINT(RT_DEBUG_TRACE, ("Mesh do not support rt_ioctl_giwscan \n"));
+                        return NDIS_STATUS_FAILURE;
+        }
+
+        if (pAd->MeshTab.MeshOnly == TRUE)
+                return NDIS_STATUS_SUCCESS;
+#endif /* MESH_SUPPORT */
+
+#ifdef WPA_SUPPLICANT_SUPPORT
+        if ((pAd->StaCfg.wpa_supplicant_info.WpaSupplicantUP & 0x7F) == WPA_SUPPLICANT_ENABLE)
+        {
+                pAd->StaCfg.wpa_supplicant_info.WpaSupplicantScanCount = 0;
+        }
+#endif /* WPA_SUPPLICANT_SUPPORT */
+
+        pIoctlScan->BssNr = pAd->ScanTab.BssNr;
+        if (pIoctlScan->BssNr == 0)
+                return NDIS_STATUS_SUCCESS;
+
+        os_alloc_mem(NULL, (UCHAR **)&(pIoctlScan->pBssTable),
+                                pAd->ScanTab.BssNr * sizeof(RT_CMD_STA_IOCTL_BSS_TABLE));
+        if (pIoctlScan->pBssTable == NULL)
+        {
+                DBGPRINT(RT_DEBUG_ERROR, ("Allocate memory fail!\n"));
+                return NDIS_STATUS_FAILURE;
+        }
+
+        for(IdBss=0; IdBss<pAd->ScanTab.BssNr; IdBss++)
+        {
+                HT_CAP_INFO capInfo = pAd->ScanTab.BssEntry[IdBss].HtCapability.HtCapInfo;
+
+                pBssTable = pIoctlScan->pBssTable + IdBss;
+                pBssEntry = &pAd->ScanTab.BssEntry[IdBss];
+
+                memcpy(pBssTable->Bssid, pBssEntry->Bssid, ETH_ALEN);
+                pBssTable->Channel = pBssEntry->Channel;
+                pBssTable->BssType = pBssEntry->BssType;
+                pBssTable->HtCapabilityLen = pBssEntry->HtCapabilityLen;
+                memcpy(pBssTable->SupRate, pBssEntry->SupRate, 12);
+                pBssTable->SupRateLen = pBssEntry->SupRateLen;
+                memcpy(pBssTable->ExtRate, pBssEntry->ExtRate, 12);
+                pBssTable->ExtRateLen = pBssEntry->ExtRateLen;
+                pBssTable->SsidLen = pBssEntry->SsidLen;
+                memcpy(pBssTable->Ssid, pBssEntry->Ssid, 32);
+                pBssTable->CapabilityInfo = pBssEntry->CapabilityInfo;
+                pBssTable->ChannelWidth = capInfo.ChannelWidth;
+                pBssTable->ShortGIfor40 = capInfo.ShortGIfor40;
+                pBssTable->ShortGIfor20 = capInfo.ShortGIfor20;
+                pBssTable->MCSSet = pBssEntry->HtCapability.MCSSet[1];
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
+                pBssTable->WpaIeLen = pBssEntry->WpaIE.IELen;
+                pBssTable->pWpaIe = pBssEntry->WpaIE.IE;
+                pBssTable->RsnIeLen = pBssEntry->RsnIE.IELen;
+                pBssTable->pRsnIe = pBssEntry->RsnIE.IE;
+#ifdef CONFIG_STA_SUPPORT
+                pBssTable->WpsIeLen = pBssEntry->WpsIE.IELen;
+                pBssTable->pWpsIe = pBssEntry->WpsIE.IE;
+#endif /* CONFIG_STA_SUPPORT */
+#endif
+                pBssTable->FlgIsPrivacyOn = CAP_IS_PRIVACY_ON(pBssEntry->CapabilityInfo);
+                cal_quality(&pBssTable->Signal, pBssEntry);
+        }
+
+        memcpy(pIoctlScan->MainSharedKey[0], pAd->SharedKey[BSS0][0].Key, 16);
+        memcpy(pIoctlScan->MainSharedKey[1], pAd->SharedKey[BSS0][1].Key, 16);
+        memcpy(pIoctlScan->MainSharedKey[2], pAd->SharedKey[BSS0][2].Key, 16);
+        memcpy(pIoctlScan->MainSharedKey[3], pAd->SharedKey[BSS0][3].Key, 16);
+
+        return NDIS_STATUS_SUCCESS;
+}
+
+int rt_ioctl_giwscan(struct net_device *dev,
+			struct iw_request_info *info,
+			struct iw_point *data, char *extra)
+{
+	VOID *pAd = NULL;
+	int i=0, status = 0;
+	PSTRING current_ev = extra, previous_ev = extra;
+	PSTRING end_buf;
+	PSTRING current_val;
+	STRING custom[MAX_CUSTOM_LEN] = {0};
+#ifndef IWEVGENIE
+	unsigned char idx;
+#endif /* IWEVGENIE */
+	struct iw_event iwe;
+	RT_CMD_STA_IOCTL_SCAN_TABLE IoctlScan, *pIoctlScan = &IoctlScan;
+
+	GET_PAD_FROM_NET_DEV(pAd, dev);
+
+	/*check if the interface is down */
+/*    if(!RTMP_TEST_FLAG(pAd, fRTMP_ADAPTER_INTERRUPT_IN_USE)) */
+/* because android will set scan and get scan when interface down */
+#ifndef ANDROID_SUPPORT
+	if (RTMP_DRIVER_IOCTL_SANITY_CHECK(pAd, NULL) != NDIS_STATUS_SUCCESS)
+    {
+       	DBGPRINT(RT_DEBUG_TRACE, ("INFO::Network is down!\n"));
+        return -ENETDOWN;
+	}
+#endif /* ANDROID_SUPPORT */
+
+
+	pIoctlScan->priv_flags = RT_DEV_PRIV_FLAGS_GET(dev);
+	pIoctlScan->pBssTable = NULL;
+
+#ifdef CONFIG_STA_SUPPORT
+	if (RTMP_STA_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_STA_SIOCGIWSCAN, 0,
+							pIoctlScan, 0,
+							RT_DEV_PRIV_FLAGS_GET(dev)) != NDIS_STATUS_SUCCESS)
+#else
+	if (ScanRunning(pAd))
+	{
+		status = -EAGAIN;
+		goto go_out;
+	}
+	if (RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_AP_SIOCGIWSCAN, 0,
+                                                        pIoctlScan,
+                                                        RT_DEV_PRIV_FLAGS_GET(dev)) != NDIS_STATUS_SUCCESS)
+#endif
+	{
+		status = -EINVAL;
+		goto go_out;
+	}
+
+	if (pIoctlScan->BssNr == 0)
+	{
+		data->length = 0;
+		status = 0;
+		goto go_out;
+	}
+
+#if WIRELESS_EXT >= 17
+    if (data->length > 0)
+        end_buf = extra + data->length;
+    else
+        end_buf = extra + IW_SCAN_MAX_DATA;
+#else
+    end_buf = extra + IW_SCAN_MAX_DATA;
+#endif
+
+	for (i = 0; i < pIoctlScan->BssNr; i++)
+	{
+		if (current_ev >= end_buf)
+        {
+#if WIRELESS_EXT >= 17
+			status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*MAC address */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWAP;
+		iwe.u.ap_addr.sa_family = ARPHRD_ETHER;
+				memcpy(iwe.u.ap_addr.sa_data, &pIoctlScan->pBssTable[i].Bssid, ETH_ALEN);
+
+        previous_ev = current_ev;
+		current_ev = IWE_STREAM_ADD_EVENT(info, current_ev,end_buf, &iwe, IW_EV_ADDR_LEN);
+        if (current_ev == previous_ev)
+        {
+#if WIRELESS_EXT >= 17
+            status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*
+		Protocol:
+			it will show scanned AP's WirelessMode .
+			it might be
+					802.11a
+					802.11a/n
+					802.11g/n
+					802.11b/g/n
+					802.11g
+					802.11b/g
+		*/
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWNAME;
+
+
+	{
+		RT_CMD_STA_IOCTL_BSS_TABLE *pBssEntry=&pIoctlScan->pBssTable[i];
+		BOOLEAN isGonly=FALSE;
+		int rateCnt=0;
+
+		if (pBssEntry->Channel>14)
+		{
+			if (pBssEntry->HtCapabilityLen!=0)
+				strcpy(iwe.u.name,"802.11a/n");
+			else
+				strcpy(iwe.u.name,"802.11a");
+		}
+		else
+		{
+			/*
+				if one of non B mode rate is set supported rate . it mean G only.
+			*/
+			for (rateCnt=0;rateCnt<pBssEntry->SupRateLen;rateCnt++)
+			{
+				/*
+					6Mbps(140) 9Mbps(146) and >=12Mbps(152) are supported rate , it mean G only.
+				*/
+				if (pBssEntry->SupRate[rateCnt]==140 || pBssEntry->SupRate[rateCnt]==146 || pBssEntry->SupRate[rateCnt]>=152)
+					isGonly=TRUE;
+			}
+
+			for (rateCnt=0;rateCnt<pBssEntry->ExtRateLen;rateCnt++)
+			{
+				if (pBssEntry->ExtRate[rateCnt]==140 || pBssEntry->ExtRate[rateCnt]==146 || pBssEntry->ExtRate[rateCnt]>=152)
+					isGonly=TRUE;
+			}
+
+
+			if (pBssEntry->HtCapabilityLen!=0)
+			{
+				if (isGonly==TRUE)
+					strcpy(iwe.u.name,"802.11g/n");
+				else
+					strcpy(iwe.u.name,"802.11b/g/n");
+			}
+			else
+			{
+				if (isGonly==TRUE)
+					strcpy(iwe.u.name,"802.11g");
+				else
+				{
+					if (pBssEntry->SupRateLen==4 && pBssEntry->ExtRateLen==0)
+						strcpy(iwe.u.name,"802.11b");
+					else
+						strcpy(iwe.u.name,"802.11b/g");
+				}
+			}
+		}
+	}
+
+		previous_ev = current_ev;
+		current_ev = IWE_STREAM_ADD_EVENT(info, current_ev,end_buf, &iwe, IW_EV_ADDR_LEN);
+		if (current_ev == previous_ev)
+		{
+#if WIRELESS_EXT >= 17
+	   		status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+		}
+
+		/*ESSID */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWESSID;
+		iwe.u.data.length = pIoctlScan->pBssTable[i].SsidLen;
+		iwe.u.data.flags = 1;
+
+        previous_ev = current_ev;
+	current_ev = IWE_STREAM_ADD_POINT(info, current_ev,end_buf, &iwe, (PSTRING) pIoctlScan->pBssTable[i].Ssid);
+        if (current_ev == previous_ev)
+        {
+#if WIRELESS_EXT >= 17
+            status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*Network Type */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWMODE;
+		if (pIoctlScan->pBssTable[i].BssType == Ndis802_11IBSS)
+		{
+			iwe.u.mode = IW_MODE_ADHOC;
+		}
+		else if (pIoctlScan->pBssTable[i].BssType == Ndis802_11Infrastructure)
+		{
+			iwe.u.mode = IW_MODE_INFRA;
+		}
+		else
+		{
+			iwe.u.mode = IW_MODE_AUTO;
+		}
+		iwe.len = IW_EV_UINT_LEN;
+
+        previous_ev = current_ev;
+		current_ev = IWE_STREAM_ADD_EVENT(info, current_ev, end_buf, &iwe,  IW_EV_UINT_LEN);
+        if (current_ev == previous_ev)
+        {
+#if WIRELESS_EXT >= 17
+            status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*Channel and Frequency */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWFREQ;
+		{
+			UCHAR ch = pIoctlScan->pBssTable[i].Channel;
+			ULONG	m = 0;
+#ifdef CONFIG_STA_SUPPORT
+			RTMP_STA_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_CHID_2_FREQ, 0,
+								(VOID *)&m, ch, RT_DEV_PRIV_FLAGS_GET(dev));
+#else
+			MAP_CHANNEL_ID_TO_KHZ(ch, m);
+#endif /* CONFIG_STA_SUPPORT */
+			iwe.u.freq.m = m * 100;
+			iwe.u.freq.e = 1;
+			iwe.u.freq.i = 0;
+			previous_ev = current_ev;
+			current_ev = IWE_STREAM_ADD_EVENT(info, current_ev,end_buf, &iwe, IW_EV_FREQ_LEN);
+        		if (current_ev == previous_ev)
+	        	{
+#if WIRELESS_EXT >= 17
+	            		status = -E2BIG;
+				goto go_out;
+#else
+				break;
+#endif
+			}
+		}
+
+	/*Add quality statistics */
+        /*================================ */
+        memset(&iwe, 0, sizeof(iwe));
+    	iwe.cmd = IWEVQUAL;
+    	iwe.u.qual.level = 0;
+    	iwe.u.qual.noise = 0;
+	set_quality(&iwe.u.qual, &pIoctlScan->pBssTable[i].Signal /*&pIoctlScan->pBssTable[i]*/);
+    	current_ev = IWE_STREAM_ADD_EVENT(info, current_ev, end_buf, &iwe, IW_EV_QUAL_LEN);
+	if (current_ev == previous_ev)
+		{
+#if WIRELESS_EXT >= 17
+	            status = -E2BIG;
+				goto go_out;
+#else
+			break;
+#endif
+		}
+		/*Encyption key */
+		/*================================ */
+		memset(&iwe, 0, sizeof(iwe));
+		iwe.cmd = SIOCGIWENCODE;
+		if (pIoctlScan->pBssTable[i].FlgIsPrivacyOn)
+			iwe.u.data.flags =IW_ENCODE_ENABLED | IW_ENCODE_NOKEY;
+		else
+			iwe.u.data.flags = IW_ENCODE_DISABLED;
+
+        previous_ev = current_ev;
+        current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf,&iwe, (char *)pIoctlScan->MainSharedKey[(iwe.u.data.flags & IW_ENCODE_INDEX)]);
+        if (current_ev == previous_ev)
+        {
+#if WIRELESS_EXT >= 17
+            status = -E2BIG;
+			goto go_out;
+#else
+			break;
+#endif
+        }
+
+		/*Bit Rate */
+		/*================================ */
+		if (pIoctlScan->pBssTable[i].SupRateLen)
+        {
+            UCHAR tmpRate = pIoctlScan->pBssTable[i].SupRate[pIoctlScan->pBssTable[i].SupRateLen-1];
+			memset(&iwe, 0, sizeof(iwe));
+			iwe.cmd = SIOCGIWRATE;
+    		current_val = current_ev + IW_EV_LCP_LEN;
+            if (tmpRate == 0x82)
+                iwe.u.bitrate.value =  1 * 1000000;
+            else if (tmpRate == 0x84)
+                iwe.u.bitrate.value =  2 * 1000000;
+            else if (tmpRate == 0x8B)
+                iwe.u.bitrate.value =  5.5 * 1000000;
+            else if (tmpRate == 0x96)
+                iwe.u.bitrate.value =  11 * 1000000;
+            else
+    		    iwe.u.bitrate.value =  (tmpRate/2) * 1000000;
+			if (pIoctlScan->pBssTable[i].ExtRateLen)
+			{
+				UCHAR tmpSupRate =(pIoctlScan->pBssTable[i].SupRate[pIoctlScan->pBssTable[i].SupRateLen-1]& 0x7f);
+				UCHAR tmpExtRate =(pIoctlScan->pBssTable[i].ExtRate[pIoctlScan->pBssTable[i].ExtRateLen-1]& 0x7f);
+				iwe.u.bitrate.value = (tmpSupRate > tmpExtRate) ? (tmpSupRate)*500000 : (tmpExtRate)*500000;
+			}
+
+			if (tmpRate == 0x6c && pIoctlScan->pBssTable[i].HtCapabilityLen > 0)
+			{
+/*				HT_CAP_INFO capInfo = pIoctlScan->pBssTable[i].HtCapability.HtCapInfo; */
+				int shortGI = pIoctlScan->pBssTable[i].ChannelWidth ? pIoctlScan->pBssTable[i].ShortGIfor40 : pIoctlScan->pBssTable[i].ShortGIfor20;
+				//int maxMCS = pIoctlScan->pBssTable[i].MCSSet ?  15 : 7;
+				int maxMCS = 7;
+#if 1
+				int rate_count = RT_RateSize/sizeof(__s32);
+				int rate_index = 12 + ((UCHAR)pIoctlScan->pBssTable[i].ChannelWidth * 24) +
+								((UCHAR)shortGI *48) + ((UCHAR)maxMCS);
+				if (rate_index < 0)
+					rate_index = 0;
+				if (rate_index >= rate_count)
+					rate_index = rate_count-1;
+				iwe.u.bitrate.value	=  ralinkrate[rate_index] * 500000;
+#else
+
+				if (pIoctlScan->pBssTable[i].HtCapabilityLen > 0)
+					RtmpDrvRateGet(pAd, MODE_HTMIX, shortGI,
+                      pIoctlScan->pBssTable[i].ChannelWidth, maxMCS,
+                      newRateGetAntenna(maxMCS), &iwe.u.bitrate.value);
+#endif
+			}
+
+			iwe.u.bitrate.disabled = 0;
+			current_val = IWE_STREAM_ADD_VALUE(info, current_ev,
+				current_val, end_buf, &iwe,
+    			IW_EV_PARAM_LEN);
+
+        	if((current_val-current_ev)>IW_EV_LCP_LEN)
+            	current_ev = current_val;
+        	else
+        	{
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+#ifdef IWEVGENIE
+        /*WPA IE */
+		if (pIoctlScan->pBssTable[i].WpaIeLen > 0)
+        {
+			memset(&iwe, 0, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+			memcpy(custom, &(pIoctlScan->pBssTable[i].pWpaIe[0]),
+						   pIoctlScan->pBssTable[i].WpaIeLen);
+			iwe.cmd = IWEVGENIE;
+			iwe.u.data.length = pIoctlScan->pBssTable[i].WpaIeLen;
+			current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe, custom);
+			if (current_ev == previous_ev)
+			{
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+		}
+		}
+
+		/*WPA2 IE */
+        if (pIoctlScan->pBssTable[i].RsnIeLen > 0)
+        {
+        	memset(&iwe, 0, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+			memcpy(custom, &(pIoctlScan->pBssTable[i].pRsnIe[0]),
+						   pIoctlScan->pBssTable[i].RsnIeLen);
+			iwe.cmd = IWEVGENIE;
+			iwe.u.data.length = pIoctlScan->pBssTable[i].RsnIeLen;
+			current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe, custom);
+			if (current_ev == previous_ev)
+			{
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+#ifdef CONFIG_STA_SUPPORT
+		/*WPS IE */
+		if (pIoctlScan->pBssTable[i].WpsIeLen > 0)
+        {
+        	memset(&iwe, 0, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+			memcpy(custom, &(pIoctlScan->pBssTable[i].pWpsIe[0]),
+						   pIoctlScan->pBssTable[i].WpsIeLen);
+			iwe.cmd = IWEVGENIE;
+			iwe.u.data.length = pIoctlScan->pBssTable[i].WpsIeLen;
+			current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe, custom);
+			if (current_ev == previous_ev)
+			{
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+#endif
+#else
+        /*WPA IE */
+		/*================================ */
+        if (pIoctlScan->pBssTable[i].WpaIeLen > 0)
+        {
+    		NdisZeroMemory(&iwe, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+    		iwe.cmd = IWEVCUSTOM;
+            iwe.u.data.length = (pIoctlScan->pBssTable[i].WpaIeLen * 2) + 7;
+            NdisMoveMemory(custom, "wpa_ie=", 7);
+            for (idx = 0; idx < pIoctlScan->pBssTable[i].WpaIeLen; idx++)
+                sprintf(custom, "%s%02x", custom, pIoctlScan->pBssTable[i].pWpaIe[idx]);
+            previous_ev = current_ev;
+    		current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe,  custom);
+            if (current_ev == previous_ev)
+            {
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+        /*WPA2 IE */
+        if (pIoctlScan->pBssTable[i].RsnIeLen > 0)
+        {
+    		NdisZeroMemory(&iwe, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+    		iwe.cmd = IWEVCUSTOM;
+            iwe.u.data.length = (pIoctlScan->pBssTable[i].RsnIeLen * 2) + 7;
+            NdisMoveMemory(custom, "rsn_ie=", 7);
+			for (idx = 0; idx < pIoctlScan->pBssTable[i].RsnIeLen; idx++)
+                sprintf(custom, "%s%02x", custom, pIoctlScan->pBssTable[i].pRsnIe[idx]);
+            previous_ev = current_ev;
+    		current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe,  custom);
+            if (current_ev == previous_ev)
+            {
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+
+#ifdef WSC_INCLUDED
+		/*WPS IE */
+		if (pIoctlScan->pBssTable[i].WpsIeLen > 0)
+        {
+    		NdisZeroMemory(&iwe, sizeof(iwe));
+			memset(&custom[0], 0, MAX_CUSTOM_LEN);
+    		iwe.cmd = IWEVCUSTOM;
+            iwe.u.data.length = (pIoctlScan->pBssTable[i].WpsIeLen * 2) + 7;
+            NdisMoveMemory(custom, "wps_ie=", 7);
+			for (idx = 0; idx < pIoctlScan->pBssTable[i].WpsIeLen; idx++)
+                sprintf(custom, "%s%02x", custom, pIoctlScan->pBssTable[i].pWpsIe[idx]);
+            previous_ev = current_ev;
+    		current_ev = IWE_STREAM_ADD_POINT(info, current_ev, end_buf, &iwe,  custom);
+            if (current_ev == previous_ev)
+            {
+#if WIRELESS_EXT >= 17
+                status = -E2BIG;
+				goto go_out;
+#else
+			    break;
+#endif
+        }
+        }
+#endif /* WSC_INCLUDED */
+
+#endif /* IWEVGENIE */
+	}
+
+	data->length = current_ev - extra;
+/*    pAd->StaCfg.bScanReqIsFromWebUI = FALSE; */
+/*	DBGPRINT(RT_DEBUG_ERROR ,("===>rt_ioctl_giwscan. %d(%d) BSS returned, data->length = %d\n",i , pAd->ScanTab.BssNr, data->length)); */
+
+#ifdef CONFIG_STA_SUPPORT
+	RTMP_STA_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_STA_SCAN_END, 0,
+						NULL, data->length, RT_DEV_PRIV_FLAGS_GET(dev));
+#endif /* CONFIG_STA_SUPPORT */
+go_out:
+	if (pIoctlScan->pBssTable != NULL)
+		os_free_mem(NULL, pIoctlScan->pBssTable);
+
+	return status;
+}
+
+INT RtmpIoctl_rt_ioctl_giwencodeext(RTMP_ADAPTER *pAd, VOID *pData, ULONG Data)
+{
+        RT_CMD_STA_IOCTL_SECURITY *pIoctlSec = (RT_CMD_STA_IOCTL_SECURITY *)pData;
+        int idx;
+
+	POS_COOKIE	pObj = (POS_COOKIE) pAd->OS_Cookie;
+	NDIS_802_11_WEP_STATUS              WepStatus;
+	UCHAR ifIndex;
+	PMULTISSID_STRUCT	pMbss = NULL;
+	PAPCLI_STRUCT pApCliEntry = NULL;
+	UCHAR DefaultKeyId;
+
+	ifIndex = pObj->ioctl_if;
+	if (pObj->ioctl_if_type == INT_APCLI)
+	{
+		pApCliEntry = &pAd->ApCfg.ApCliTab[ifIndex];
+		WepStatus = pApCliEntry-> WepStatus;
+		DefaultKeyId = pApCliEntry->DefaultKeyId;
+	}
+	else
+	{
+		pMbss = &pAd->ApCfg.MBSSID[ifIndex];
+		WepStatus = pMbss-> WepStatus;
+		DefaultKeyId = pMbss->DefaultKeyId;
+	}
+        idx = pIoctlSec->KeyIdx;
+        if (idx)
+        {
+                if (idx < 1 || idx > 4)
+                {
+                        pIoctlSec->Status = RTMP_IO_EINVAL;
+                        return NDIS_STATUS_FAILURE;
+                }
+                idx--;
+
+                if ((WepStatus == Ndis802_11Encryption2Enabled) ||
+                        (WepStatus == Ndis802_11Encryption3Enabled))
+                {
+                        if (idx != DefaultKeyId)
+                        {
+                                pIoctlSec->Status = 0;
+                                pIoctlSec->length = 0;
+                                return NDIS_STATUS_FAILURE;
+                        }
+                }
+        }
+        else
+                idx = DefaultKeyId;
+
+        pIoctlSec->KeyIdx = idx + 1;
+
+        pIoctlSec->length = 0;
+        switch(WepStatus) {
+                case Ndis802_11WEPDisabled:
+                        pIoctlSec->Alg = RT_CMD_STA_IOCTL_SECURITY_ALG_NONE;
+                        pIoctlSec->flags |= RT_CMD_STA_IOCTL_SECURITY_DISABLED;
+                        break;
+                case Ndis802_11WEPEnabled:
+                        pIoctlSec->Alg = RT_CMD_STA_IOCTL_SECURITY_ALG_WEP;
+                        if (pAd->SharedKey[BSS0][idx].KeyLen > pIoctlSec->MaxKeyLen)
+                        {
+                                pIoctlSec->Status = RTMP_IO_E2BIG;
+                                return NDIS_STATUS_FAILURE;
+                        }
+                        else
+                        {
+                                pIoctlSec->length = pAd->SharedKey[BSS0][idx].KeyLen;
+                                pIoctlSec->pData = (PCHAR)&(pAd->SharedKey[BSS0][idx].Key[0]);
+                        }
+                        break;
+                case Ndis802_11Encryption2Enabled:
+                case Ndis802_11Encryption3Enabled:
+                        if (WepStatus == Ndis802_11Encryption2Enabled)
+                                pIoctlSec->Alg = RT_CMD_STA_IOCTL_SECURITY_ALG_TKIP;
+                        else
+                                pIoctlSec->Alg = RT_CMD_STA_IOCTL_SECURITY_ALG_CCMP;
+
+                        if (pIoctlSec->MaxKeyLen < 32)
+                        {
+                                pIoctlSec->Status = RTMP_IO_E2BIG;
+                                return NDIS_STATUS_FAILURE;
+                        }
+                        else
+                        {
+                                pIoctlSec->length = 32;
+#ifdef CONFIG_AP_SUPPORT
+				if (pObj->ioctl_if_type == INT_MAIN ||pObj->ioctl_if_type == INT_MBSSID )
+					pIoctlSec->pData = (PCHAR)&pAd->ApCfg.MBSSID[ifIndex].PMK[0];
+#ifdef APCLI_SUPPORT
+				if (pObj->ioctl_if_type == INT_APCLI )
+					pIoctlSec->pData = (PCHAR)&pAd->ApCfg.ApCliTab[ifIndex].PMK[0];
+#endif /*APCLI_SUPPORT*/
+#endif /* CONFIG_AP_SUPPORT */
+
+#ifdef CONFIG_STA_SUPPORT
+					pIoctlSec->pData = (PCHAR)&pAd->StaCfg.PMK[0];
+#endif /* CONFIG_STA_SUPPORT */
+                       }
+                        break;
+                default:
+                        pIoctlSec->Status = RTMP_IO_EINVAL;
+                        return NDIS_STATUS_FAILURE;
+        }
+
+        return NDIS_STATUS_SUCCESS;
+}
+
+
+
 
 INT ComputeChecksum(
 	IN UINT PIN)
@@ -1278,7 +2050,7 @@ INT RTMP_COM_IoctlHandle(
 			PMAC_TABLE_ENTRY pMacEntry = NULL;
 #endif /* CONFIG_AP_SUPPORT */
 			RT_CMD_IW_STATS *pStats = (RT_CMD_IW_STATS *)pData;
-
+			DBGPRINT(RT_DEBUG_TRACE, ("-->ra0 CMD_RTPRIV_IOCTL_INF_IW_STATUS_GET\n"));
 			pStats->qual = 0;
 			pStats->level = 0;
 			pStats->noise = 0;
@@ -1355,10 +2127,19 @@ INT RTMP_COM_IoctlHandle(
 			if (CurOpMode == OPMODE_AP)
 			{
 				if (pMacEntry != NULL)
+				{
 					pStats->level =
 						RTMPMaxRssi(pAd, pMacEntry->RssiSample.AvgRssi0,
 										pMacEntry->RssiSample.AvgRssi1,
 										pMacEntry->RssiSample.AvgRssi2);
+				}
+				else
+				{
+					if ((pStats->priv_flags != INT_APCLI))
+						pStats->level =RTMPMaxRssi(pAd, pAd->ApCfg.RssiSample.AvgRssi0,
+												pAd->ApCfg.RssiSample.AvgRssi1,
+												pAd->ApCfg.RssiSample.AvgRssi2);
+				}
 #ifdef P2P_APCLI_SUPPORT
 				else
 					pStats->level =
@@ -1370,6 +2151,10 @@ INT RTMP_COM_IoctlHandle(
 #endif /* CONFIG_AP_SUPPORT */
 
 #ifdef CONFIG_AP_SUPPORT
+			pStats->level = RTMPMaxRssi(pAd, pAd->ApCfg.RssiSample.AvgRssi0,
+										pAd->ApCfg.RssiSample.AvgRssi1,
+										pAd->ApCfg.RssiSample.AvgRssi2);
+
 			pStats->noise = RTMPMaxRssi(pAd, pAd->ApCfg.RssiSample.AvgRssi0,
 										pAd->ApCfg.RssiSample.AvgRssi1,
 										pAd->ApCfg.RssiSample.AvgRssi2) -
--- a/rt2860v2/common/cmm_data.c
+++ b/rt2860v2/common/cmm_data.c
@@ -3161,6 +3161,11 @@ MAC_TABLE_ENTRY *MacTableInsertEntry(
 			drop_mask_init_per_client(pAd, pEntry);
 #endif /* DROP_MASK_SUPPORT */
 
+
+#ifdef PEER_DELBA_TX_ADAPT
+			Peer_DelBA_Tx_Adapt_Init(pAd, pEntry);
+#endif /* PEER_DELBA_TX_ADAPT */
+
 #ifdef CONFIG_AP_SUPPORT
 #ifdef P2P_SUPPORT
 			if (OpMode == OPMODE_AP)
--- a/rt2860v2/common/cmm_info.c
+++ b/rt2860v2/common/cmm_info.c
@@ -3675,6 +3675,17 @@ VOID	RTMPCommSiteSurveyData(
 }
 
 #if defined (AP_SCAN_SUPPORT) || defined (CONFIG_STA_SUPPORT)
+VOID RTMPIoctlSetSiteSurvey(
+        IN      PRTMP_ADAPTER   pAdapter,
+        IN      RTMP_IOCTL_INPUT_STRUCT *wrq)
+{
+
+	NDIS_802_11_SSID Ssid;
+	NdisZeroMemory(&Ssid, sizeof(NDIS_802_11_SSID));
+
+	ApSiteSurvey(pAdapter, &Ssid, SCAN_ACTIVE, FALSE);
+}
+
 VOID RTMPIoctlGetSiteSurvey(
 	IN	PRTMP_ADAPTER	pAdapter, 
 	IN	RTMP_IOCTL_INPUT_STRUCT	*wrq)
--- a/rt2860v2/common/cmm_loft_cal.c
+++ b/rt2860v2/common/cmm_loft_cal.c
@@ -304,8 +304,8 @@ UINT32 Read_FFT_Accumulation(IN RTMP_ADA
 	UINT32 MacValue = 0;
 	int fftout_i = 0, fftout_q = 0;
 	UINT32 power_tmp=0, power_int = 0;
-	UCHAR BBPValue = 0;
-	UCHAR tone_idx_int;
+// 	UCHAR BBPValue = 0;
+// 	UCHAR tone_idx_int;
 
 	RTMP_BBP_IO_WRITE8_BY_REG_ID(pAd, BBP_R158, 0xba);
 	RTMP_BBP_IO_WRITE8_BY_REG_ID(pAd, BBP_R159, tone_idx);
--- a/rt2860v2/common/cmm_profile.c
+++ b/rt2860v2/common/cmm_profile.c
@@ -3260,10 +3260,10 @@ NDIS_STATUS	RTMPSetProfileParameters(
 			if (RTMPGetKeyParameter("AutoChannelSkipList", tmpbuf, 50, pBuffer, FALSE))
 			{		
 				pAd->ApCfg.AutoChannelSkipListNum = delimitcnt(tmpbuf, ";") + 1;
-				if ( pAd->ApCfg.AutoChannelSkipListNum > 10 )
+				if ( pAd->ApCfg.AutoChannelSkipListNum > 24 )
 				{
 					DBGPRINT(RT_DEBUG_TRACE, ("Your no. of AutoChannelSkipList( %d ) is larger than 10 (boundary)\n",pAd->ApCfg.AutoChannelSkipListNum));
-					pAd->ApCfg.AutoChannelSkipListNum = 10;
+					pAd->ApCfg.AutoChannelSkipListNum = 24;
 				}
 						
 				for (i = 0, macptr = rstrtok(tmpbuf,";"); macptr ; macptr = rstrtok(NULL,";"), i++)
--- a/rt2860v2/common/cmm_wpa.c
+++ b/rt2860v2/common/cmm_wpa.c
@@ -1070,6 +1070,8 @@ VOID PeerPairMsg1Action(
 			group_cipher = pAd->ApCfg.ApCliTab[IfIndex].GroupCipher;
 			rsnie_ptr = pAd->ApCfg.ApCliTab[IfIndex].RSN_IE;
 			rsnie_len = pAd->ApCfg.ApCliTab[IfIndex].RSNIE_Len;
+
+			pAd->ApCfg.ApCliTab[IfIndex].ConnectState = APCLI_START_4WAY;
 		}
 #endif /* APCLI_SUPPORT */			
 	}
@@ -1393,7 +1395,7 @@ VOID PeerPairMsg3Action(
 	USHORT ifIndex = (USHORT)(Elem->Priv);
 	UCHAR CliIdx = 0xFF;
 #endif /* MAC_REPEATER_SUPPORT */
-
+	UINT				IfIndex = 0;
 	DBGPRINT(RT_DEBUG_TRACE, ("===> PeerPairMsg3Action \n"));
 	
 	if ((!pEntry) || (!IS_ENTRY_CLIENT(pEntry) && !IS_ENTRY_APCLI(pEntry)))
@@ -1408,7 +1410,7 @@ VOID PeerPairMsg3Action(
 #ifdef APCLI_SUPPORT
 		if (IS_ENTRY_APCLI(pEntry))
 		{
-			UINT IfIndex = 0;
+
 		
 			IfIndex = pEntry->MatchAPCLITabIdx;
 #ifdef MAC_REPEATER_SUPPORT
@@ -1568,6 +1570,9 @@ VOID PeerPairMsg3Action(
 		IF_DEV_CONFIG_OPMODE_ON_AP(pAd)
 		{				
 #ifdef APCLI_SUPPORT
+			IfIndex = pEntry->MatchAPCLITabIdx;
+			pAd->ApCfg.ApCliTab[IfIndex].ConnectState = APCLI_NOT_TRIGGER_CONNECT;
+			pAd->ApCfg.ApCliTab[IfIndex].FailReason = 0;
 #ifdef APCLI_AUTO_CONNECT_SUPPORT
 			if((pAd->ApCfg.ApCliAutoConnectRunning == TRUE)
 #ifdef MAC_REPEATER_SUPPORT
@@ -2010,6 +2015,11 @@ VOID	PeerGroupMsg1Action(
 	IF_DEV_CONFIG_OPMODE_ON_AP(pAd)
 	{				
 #ifdef APCLI_SUPPORT
+			UINT				IfIndex = 0;
+
+			IfIndex = pEntry->MatchAPCLITabIdx;
+		pAd->ApCfg.ApCliTab[IfIndex].ConnectState = APCLI_NOT_TRIGGER_CONNECT;
+		pAd->ApCfg.ApCliTab[IfIndex].FailReason = 0;
 #ifdef APCLI_AUTO_CONNECT_SUPPORT
 		if ((pAd->ApCfg.ApCliAutoConnectRunning == TRUE)
 #ifdef MAC_REPEATER_SUPPORT
--- a/rt2860v2/common/mlme.c
+++ b/rt2860v2/common/mlme.c
@@ -3745,13 +3745,17 @@ VOID BssEntrySet(
 		pBss->WscDPIDFromWpsAP = 0xFFFF;
 #endif /* WSC_INCLUDED */
 
-#ifdef CONFIG_STA_SUPPORT
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
 		NdisZeroMemory(&pBss->WpaIE.IE[0], MAX_CUSTOM_LEN);
 		NdisZeroMemory(&pBss->RsnIE.IE[0], MAX_CUSTOM_LEN);
-		NdisZeroMemory(&pBss->WpsIE.IE[0], MAX_CUSTOM_LEN);
 		pBss->WpaIE.IELen = 0;
 		pBss->RsnIE.IELen = 0;
+
+#endif
+
+#ifdef CONFIG_STA_SUPPORT
 		pBss->WpsIE.IELen = 0;
+		NdisZeroMemory(&pBss->WpsIE.IE[0], MAX_CUSTOM_LEN);
 #ifdef WAPI_SUPPORT
 		NdisZeroMemory(&pBss->WapiIE.IE[0], MAX_CUSTOM_LEN);
 		pBss->WapiIE.IELen = 0;
@@ -3791,7 +3795,7 @@ VOID BssEntrySet(
 #endif /* CONFIG_STA_SUPPORT */
 						break;
 					}
-#ifdef CONFIG_STA_SUPPORT
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
 					if (NdisEqualMemory(pEid->Octet, WPA_OUI, 4))
 					{
 						if ((pEid->Len + 2) > MAX_CUSTOM_LEN)
@@ -3802,10 +3806,8 @@ VOID BssEntrySet(
 						pBss->WpaIE.IELen = pEid->Len + 2;
 						NdisMoveMemory(pBss->WpaIE.IE, pEid, pBss->WpaIE.IELen);
 					}
-#endif /* CONFIG_STA_SUPPORT */
 					break;
 
-#ifdef CONFIG_STA_SUPPORT
 				case IE_RSN:
 					if (NdisEqualMemory(pEid->Octet + 2, RSN_OUI, 3))
 					{
@@ -3818,6 +3820,9 @@ VOID BssEntrySet(
 						NdisMoveMemory(pBss->RsnIE.IE, pEid, pBss->RsnIE.IELen);
 					}
 					break;
+#endif
+
+#ifdef CONFIG_STA_SUPPORT
 #ifdef WAPI_SUPPORT
 				case IE_WAPI:
 					if (NdisEqualMemory(pEid->Octet + 4, WAPI_OUI, 3))
--- a/rt2860v2/common/rtmp_init_inf.c
+++ b/rt2860v2/common/rtmp_init_inf.c
@@ -366,7 +366,7 @@ int rt28xx_init(
 			{
 				SysRegValue |= 0x100000;
 				RTMP_SYS_IO_WRITE32(0xb0000060, SysRegValue);
-				DBGPRINT(RT_DEBUG_ERROR,("Change as GPIO Mode(0x%x)\n", SysRegValue));
+				DBGPRINT(RT_DEBUG_ERROR,("Change as GPIO Mode(0x%lx)\n", SysRegValue));
 			}
 		}
 #endif /* defined(RT6352_EP_SUPPORT) || defined(RT6352_EL_SUPPORT) */
--- a/rt2860v2/common/wsc.c
+++ b/rt2860v2/common/wsc.c
@@ -7298,6 +7298,7 @@ VOID WscInit(
 				APUpdateBeaconFrame(pAd, pWscControl->EntryIfIdx & 0x0F);
 			}
 		}
+		NdisZeroMemory(pAd->CommonCfg.LatestWSCMacAddr,MAC_ADDR_LEN);
 #endif /* CONFIG_AP_SUPPORT */        
 	}
 }
--- a/rt2860v2/include/mlme.h
+++ b/rt2860v2/include/mlme.h
@@ -1124,7 +1124,7 @@ typedef struct {
     UCHAR       EdcaUpdateCount;
 } QOS_CAPABILITY_PARM, *PQOS_CAPABILITY_PARM;
 
-#ifdef CONFIG_STA_SUPPORT
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
 typedef struct {
     UCHAR       IELen;
     UCHAR       IE[MAX_CUSTOM_LEN];
@@ -1208,9 +1208,12 @@ typedef struct {
 #endif /* WSC_INCLUDED */
 
 
-#ifdef CONFIG_STA_SUPPORT
+#if defined(CONFIG_STA_SUPPORT) || defined(APCLI_SUPPORT)
     WPA_IE_     WpaIE;
     WPA_IE_     RsnIE;
+#endif
+
+#ifdef CONFIG_STA_SUPPORT
 	WPA_IE_ 	WpsIE;
 #ifdef WAPI_SUPPORT
 	WPA_IE_     WapiIE;
--- a/rt2860v2/include/os/rt_linux.h
+++ b/rt2860v2/include/os/rt_linux.h
@@ -171,9 +171,7 @@ extern	const struct iw_handler_def rt28x
 #endif /* RTMP_RBUS_SUPPORT */
 #endif /* SINGLE_SKU_V2 */
 
-#ifdef CONFIG_APSTA_MIXED_SUPPORT
 extern	const struct iw_handler_def rt28xx_ap_iw_handler_def;
-#endif /* CONFIG_APSTA_MIXED_SUPPORT */
 
 /***********************************************************************************
  *	Compiler related definitions
--- a/rt2860v2/include/os/rt_os.h
+++ b/rt2860v2/include/os/rt_os.h
@@ -107,6 +107,7 @@
 #define RTPRIV_IOCTL_SHOW							(SIOCIWFIRSTPRIV + 0x11)
 #define RTPRIV_IOCTL_WSC_PROFILE                    (SIOCIWFIRSTPRIV + 0x12)
 #define RTPRIV_IOCTL_QUERY_BATABLE                  (SIOCIWFIRSTPRIV + 0x16)
+#define RTPRIV_IOCTL_GET_APCLI_CONNSTATUS   (SIOCIWFIRSTPRIV + 0x17)
 #ifdef INF_AR9
 #define RTPRIV_IOCTL_GET_AR9_SHOW   (SIOCIWFIRSTPRIV + 0x17)
 #endif/* INF_AR9 */
--- a/rt2860v2/include/rtmp.h
+++ b/rt2860v2/include/rtmp.h
@@ -1900,7 +1900,7 @@ typedef struct _COMMON_CONFIG {
 	MO_CFG_STRUCT MO_Cfg;	/* data structure for mitigating microwave interference */
 #endif /* defined(MICROWAVE_OVEN_SUPPORT) || defined(DYNAMIC_VGA_SUPPORT) */
 	BOOLEAN bEnTemperatureTrack;
-
+	UCHAR TxPowerShow;
 } COMMON_CONFIG, *PCOMMON_CONFIG;
 
 #ifdef DBG_CTRL_SUPPORT
@@ -3053,6 +3053,10 @@ typedef struct _APCLI_STRUCT {
 	UCHAR LinkIdx;
 	APCLI_COUNTER ApCliCounter;
 	PVOID pAd;
+
+	UCHAR ConnectState;
+	UCHAR FailReason;
+	ULONG   LastTriggerTime;
 } APCLI_STRUCT, *PAPCLI_STRUCT;
 
 typedef struct _AP_ADMIN_CONFIG {
@@ -3110,7 +3114,7 @@ typedef struct _AP_ADMIN_CONFIG {
 	UCHAR AutoChannel_Channel;	/* channel number during Auto Channel Selection */
 	UCHAR current_channel_index;	/* current index of channel list */
 	UCHAR AutoChannelSkipListNum;	/* number of rejected channel list */
-	UCHAR AutoChannelSkipList[10];
+	UCHAR AutoChannelSkipList[24];
 	UCHAR DtimCount;	/* 0.. DtimPeriod-1 */
 	UCHAR DtimPeriod;	/* default = 3 */
 	UCHAR ErpIeContent;
@@ -9072,6 +9076,11 @@ PNDIS_PACKET RTMPDeFragmentDataFrame(
 VOID RTMPIoctlGetSiteSurvey(
 	IN	PRTMP_ADAPTER	pAdapter, 
 	IN	RTMP_IOCTL_INPUT_STRUCT *wrq);
+
+VOID RTMPIoctlSetSiteSurvey(
+        IN      RTMP_ADAPTER *pAd,
+        IN      RTMP_IOCTL_INPUT_STRUCT *wrq);
+
 #endif
 
 #ifdef CONFIG_AP_SUPPORT
@@ -10101,6 +10110,15 @@ UCHAR GetSkuPerRatePwr(
 	IN INT32 paValue);
 #endif /* SINGLE_SKU_V2 */
 
+INT RtmpIoctl_rt_ioctl_giwencodeext(RTMP_ADAPTER *pAd, VOID *pData, ULONG Data);
+INT RtmpIoctl_rt_ioctl_giwscan(
+        IN      RTMP_ADAPTER                    *pAd,
+        IN      VOID                                    *pData,
+        IN      ULONG                                   Data);
+
+int rt_ioctl_giwscan(struct net_device *dev, struct iw_request_info *info,
+                        struct iw_point *data, char *extra);
+
 #ifdef PEER_DELBA_TX_ADAPT
 VOID Peer_DelBA_Tx_Adapt_Init(
 	IN PRTMP_ADAPTER pAd,
--- a/rt2860v2/include/rtmp_cmd.h
+++ b/rt2860v2/include/rtmp_cmd.h
@@ -166,7 +166,14 @@ typedef enum _CMD_RTPRIV_IOCTL_AP {
 	CMD_RTPRIV_IOCTL_AP_SIOCGIWESSID,
 	CMD_RTPRIV_IOCTL_AP_SIOCGIWRATEQ,
 	CMD_RTPRIV_IOCTL_AP_SIOCSIWGENIE,
-
+	CMD_RTPRIV_IOCTL_AP_SIOCGIWENCODEEXT,
+	CMD_RTPRIV_IOCTL_AP_SIOCSIWSCAN,
+	CMD_RTPRIV_IOCTL_AP_SIOCGIWSCAN,
+	CMD_RTPRIV_IOCTL_CONNSTATUS,
+	CMD_RTPRIV_IOCTL_AP_SIOCGIWTXPOW,
+	CMD_RTPRIV_IOCTL_AP_GET_PHYMODE,
+	CMD_RTPRIV_IOCTL_AP_GET_BW,
+	CMD_RTPRIV_IOCTL_AP_GET_SHORTGI,
 	/* can not exceed 0x5000 */
 } CMD_RTPRIV_IOCTL_AP;
 
@@ -665,6 +672,7 @@ typedef struct __RT_CMD_STA_IOCTL_NICK_N
 } RT_CMD_STA_IOCTL_NICK_NAME;
 
 typedef struct __RT_CMD_STA_IOCTL_SECURITY {
+	struct wifi_dev *wdev;
 	INOUT CHAR *pData;
 	INOUT UINT16 length;
 	IN INT32 KeyIdx;
--- a/rt2860v2/include/rtmp_def.h
+++ b/rt2860v2/include/rtmp_def.h
@@ -1221,6 +1221,16 @@
 #define APCLI_CTRL_FUNC_SIZE              (APCLI_MAX_CTRL_STATE * APCLI_MAX_CTRL_MSG)
 
 
+/*woody*/
+#define APCLI_NOT_TRIGGER_CONNECT           0	/* merge NO_BSS,IBSS_IDLE,IBSS_ACTIVE and BSS in to 1 state */
+#define APCLI_START_PROBE                  1
+#define APCLI_START_AUTH                  2
+#define APCLI_RECE_AUTH                3
+#define APCLI_START_ASSOC                  4
+#define APCLI_RECE_ASSOC                 5
+#define APCLI_START_4WAY               6
+
+
 #endif /* APCLI_SUPPORT */
 
 #ifdef CONFIG_STA_SUPPORT
--- a/rt2860v2/os/linux/ap_ioctl.c
+++ b/rt2860v2/os/linux/ap_ioctl.c
@@ -31,6 +31,11 @@
 #include "rt_os_net.h"
 #include <linux/wireless.h>
 
+extern
+int rt_ioctl_giwscan(struct net_device *dev,
+                        struct iw_request_info *info,
+                        struct iw_point *data, char *extra);
+
 struct iw_priv_args ap_privtab[] = {
 { RTPRIV_IOCTL_SET, 
 /* 1024 --> 1024 + 512 */
@@ -83,21 +88,30 @@ struct iw_priv_args ap_privtab[] = {
   "get_ba_table"},
 { RTPRIV_IOCTL_STATISTICS,
   IW_PRIV_TYPE_CHAR | 1024, IW_PRIV_TYPE_CHAR | 1024,
-  "stat"}
+  "stat"},
+{ RTPRIV_IOCTL_GET_APCLI_CONNSTATUS,
+  IW_PRIV_TYPE_CHAR | 1024, IW_PRIV_TYPE_CHAR | 1024,
+  "Connstatus"}
+};
+
+static const iw_handler rt_ap_handler[]=
+{
+	[(SIOCGIWSCAN-SIOCSIWCOMMIT)] = (iw_handler) rt_ioctl_giwscan,
+//	[(SIOCSIWSCAN-SIOCSIWCOMMIT)] = (iw_handler) rt_ioctl_ap_siwscan,
 };
 
 
-#ifdef CONFIG_APSTA_MIXED_SUPPORT
 const struct iw_handler_def rt28xx_ap_iw_handler_def =
 {
+	.standard = (iw_handler *) rt_ap_handler,
 #define	N(a)	(sizeof (a) / sizeof (a[0]))
+	.num_standard = sizeof(rt_ap_handler) / sizeof(iw_handler),
 	.private_args	= (struct iw_priv_args *) ap_privtab,
 	.num_private_args	= N(ap_privtab),
 #if IW_HANDLER_VERSION >= 7
 	.get_wireless_stats = rt28xx_get_wireless_stats,
 #endif 
 };
-#endif /* CONFIG_APSTA_MIXED_SUPPORT */
 
 
 INT rt28xx_ap_ioctl(
@@ -214,6 +228,8 @@ INT rt28xx_ap_ioctl(
 			wrqin->u.freq.m = Channel; /*pAd->CommonCfg.Channel; */
 			wrqin->u.freq.e = 0;
 			wrqin->u.freq.i = 0;
+			DBGPRINT(RT_DEBUG_TRACE, ("IOCTL::SIOCGIWFREQ:(%ld)\n", Channel));
+
 		}
 			break; 
 		case SIOCSIWFREQ: /*set channel/frequency (Hz) */
@@ -240,7 +256,59 @@ INT rt28xx_ap_ioctl(
 		case SIOCSIWRTS:  /*set RTS/CTS threshold (bytes) */
 		case SIOCGIWFRAG:  /*get fragmentation thr (bytes) */
 		case SIOCSIWFRAG:  /*set fragmentation thr (bytes) */
+			Status = RTMP_IO_EOPNOTSUPP;
+			break;
 		case SIOCGIWENCODE:  /*get encoding token & mode */
+		{
+			//printk("==> SIOCGIWENCODE\n");
+
+			RT_CMD_STA_IOCTL_SECURITY IoctlSec, *pIoctlSec = &IoctlSec;
+			int max_key_len;
+			struct iw_point *encoding = &wrqin->u.encoding;
+
+			 max_key_len = encoding->length /*- sizeof(*ext)*/;
+			 if (max_key_len < 0)
+                	 {
+				Status = RTMP_IO_EOPNOTSUPP;
+			 	break;
+			 }
+
+			 memset(pIoctlSec, 0, sizeof(RT_CMD_STA_IOCTL_SECURITY));
+			 pIoctlSec->KeyIdx = encoding->flags & IW_ENCODE_INDEX;
+			 pIoctlSec->MaxKeyLen = max_key_len;
+
+			if (RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_AP_SIOCGIWENCODEEXT, 0,
+                                pIoctlSec, RT_DEV_PRIV_FLAGS_GET(net_dev)) != NDIS_STATUS_SUCCESS)
+        		{
+                		//ext->key_len = 0;
+                		//RT_CMD_STATUS_TRANSLATE(pIoctlSec->Status);
+                		//return pIoctlSec->Status;
+				Status = RTMP_IO_EOPNOTSUPP;
+				break;
+        		}
+
+			encoding->flags = pIoctlSec->KeyIdx;
+			encoding->length = pIoctlSec->length;
+
+			if (pIoctlSec->Alg == RT_CMD_STA_IOCTL_SECURITY_ALG_NONE)
+                		encoding->flags |= IW_ENCODE_ALG_NONE;
+        		else if (pIoctlSec->Alg == RT_CMD_STA_IOCTL_SECURITY_ALG_WEP)
+                		encoding->flags |= IW_ENCODE_ALG_WEP;
+        		else if (pIoctlSec->Alg == RT_CMD_STA_IOCTL_SECURITY_ALG_TKIP)
+                		encoding->flags |= IW_ENCODE_ALG_TKIP;
+        		else if (pIoctlSec->Alg == RT_CMD_STA_IOCTL_SECURITY_ALG_CCMP)
+                		encoding->flags |= IW_ENCODE_ALG_CCMP;
+
+        		if (pIoctlSec->flags & RT_CMD_STA_IOCTL_SECURITY_DISABLED)
+                		encoding->flags |= IW_ENCODE_DISABLED;
+
+			if (pIoctlSec->length && pIoctlSec->pData)
+			{
+				encoding->flags |= IW_ENCODE_ENABLED;
+				memcpy(encoding->pointer, pIoctlSec->pData, encoding->length);
+			}
+		}
+			break;
 		case SIOCSIWENCODE:  /*set encoding token & mode */
 			Status = RTMP_IO_EOPNOTSUPP;
 			break;
@@ -257,26 +325,99 @@ INT rt28xx_ap_ioctl(
 			break;
 		case SIOCGIWMODE:  /*get operation mode */
 			wrqin->u.mode = IW_MODE_INFRA;   /*SoftAP always on INFRA mode. */
+			DBGPRINT(RT_DEBUG_TRACE,("ioctl SIOCGIWMODE=%d\n", wrqin->u.mode));
 			break;
 		case SIOCSIWAP:  /*set access point MAC addresses */
 		case SIOCSIWMODE:  /*set operation mode */
 		case SIOCGIWSENS:   /*get sensitivity (dBm) */
 		case SIOCSIWSENS:	/*set sensitivity (dBm) */
+			break;
 		case SIOCGIWPOWER:  /*get Power Management settings */
+		{
+			DBGPRINT(RT_DEBUG_TRACE,("SIOCGIWPOWER\n"));
+                        break;
+		}
 		case SIOCSIWPOWER:  /*set Power Management settings */
+			break;
 		case SIOCGIWTXPOW:  /*get transmit power (dBm) */
+		{
+			//DBGPRINT(RT_DEBUG_ERROR,("SIOCGIWTXPOW\n"));
+			//int len;
+			UINT power;
+	              wrqin->u.txpower.value = 0;
+                     wrqin->u.txpower.fixed = 1;
+	              wrqin->u.txpower.disabled = 0;
+                     wrqin->u.txpower.flags = IW_TXPOW_DBM;
+
+			RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_SIOCGIWTXPOW, 0,
+								&(power), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
+			wrqin->u.txpower.value = power;
+				//len = copy_to_user(wrqin->u.data.pointer, prange, sizeof(struct iw_range));
+                        break;
+		}
 		case SIOCSIWTXPOW:  /*set transmit power (dBm) */
-		/*case SIOCGIWRANGE:	//Get range of parameters */
+			DBGPRINT(RT_DEBUG_TRACE, ("SIOCSIWTXPOW\n"));
+			break;
+		case SIOCGIWSTATS:
+		{
+			struct iw_statistics *pStats;
+			RT_CMD_IW_STATS DrvIwStats, *pDrvIwStats = &DrvIwStats;
+			int len;
+
+			DBGPRINT(RT_DEBUG_TRACE,("SIOCGIWSTATS\n"));
+
+			GET_PAD_FROM_NET_DEV(pAd, net_dev);
+
+
+			pDrvIwStats->priv_flags = RT_DEV_PRIV_FLAGS_GET(net_dev);
+			pDrvIwStats->dev_addr = (PUCHAR)net_dev->dev_addr;
+
+			if (RTMP_DRIVER_IW_STATS_GET(pAd, pDrvIwStats) != NDIS_STATUS_SUCCESS)
+				return 0;
+
+			pStats = (struct iw_statistics *)(pDrvIwStats->pStats);
+			pStats->status = 0; /* Status - device dependent for now */
+
+
+			pStats->qual.updated = 1;     /* Flags to know if updated */
+			pStats->qual.qual = pDrvIwStats->qual;
+			pStats->qual.level = pDrvIwStats->level;
+			pStats->qual.noise = pDrvIwStats->noise;
+			pStats->discard.nwid = 0;     /* Rx : Wrong nwid/essid */
+			pStats->miss.beacon = 0;      /* Missed beacons/superframe */
+			len = copy_to_user(wrqin->u.data.pointer, pStats, sizeof(struct iw_statistics));
+                        break;
+		}
 		case SIOCGIWRETRY:	/*get retry limits and lifetime */
 		case SIOCSIWRETRY:	/*set retry limits and lifetime */
 			Status = RTMP_IO_EOPNOTSUPP;
 			break;
 		case SIOCGIWRANGE:	/*Get range of parameters */
 		    {
+// 				UINT power;
+				int i,bw,shortGI;
+				UCHAR phymode;
 /*				struct iw_range range; */
 				struct iw_range *prange = NULL;
 				UINT32 len;
 
+				INT OFDM_RateTable[] ={2,  4,   11,  22, 12, 18,   24,  36, 48, 72, 96, 108,};
+				INT HT20_LongGI[] ={13, 26,   39,  52,  78, 104, 117, 130, 26,  52,  78, 104, 156, 208, 234, 260,};
+				INT HT40_LongGI[] ={27, 54,   81, 108, 162, 216, 243, 270, 54, 108, 162, 216, 324, 432, 486, 540,};
+				INT HT20_ShortGI[] ={14, 29,   43,  57,  87, 115, 130, 144, 29, 59,   87, 115, 173, 230, 260, 288,};
+				INT HT40_ShortGI[] ={30, 60,   90, 120, 180, 240, 270, 300, 60, 120, 180, 240, 360, 480, 540, 600,};
+				//DBGPRINT(RT_DEBUG_ERROR,("SIOCGIWRANGE:\n"));
+
+				RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_GET_PHYMODE, 0,
+												&(phymode), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
+				RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_GET_BW, 0,
+												&(bw), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
+				RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_GET_SHORTGI, 0,
+												&(shortGI), RT_DEV_PRIV_FLAGS_GET(net_dev));
+
 				/* allocate memory */
 				os_alloc_mem(NULL, (UCHAR **)&prange, sizeof(struct iw_range));
 				if (prange == NULL)
@@ -289,6 +430,8 @@ INT rt28xx_ap_ioctl(
 				prange->we_version_compiled = WIRELESS_EXT;
 				prange->we_version_source = 14;
 
+				 prange->throughput = 27 * 1000 * 1000;
+
 				/*
 					what is correct max? This was not
 					documented exactly. At least
@@ -297,7 +440,94 @@ INT rt28xx_ap_ioctl(
 				prange->max_qual.qual = 100;
 				prange->max_qual.level = 0; /* dB */
 				prange->max_qual.noise = 0; /* dB */
-				len = copy_to_user(wrq->u.data.pointer, prange, sizeof(struct iw_range));
+				prange->max_qual.updated = 7;
+
+				prange->avg_qual.qual = 70;
+				prange->avg_qual.level = 0;
+				 prange->avg_qual.noise = 0;
+				 prange->avg_qual.updated = 7;
+
+				if (phymode < 5)
+				{
+					prange->num_bitrates = 12;
+					 for (i = 0; i < prange->num_bitrates; i++)
+	                				 prange->bitrate[i] = (OFDM_RateTable[i]) *
+	                     			500000;
+				}
+#ifdef DOT11_N_SUPPORT
+				else {
+
+					if (bw == 0)
+					{
+						if (shortGI ==0 )
+						{
+							prange->num_bitrates = sizeof(HT20_LongGI)/sizeof(HT20_LongGI[0]);
+							 for (i = 0; i < prange->num_bitrates; i++)
+			                				 prange->bitrate[i] = (HT20_LongGI[i]) *
+			                     			500000;
+						} else {
+							prange->num_bitrates = sizeof(HT20_ShortGI)/sizeof(HT20_ShortGI[0]);
+							 for (i = 0; i < prange->num_bitrates; i++)
+			                				 prange->bitrate[i] = (HT20_ShortGI[i]) *
+			                     			500000;
+						}
+					} else {
+						if (shortGI ==0 )
+						{
+							prange->num_bitrates = sizeof(HT40_LongGI)/sizeof(HT40_LongGI[0]);
+							 for (i = 0; i < prange->num_bitrates; i++)
+			                				 prange->bitrate[i] = (HT40_LongGI[i]) *
+			                     			500000;
+						} else {
+							prange->num_bitrates = sizeof(HT40_ShortGI)/sizeof(HT40_ShortGI[0]);
+							 for (i = 0; i < prange->num_bitrates; i++)
+			                				 prange->bitrate[i] = (HT40_ShortGI[i]) *
+			                     			500000;
+						}
+					}
+
+				}
+
+#endif
+				   prange->max_rts = 2347;
+				    prange->min_frag = MIN_FRAG_THRESHOLD;
+				prange->max_frag = MAX_FRAG_THRESHOLD;
+
+				  prange->encoding_size[0] = 5;
+        			 prange->encoding_size[1] = 13;
+         			prange->num_encoding_sizes = 2;
+         			prange->max_encoding_tokens = 4;
+
+			        {
+				  INT bg[] ={2412, 2417, 2422, 2427, 2432, 2437, 2442, 2447, 2452, 2457, 2462, 2467, 2472,2477,2482,2487};
+				  i = 0;
+			                 for (i = 1; i <14; i ++) {
+
+			                         prange->freq[i-1].i = i;
+			                         prange->freq[i-1].m = bg[i-1] * 100000;
+			                        prange->freq[i-1].e = 1;
+			                 }
+			         }
+
+					prange->num_channels =13;
+					prange->num_frequency = 13;
+
+				 prange->event_capa[0] = (IW_EVENT_CAPA_K_0 |
+                                 IW_EVENT_CAPA_MASK(SIOCGIWTHRSPY) |
+                                 IW_EVENT_CAPA_MASK(SIOCGIWAP) |
+                                 IW_EVENT_CAPA_MASK(SIOCGIWSCAN));
+        			 prange->event_capa[1] = IW_EVENT_CAPA_K_1;
+
+				prange->enc_capa = IW_ENC_CAPA_WPA | IW_ENC_CAPA_WPA2 |
+                 			IW_ENC_CAPA_CIPHER_TKIP | IW_ENC_CAPA_CIPHER_CCMP;
+
+         			prange->scan_capa = IW_SCAN_CAPA_ESSID | IW_SCAN_CAPA_TYPE;
+
+ 				prange->num_txpower = 2;
+     				prange->txpower_capa = IW_TXPOW_DBM|IW_TXPOW_RANGE;
+				prange->txpower[0] = -20;
+				prange->txpower[0] = -90;
+				len = copy_to_user(wrqin->u.data.pointer, prange, sizeof(struct iw_range));
 				os_free_mem(NULL, prange);
 		    }
 		    break;
@@ -387,6 +617,11 @@ INT rt28xx_ap_ioctl(
 			RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_STATISTICS, 0, NULL, 0);
 			break;
 
+		case RTPRIV_IOCTL_GET_APCLI_CONNSTATUS:
+			DBGPRINT(RT_DEBUG_ERROR,("-->RTPRIV_IOCTL_GET_APCLI_CONNSTATUS\n"));
+			RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_CONNSTATUS, 0, NULL, 0);
+			break;
+
 #ifdef WSC_AP_SUPPORT
 		case RTPRIV_IOCTL_WSC_PROFILE:
 			RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_WSC_PROFILE, 0, NULL, 0);
@@ -416,7 +651,16 @@ INT rt28xx_ap_ioctl(
 			break;
 #endif /* RTMP_RF_RW_SUPPORT */
 #endif /* DBG */
+		case SIOCSIWSCAN:
+			DBGPRINT(RT_DEBUG_TRACE,("====> SIOCSIWSCAN: %d\n", RT_DEV_PRIV_FLAGS_GET(net_dev)));
+			if (RTMP_AP_IoctlHandle(pAd, wrq, CMD_RTPRIV_IOCTL_AP_SIOCSIWSCAN, 0,
+			          net_dev, pIoctlConfig->priv_flags) != NDIS_STATUS_SUCCESS)
+                        {
+                                Status = RTMP_IO_EOPNOTSUPP;
+                                break;
+                        }
 
+			break;
 		default:
 /*			DBGPRINT(RT_DEBUG_ERROR, ("IOCTL::unknown IOCTL's cmd = 0x%08x\n", cmd)); */
 			Status = RTMP_IO_EOPNOTSUPP;
--- a/rt2860v2/os/linux/rt_linux.c
+++ b/rt2860v2/os/linux/rt_linux.c
@@ -822,7 +822,6 @@ VOID SendSignalToDaemon(
 }
 #endif /* CONFIG_AP_SUPPORT */
 
-#ifdef CONFIG_STA_SUPPORT
 INT32 ralinkrate[] = {
 2, 4, 11, 22,		/* CCK */
 12, 18, 24, 36, 48, 72, 96, 108,	/* OFDM */
@@ -841,6 +840,9 @@ INT32 ralinkrate[] = {
 
 UINT32 RT_RateSize = sizeof (ralinkrate);
 
+#ifdef CONFIG_STA_SUPPORT
+
+
 void send_monitor_packets(IN PNET_DEV pNetDev,
 			  IN PNDIS_PACKET pRxPacket,
 			  IN PHEADER_802_11 pHeader,
@@ -1785,14 +1787,12 @@ int RtmpOSNetDevAttach(
 #endif /*WIRELESS_EXT >= 12 */
 #endif /* CONFIG_STA_SUPPORT */
 
-#ifdef CONFIG_APSTA_MIXED_SUPPORT
 #if WIRELESS_EXT >= 12
 		if (OpMode == OPMODE_AP) {
 /*			pNetDev->wireless_handlers = &rt28xx_ap_iw_handler_def; */
 			pNetDev->wireless_handlers = pDevOpHook->iw_handler;
 		}
 #endif /*WIRELESS_EXT >= 12 */
-#endif /* CONFIG_APSTA_MIXED_SUPPORT */
 
 		/* copy the net device mac address to the net_device structure. */
 		NdisMoveMemory(pNetDev->dev_addr, &pDevOpHook->devAddr[0],
--- a/rt2860v2/os/linux/rt_main_dev.c
+++ b/rt2860v2/os/linux/rt_main_dev.c
@@ -318,7 +318,7 @@ int rt28xx_open(VOID *dev)
 /*	if (RT_DEV_PRIV_FLAGS_GET(net_dev) == INT_MAIN) */
 	if (RTMP_DRIVER_MAIN_INF_CHECK(pAd, RT_DEV_PRIV_FLAGS_GET(net_dev)) == NDIS_STATUS_SUCCESS)
 	{
-#ifdef CONFIG_APSTA_MIXED_SUPPORT
+#if 1//def CONFIG_APSTA_MIXED_SUPPORT
 		if (OpMode == OPMODE_AP)
 			net_dev->wireless_handlers = (struct iw_handler_def *) &rt28xx_ap_iw_handler_def;
 #endif /* CONFIG_APSTA_MIXED_SUPPORT */
@@ -443,11 +443,11 @@ PNET_DEV RtmpPhyNetDevInit(
 #endif /*WIRELESS_EXT >= 12 */
 #endif /* CONFIG_STA_SUPPORT */
 
-#ifdef CONFIG_APSTA_MIXED_SUPPORT
+#if 1//def CONFIG_APSTA_MIXED_SUPPORT
 #if WIRELESS_EXT >= 12
 	if (OpMode == OPMODE_AP)
 	{
-		pNetDevHook->iw_handler = &rt28xx_ap_iw_handler_def;
+		pNetDevHook->iw_handler = (void *)&rt28xx_ap_iw_handler_def;
 	}
 #endif /*WIRELESS_EXT >= 12 */
 #endif /* CONFIG_APSTA_MIXED_SUPPORT */
